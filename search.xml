<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[hashCode()和equals()]]></title>
      <url>https://rogerfang.github.io/2017/02/13/hashcode-%E5%92%8Cequals/</url>
      <content type="html"><![CDATA[<h1 id="hashcode的作用"><a href="#hashcode的作用" class="headerlink" title="hashcode的作用"></a>hashcode的作用</h1><p>Java中的hashCode方法就是根据一定的规则将与对象相关的信息（比如对象的存储地址，对象的字段等）映射成一个数值，这个数值称作为散列值。</p>
<p>虽然，每个Java类都包含hashCode() 函数。但是，仅仅当创建并某个“类的散列表”(HashMap，Hashtable，HashSet)时，该类的hashCode() 才有用(作用是：确定该类的每一个对象在散列表中的位置；其它情况下(例如，创建类的单个对象，或者创建类的对象数组等等)，类的hashCode() 没有作用。</p>
<h1 id="hashCode和equals方法"><a href="#hashCode和equals方法" class="headerlink" title="hashCode和equals方法"></a>hashCode和equals方法</h1><ol>
<li>hashCode的存在主要是用于查找的快捷性，如Hashtable，HashMap等，hashCode是用来在散列存储结构中确定对象的存储地址的；</li>
<li>如果两个对象相同，就是适用于equals(java.lang.Object) 方法，那么这两个对象的hashCode一定要相同；</li>
<li>如果对象的equals方法被重写，那么对象的hashCode也尽量重写，并且产生hashCode使用的对象，一定要和equals方法中使用的一致，否则就会违反上面提到的第2点；</li>
<li>两个对象的hashCode相同，并不一定表示两个对象就相同，也就是不一定适用于equals(java.lang.Object)方法，只能够说明这两个对象在散列存储结构中，如Hashtable，他们“存放在同一个篮子里”。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库事务]]></title>
      <url>https://rogerfang.github.io/2017/02/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>一个事务是可以被看作一系列SQL语句的集合。这些操作要么全部执行，要么全部不执行，是一个不可分割的工作单位。</p>
<h1 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h1><h2 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h2><p>原子性（Atomicity）：事务对数据的修改，要么全都执行，要么全都不执行。一个事务对同一数据项的多次读取的结果一定是相同的。</p>
<h2 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h2><p>一致性（Consistency）：指数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。</p>
<p>有些时候这种一致性由数据库的内部规则保证，例如数据的类型必须正确，数据值必须在规定的范围内，等等；另外一些时候这种一致性由应用保证的，例如一般情况下银行账务余额不能是负数，信用卡消费不能超过该卡的信用额度等。</p>
<h2 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h2><p>隔离性（Isolation）：并发的事务是相互隔离的。即一个事务内部的操作及正在操作的数据必须封锁起来，对其他事务是不可见的。</p>
<h2 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h2><p>持久性（Durability）：只要事务成功结束，它对数据库所做的更新就必须永久保存下来。</p>
<p>即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</p>
<h1 id="并发异常情况"><a href="#并发异常情况" class="headerlink" title="并发异常情况"></a>并发异常情况</h1><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><p>脏读（Dirty Read）：某个事务读取的数据是另一个事务正在处理的数据。而另一个事务可能会回滚，造成第一个事务读取的数据是错误的。</p>
<h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><p>不可重复读（Non-repeatable Read）：在一个事务里两次读入数据，但另一个事务已经更改了第一个事务涉及到的数据，造成第一个事务读入旧数据。</p>
<h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><p>幻读（Phantom Read）：事务在操作过程中进行两次查询，第二次查询的结果包含了第一次查询中未出现的数据（这里并不要求两次查询的SQL语句相同）。这是因为在两次查询过程中有另外一个事务插入数据造成的。</p>
<h2 id="丢失更新"><a href="#丢失更新" class="headerlink" title="丢失更新"></a>丢失更新</h2><p>丢失更新（Lost Update）：</p>
<p>第一类：当两个事务更新相同的数据源，如果第一个事务被提交，第二个却被撤销，那么连同第一个事务做的更新也被撤销。<br>第二类：有两个并发事务同时读取同一行数据，然后其中一个对它进行修改提交，而另一个也进行了修改提交。这就会造成第一次写操作失效。</p>
<h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><h2 id="Read-Uncommitted"><a href="#Read-Uncommitted" class="headerlink" title="Read Uncommitted"></a>Read Uncommitted</h2><p>读未提交数据。事务在执行过程既可以看到其他事务没有提交的新插入数据，也可看到其他事务已经提交的对已有记录的更新。</p>
<p>Read Uncommitted会出现<strong>脏读</strong>。</p>
<h2 id="Read-Committed"><a href="#Read-Committed" class="headerlink" title="Read Committed"></a>Read Committed</h2><p>读已提交数据。事务在执行过程中可以看到其他事务已提交的新插入记录，也可看到其他事务已提交的对已有记录的更新。</p>
<p>Read Committed不允许脏读，会出现<strong>不可重复读</strong>。</p>
<h2 id="Repeatable-Read"><a href="#Repeatable-Read" class="headerlink" title="Repeatable Read"></a>Repeatable Read</h2><p>可重复读。事务在执行过程中可以看到其他事务已提交的新插入记录，但不能看到其他事务已提交的对已有记录的更新。</p>
<p>Repeatable Read不允许脏读和不可重复读，会出现<strong>幻读</strong>。</p>
<h2 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h2><p> 串行化。一个事务在执行过程完全看不到其他事务对数据库所做的更新。当两个事务同时访问相同数据时，第一个事务必须等第二个事务完成后才能访问。</p>
<p>Serializable可以防止出丢失更新外所有的一致性问题。</p>
<h1 id="事务隔离的实现——锁"><a href="#事务隔离的实现——锁" class="headerlink" title="事务隔离的实现——锁"></a>事务隔离的实现——锁</h1><h2 id="共享锁（S锁）"><a href="#共享锁（S锁）" class="headerlink" title="共享锁（S锁）"></a>共享锁（S锁）</h2><p>用于只读操作(SELECT)，锁定共享的资源。共享锁不会阻止其他用户读，但是阻止其他的用户写和修改。</p>
<h2 id="更新锁（U锁）"><a href="#更新锁（U锁）" class="headerlink" title="更新锁（U锁）"></a>更新锁（U锁）</h2><p>用于可更新的资源中。防止当多个会话在读取、锁定以及随后可能进行的资源更新时发生常见形式的死锁。</p>
<h2 id="独占锁（X锁）"><a href="#独占锁（X锁）" class="headerlink" title="独占锁（X锁）"></a>独占锁（X锁）</h2><p>也叫排他锁，一次只能有一个独占锁用在一个资源上，并且阻止其他所有的锁包括共享锁。写是独占锁，可以有效的防止“脏读”。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据库范式]]></title>
      <url>https://rogerfang.github.io/2017/02/13/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>范式是为了消除重复数据减少冗余数据，从而让数据库内的数据更好的组织，让磁盘空间得到更有效利用的一种标准化标准，满足高等级的范式的先决条件是满足低等级范式。</p>
<h1 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h1><p><strong>第一范式（1NF）</strong>：是指数据库表中的每一列都是不可再分的基本数据项。</p>
<p>如果可以再分或者出现重复属性，就可能需要定义一个新的实体，新实体与原实体构成一对多的关系。</p>
<blockquote>
<p>在任何一个关系数据库中，第一范式（1NF）是对关系模式的基本要求，不满足第一范式（1NF）的数据库就不是关系数据库。</p>
</blockquote>
<h1 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h1><p><strong>第二范式（2NF）</strong>：要求数据库表中的每个实例或行必须被唯一地区分。通常需要给表加上一列作为唯一标识符，这个属性列被称为<strong>主键</strong>或<strong>主关键字</strong>。</p>
<p>第二范式（2NF）要求实体的<strong>属性完全依赖于主键</strong>。</p>
<p>所谓<strong>完全依赖</strong>是指不能存在仅部分属性依赖主键，如果存在，那么这个属性和主键的这一部分应该分离出来形成一个新的实体，新实体和原实体之间是一对多的关系。为实现区分通常要为表加上一个列，以存储各个实例的唯一标识。</p>
<h1 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h1><p><strong>第三范式（3NF）</strong>：要求一个数据库表中不包含已经在其他表中包含的非主键信息。</p>
<p>第三范式要求属性不依赖其他表的非主键（消除传递依赖）。</p>
<p>例如，一个部门信息表，其中每个部门都有编号（dept_id）、部门名称、部门简介等信息。那么在员工信息表中列出 dep_id 后就不能再将部门名称、部门简介与部门有关的信息再加入员工信息表中。</p>
<p>也就是表中属性{A,B,C}不能存在传递依赖：A-&gt;B-&gt;C。</p>
<h1 id="BC范式（BCNF）"><a href="#BC范式（BCNF）" class="headerlink" title="BC范式（BCNF）"></a>BC范式（BCNF）</h1><p>BC范式是在第三范式基础上的一种特殊情况，要求主属性不依赖于主属性。</p>
<h1 id="函数依赖"><a href="#函数依赖" class="headerlink" title="函数依赖"></a>函数依赖</h1><p>设R(U)是属性集U上的关系模式。X，Y是U的子集。若对于R(U)的任意一个可能的关系r,r中不可能存在两个元组在X上的属性值相等，而在Y上的属性值不相等，则称X函数确定Y或者Y函数依赖于X。记为X-&gt;Y。</p>
<h1 id="完全函数依赖"><a href="#完全函数依赖" class="headerlink" title="完全函数依赖"></a>完全函数依赖</h1><p>在R(U)中，如果Y函数依赖于X,并且对于X的任何一个真子集X’，都有Y不函数依赖于X’， 则称Y对X完全函数依赖。否则称Y对X部分函数依赖。</p>
<h1 id="传递函数依赖"><a href="#传递函数依赖" class="headerlink" title="传递函数依赖"></a>传递函数依赖</h1><p>在R(U)中，如果X-&gt;Y, Y-&gt;Z, 则称Z对X传递函数依赖。</p>
<h1 id="候选键（候选码）"><a href="#候选键（候选码）" class="headerlink" title="候选键（候选码）"></a>候选键（候选码）</h1><p>设K是一个R(U)中的属性或属性集合(注意可以是属性集合，也即多个属性的组合)，若K完全函数确定U，则K为R的候选键(Candidate key);</p>
<p>通俗地说就是，能够确定全部属性的某个属性或某组属性，称为候选键。若候选键多于一个，则选定其中一个作为主键。</p>
<h1 id="主属性"><a href="#主属性" class="headerlink" title="主属性"></a>主属性</h1><p>包含在任何一个候选键中的属性，叫做主属性(Prime attribute),不包含在任何候选键中的属性称为非主属性或非键属性或非关键字段。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 内存管理]]></title>
      <url>https://rogerfang.github.io/2017/02/12/Java-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>Java 的内存管理就是对象的分配和释放问题。</p>
<p><strong>分配</strong> ：内存的分配是由程序完成的，程序员需要通过关键字<code>new</code>为每个对象申请内存空间 (基本类型除外)，所有的对象都在堆 (Heap)中分配空间。</p>
<p><strong>释放</strong> ：对象的释放是由<strong>垃圾回收机制</strong>决定和执行的，这样做确实简化了程序员的工作。但同时，它也加重了 JVM 的工作。因为，GC 为了能够正确释放对象，GC 必须监控每一个对象的运行状态，包括对象的申请、引用、被引用、赋值等，GC 都需要进行监控。</p>
<h1 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h1><p>在 Java 中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：</p>
<ul>
<li>首先，这些<strong>对象是可达的</strong>，即在有向图中，存在通路可以与其相连（也就是说仍存在该内存对象的引用）；</li>
<li>其次，这些<strong>对象是无用的</strong>，即程序以后不会再使用这些对象。<br>如果对象满足这两个条件，这些对象就可以判定为 Java 中的内存泄漏，这些对象不会被 GC 所回收，然而它却占用内存。</li>
</ul>
<h1 id="内存分配策略"><a href="#内存分配策略" class="headerlink" title="内存分配策略"></a>内存分配策略</h1><p>几条普遍的内存分配规则：</p>
<ul>
<li>对象优先在Eden分配：大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够的空间进行分配的时候，虚拟机将发起一次Minor GC。</li>
<li>大对象直接进入老年代：所谓大对象指的是需要大量连续内存空间的Java对象，最典型的的大对象就是那种很长的字符串及数组。</li>
<li>长期存活的对象将进入老年代：虚拟机给每个对象定义了一个对象年龄计数器。如果对象在Eden每熬过一次Minor GC，年龄增加1，当年龄增加到一定成都，就会晋升到老年代中。</li>
</ul>
<h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><p>垃圾回收是一种<strong>动态存储管理</strong>技术，它自动地释放不再被程序引用的对象，按照特定的垃圾收集算法来实现资源自动回收的功能。当一个对象不再被引用的时候，内存回收它占领的空间，以便空间被后来的新对象使用，以免造成内存泄露。</p>
<p>垃圾收集器是自动运行的，一般情况下，无需显示的请求垃圾收集器，程序运行时，垃圾收集器会不时检查对象的各个引用，并回收无引用对象所占用的空间。调用System类中的静态方法 gc() 可以运行垃圾收集器，但并不能保证立即回收指定对象。</p>
<p>具体请看：<a href="https://rogerfang.github.io/2017/01/05/JVM-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/">JVM: 垃圾回收机制</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 序列化]]></title>
      <url>https://rogerfang.github.io/2017/02/12/Java-%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>Java序列化技术的基础是被序列化的类需要实现 Serializable 接口，使用 ObjectInputStream 和 ObjectOutputStream 进行对象的读写。</p>
<h1 id="默认的序列化机制"><a href="#默认的序列化机制" class="headerlink" title="默认的序列化机制"></a>默认的序列化机制</h1><p>如果仅仅只是让某个类实现Serializable接口，而没有其它任何处理的话，则就是使用默认序列化机制。使用默认机制，在序列化对象时，不仅会序列化当前对象本身，还会对该对象引用的其它对象也进行序列化，同样地，这些其它对象引用的另外对象也将被序列化，以此类推。所以，如果一个对象包含的成员变量是容器类对象，而这些容器所含有的元素也是容器类对象，那么这个序列化的过程就会较复杂，开销也较大。</p>
<h1 id="序列化ID"><a href="#序列化ID" class="headerlink" title="序列化ID"></a>序列化ID</h1><p>虚拟机是否允许反序列化，不仅取决于<strong>类路径</strong>和<strong>功能代码</strong>是否一致，一个非常重要的一点是两个类的<strong>序列化 ID 是否一致</strong>（就是 private static final long serialVersionUID = 1L）。</p>
<p>序列化ID生成有两种策略：一种是固定的 1L，另一种是随机生成一个不重复的long类型数据。服务端随机生成的序列化 ID 的作用是，有些时候，通过改变序列化 ID 可以用来限制某些客户端的使用（<strong>版本更新</strong>）。</p>
<h1 id="静态变量序列化"><a href="#静态变量序列化" class="headerlink" title="静态变量序列化"></a>静态变量序列化</h1><p><strong>序列化不保存静态变量。</strong></p>
<h1 id="父类的序列化和Transient关键字"><a href="#父类的序列化和Transient关键字" class="headerlink" title="父类的序列化和Transient关键字"></a>父类的序列化和Transient关键字</h1><p>一个子类实现了 Serializable 接口，要想将父类对象也序列化，就需要让<strong>父类也实现 Serializable接口</strong>。如果父类不实现的话，就需要有<strong>默认的无参构造函数</strong>。</p>
<p>在父类没有实现 Serializable接口时，虚拟机不会序列化父对象，而一个 Java 对象的构造必须先有父对象，才有子对象，反序列化也不例外。所以反序列化时，为了构造父对象，只能调用父类的无参构造函数作为默认的父对象。</p>
<p>Transient 关键字的作用是控制变量的序列化，在变量声明前加上该关键字，可以阻止该变量被序列化到文件中，在被反序列化后，transient 变量的值被设为初始值，如 int 型的是 0，对象型的是 null。</p>
<h1 id="敏感字段加密"><a href="#敏感字段加密" class="headerlink" title="敏感字段加密"></a>敏感字段加密</h1><p>在序列化过程中，虚拟机会试图调用对象类里的 writeObject 和 readObject 方法，进行用户自定义的序列化和反序列化，如果没有这样的方法，则默认调用是 ObjectOutputStream 的 defaultWriteObject 方法以及 ObjectInputStream 的 defaultReadObject 方法。用户自定义的 writeObject 和 readObject 方法可以允许用户控制序列化的过程，比如可以在序列化的过程中动态改变序列化的数值。基于这个原理，可以在实际应用中得到使用，用于敏感字段的加密工作。</p>
<h1 id="序列化存储规则"><a href="#序列化存储规则" class="headerlink" title="序列化存储规则"></a>序列化存储规则</h1><p>Java 序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为<strong>同一对象</strong>时，并不会再将对象的内容进行存储，而只是再次存储一份引用，增加的字节存储空间就是新增引用和一些控制信息的空间。反序列化时，恢复引用关系，多个引用指向唯一的对象，二者相等。存储规则极大的节省了存储空间。</p>
<p>将一对象两次进行序列化保存时，写入一次后修改对象属性值再次保存第二次，这种情况下，虚拟机根据引用关系知道有一个相同对象已经写入到文件中，因此只保存第二次写的引用。所以读取时，都是第一次保存的对象。</p>
<h1 id="Externalizable接口"><a href="#Externalizable接口" class="headerlink" title="Externalizable接口"></a>Externalizable接口</h1><p>无论是使用<code>transient</code>关键字，还是使用<code>writeObject()</code>和<code>readObject()</code>方法，其实都是基于<code>Serializable</code>接口的序列化。JDK中提供了另一个序列化接口–<code>Externalizable</code>，使用该接口之后，之前基于 Serializable 接口的序列化机制就将失效。</p>
<p><code>Externalizable</code>继承于Serializable，当使用该接口时，序列化的细节需要由程序员去完成。如果<code>writeExternal()</code>与<code>readExternal()</code>方法未作任何处理，那么该序列化行为将不会保存/读取任何一个字段。</p>
<p>另外，若使用<code>Externalizable</code>进行序列化，当读取对象时，<strong>会调用被序列化类的无参构造器去（而且是public修饰）创建一个新的对象</strong>，然后再将被保存对象的字段的值分别填充到新对象中。（<code>Serializable</code>不会调用任何构造方法，而是直接还原对象）</p>
<h1 id="readResovle-序列化时的对象替换"><a href="#readResovle-序列化时的对象替换" class="headerlink" title="readResovle()序列化时的对象替换"></a>readResovle()序列化时的对象替换</h1><p>在有些情况下，可能会希望在序列化的时候使用另外一个对象来代替当前对象。</p>
<p>其中的动机可能是当前对象中包含了一些不希望被序列化的域，比如这些域都是从另外一个域派生而来的；也可能是希望隐藏实际的类层次结构；还有可能是添加自定义的对象管理逻辑，如保证某个类在JVM中只有一个实例。<br>相对于把无关的域都设成transient来说，使用对象替换是一个更好的选择，提供了更多的灵活性。</p>
<hr>
<p>感谢：<br><a href="https://www.ibm.com/developerworks/cn/java/j-lo-serial/#ibm-pcon" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-serial/#ibm-pcon</a><br><a href="http://www.blogjava.net/jiangshachina/archive/2012/02/13/369898.html" target="_blank" rel="external">http://www.blogjava.net/jiangshachina/archive/2012/02/13/369898.html</a><br><a href="http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi" target="_blank" rel="external">http://www.infoq.com/cn/articles/cf-java-object-serialization-rmi</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(66): 矩阵中的路径]]></title>
      <url>https://rogerfang.github.io/2017/02/11/SwordPointToOffer-66-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串”bccced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><strong>回溯法</strong></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringPathInMatrix</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPath</span><span class="params">(<span class="keyword">char</span>[] matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">char</span>[] str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length != rows * cols || str == <span class="keyword">null</span> || str.length &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows * cols];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; ++i)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; ++j)&#123;</div><div class="line">                <span class="keyword">if</span> (doHasPath(matrix, rows, cols, str, i, j, visited, <span class="number">0</span>))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doHasPath</span><span class="params">(<span class="keyword">char</span>[] matrix, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">char</span>[] str, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">boolean</span>[] visited, <span class="keyword">int</span> pathLength)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (pathLength == str.length)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">boolean</span> hasPath = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 判断位置是否合法</span></div><div class="line">        <span class="keyword">if</span> (row &gt;= <span class="number">0</span> &amp;&amp; row &lt; rows</div><div class="line">                &amp;&amp; col &gt;= <span class="number">0</span> &amp;&amp; col &lt; cols</div><div class="line">                &amp;&amp; matrix[row * cols + col] == str[pathLength]</div><div class="line">                &amp;&amp; !visited[row * cols + col]) &#123;</div><div class="line"></div><div class="line">            visited[row * cols + col] = <span class="keyword">true</span>;</div><div class="line">            <span class="comment">// pathLength[0]++;</span></div><div class="line">            pathLength++;</div><div class="line"></div><div class="line">            <span class="comment">// 按左上右下进行回溯</span></div><div class="line">            hasPath = doHasPath(matrix, rows, cols, str, row, col - <span class="number">1</span>, visited, pathLength)</div><div class="line">                    || doHasPath(matrix, rows, cols, str, row - <span class="number">1</span>, col, visited, pathLength)</div><div class="line">                    || doHasPath(matrix, rows, cols, str, row, col + <span class="number">1</span>, visited, pathLength)</div><div class="line">                    || doHasPath(matrix, rows, cols, str, row + <span class="number">1</span>, col, visited, pathLength);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!hasPath) &#123;</div><div class="line">                visited[row * cols + col] = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> hasPath;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(65): 滑动窗口的最大值]]></title>
      <url>https://rogerfang.github.io/2017/02/11/SwordPointToOffer-65-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。</p>
<p>例如：输入数组 {2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，它们的最大值分别为 {4,4,6,6,6,5}。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>滑动窗口可以看成是一个队列，当窗口滑动时，处于窗口的第一个数字被删除，同时在窗口的末尾添加一个新的数字。</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>前面的题21和题7相结合，实现一个包含$O(1)$时间的min或max的栈，同时用两个栈实现一个队列。总的时间复杂度为$O(n)$，但是增加了空间复杂度$O(n)$。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>换一种思路，并不把滑动窗口的每个数值都存入队列中，而是只把有可能成为滑动窗口最大值的数值存入到一个两端开口的队列。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxInSlidingWindow</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        ArrayList&lt;Integer&gt; maxInWindows = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (num == <span class="keyword">null</span> || size &lt; <span class="number">1</span> || num.length &lt; size)</div><div class="line">            <span class="keyword">return</span> maxInWindows;</div><div class="line">        LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</div><div class="line">            <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; num[i] &gt;= num[queue.getLast()]) &#123;</div><div class="line">                queue.removeLast();</div><div class="line">            &#125;</div><div class="line">            queue.addLast(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &lt; num.length; ++i) &#123;</div><div class="line">            maxInWindows.add(num[queue.getFirst()]);</div><div class="line">            <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; num[i] &gt;= num[queue.getLast()]) &#123;</div><div class="line">                queue.removeLast();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 队首元素超出滑动窗口进行出队</span></div><div class="line">            <span class="keyword">if</span> (!queue.isEmpty() &amp;&amp; i - queue.getFirst() &gt;= size)</div><div class="line">                queue.removeFirst();</div><div class="line">            queue.addLast(i);</div><div class="line">        &#125;</div><div class="line">        maxInWindows.add(num[queue.getFirst()]);</div><div class="line">        <span class="keyword">return</span> maxInWindows;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(64): 数据流中的中位数]]></title>
      <url>https://rogerfang.github.io/2017/02/11/SwordPointToOffer-64-%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有值排序之后位于中间的数值。如果数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>由于数据是从一个数据流中读出来的，数据的数目随着时间的变化而增加。如果用一个数据容器来保存从流中读出来的数据，当有新的数据流中读出来时，这些数据就插入到数据容器中。这个数据容器用什么数据结构定义更合适呢？</p>
<p><strong>数组</strong>是最简单的容器。如果数组没有排序，可以用 <strong>Partition</strong> 函数找出数组中的中位数。在没有排序的数组中插入一个数字和找出中位数的时间复杂度是 O(1)和 O(n)。</p>
<p>我们还可以往数组里插入新数据时让<strong>数组保持排序</strong>，这是由于可能要移动 O(n)个数，因此需要 O(n)时间才能完成插入操作。在已经排好序的数组中找出中位数是一个简单的操作，只需要 O(1)时间即可完成。</p>
<p><strong>排序的链表</strong>时另外一个选择。我们需要 O(n)时间才能在链表中找到合适的位置插入新的数据。如果定义两个指针指向链表的中间结点（如果链表的结点数目是奇数，那么这两个指针指向同一个结点），那么可以在 O（1）时间得出中位数。此时时间效率与及基于排序的数组的时间效率一样。</p>
<p><strong>二叉搜索树</strong>可以把插入新数据的平均时间降低到 O(logn)。但是，当二叉搜索树极度不平衡从而看起来像一个排序的链表时，插入新数据的时间仍然是 O(n)。为了得到中位数，可以在二叉树结点中添加一个表示子树结点数目的字段。有了这个字段，可以在平均 O(logn)时间得到中位数，但差情况仍然是 O(n)。</p>
<p>为了避免二叉搜索树的最差情况，还可以利用平衡的二叉搜索树，即<strong> AVL 树</strong>。通常 AVL 树的平衡因子是左右子树的高度差。可以稍作修改，把 AVL 的平衡因子改为左右子树结点数目只差。有了这个改动，可以用 O(logn)时间往 AVL 树中添加一个新结点，同时用 O(1)时间得到所有结点的中位数。</p>
<p>AVL 树的时间效率很高，但大部分编程语言的函数库中都没有实现这个数据结构。应聘者在短短几十分钟内实现 AVL 的插入操作是非常困难的。于是我们不得不再分析还有没有其它的方法。</p>
<p>如果能够保证数据容器左边的数据都小于右边的数据，这样即使左、右两边内部的数据没有排序，也可以根据左边最大的数及右边最小的数得到中位数。如何快速从一个容器中找出最大数？用最大堆实现这个数据容器，因为位于堆顶的就是最大的数据。同样，也可以快速从最小堆中找出最小数。　　因此可以用如下思路来解决这个问题：用一个最大堆实现左边的数据容器，用最小堆实现右边的数据容器。往堆中插入一个数据的时间效率是 O(logn)。由于只需 O(1)时间就可以得到位于堆顶的数据，因此得到中位数的时间效率是 O(1)。</p>
<p>接下来考虑用<strong>最大堆</strong>和<strong>最小堆</strong>实现的一些细节。首先要保证数据平均分配到两个堆中，因此两个堆中数据的数目之差不能超过 1（为了实现平均分配，可以在数据的总数目是偶数时把新数据插入到最小堆中，否则插入到最大堆中）。</p>
<p>还要保证最大堆中里的所有数据都要小于最小堆中的数据。当数据的总数目是偶数时，按照前面分配的规则会把新的数据插入到最小堆中。如果此时新的数据比最大堆中的一些数据要小，怎么办呢？</p>
<p>可以先把新的数据插入到最大堆中，接着把最大堆中的最大的数字拿出来插入到最小堆中。由于最终插入到最小堆的数字是原最大堆中最大的数字，这样就保证了最小堆中的所有数字都大于最大堆中的数字。 当需要把一个数据插入到最大堆中，但这个数据小于最小堆里的一些数据时，这个情形和前面类似。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(63): 二叉搜索树的第k个节点]]></title>
      <url>https://rogerfang.github.io/2017/02/10/SwordPointToOffer-63-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一棵二叉搜索树，请找出其中的第k个的节点（按节点的数值大小顺序）。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>如果按照中序遍历的顺序遍历一棵二叉搜索树，遍历序列的数值是递增排序的。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KthNodeInBST</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">        TreeNode left = <span class="keyword">null</span>;</div><div class="line">        TreeNode right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">findKth</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || k == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        count = k;</div><div class="line">        <span class="keyword">return</span> doFindKth(root);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">doFindKth</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        TreeNode target = <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (root.left != <span class="keyword">null</span>)</div><div class="line">            target = doFindKth(root.left);</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (count == <span class="number">1</span>)</div><div class="line">                target = root;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                count--;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (target == <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>)</div><div class="line">            target = doFindKth(root.right);</div><div class="line">        <span class="keyword">return</span> target;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(62): 序列化二叉树]]></title>
      <url>https://rogerfang.github.io/2017/02/10/SwordPointToOffer-62-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>请实现两个函数，分别用来序列化和反序列化二叉树。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>我们知道可以从前序遍历和中序遍历构造出一棵二叉树。受此启发，我们可以先把一棵二叉树序列化成一个前序遍历序列和一个中序序列，然后再反序列化时通过这两个序列重构出原二叉树。</p>
<p>这个思路有两个<strong>缺点</strong>。一个缺点是该方法要求二叉树中不能用有数值重复的节点。另外只有当两个序列中所有数据都读出后才能开始反序列化。如果两个遍历序列的数据是从一个流里读出来的，那就可能需要等较长的时间。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>实际上如果二叉树的序列化是从根节点开始的话，那么相应的反序列化在根节点的数值读出来的时候就可以开始了。因此我们可以根据前序遍历的顺序来序列化二叉树，因为前序遍历是从根结点开始的。当在遍历二叉树碰到 NULL 指针时，这些 NULL 指针序列化成一个特殊的字符（比如‘$’）。另外，节点的数值之间要用一个特殊字符（比如’,’）隔开。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeBinaryTree</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">        TreeNode left = <span class="keyword">null</span>;</div><div class="line">        TreeNode right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NULL_NODE = <span class="string">"$"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">","</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serialize</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        </div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        doSerialize(root, sb);</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSerialize</span><span class="params">(TreeNode node, StringBuilder sb)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)&#123;</div><div class="line">            sb.append(NULL_NODE);</div><div class="line">            sb.append(SEPARATOR);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            sb.append(node.val);</div><div class="line">            sb.append(SEPARATOR);</div><div class="line">            doSerialize(node.left, sb);</div><div class="line">            doSerialize(node.right, sb);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deserialize</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        String[] splits = str.split(SEPARATOR);</div><div class="line">        <span class="keyword">return</span> doDeserialize(splits);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = -<span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">doDeserialize</span><span class="params">(String[] strs)</span></span>&#123;</div><div class="line">        index++;</div><div class="line">        <span class="keyword">if</span> (!strs[index].equals(NULL_NODE) &amp;&amp; !strs[index].equals(<span class="string">""</span>) &amp;&amp; index &lt; strs.length)&#123;</div><div class="line">            TreeNode root = <span class="keyword">new</span> TreeNode(Integer.parseInt(strs[index]));</div><div class="line">            root.left = doDeserialize(strs);</div><div class="line">            root.right = doDeserialize(strs);</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(61): 按之字形顺序打印二叉树]]></title>
      <url>https://rogerfang.github.io/2017/02/10/SwordPointToOffer-61-%E6%8C%89%E4%B9%8B%E5%AD%97%E5%BD%A2%E9%A1%BA%E5%BA%8F%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>按之字形顺序打印二叉树需要<strong>两个栈</strong>。我们在打印某一行结点时，把下一层的子结点保存到相应的栈里。如果当前打印的是奇数层，则先保存左子结点再保存右子结点到一个栈里；如果当前打印的是偶数层，则先保存右子结点再保存左子结点到第二个栈里。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintTreeinZigzag</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">        TreeNode left = <span class="keyword">null</span>;</div><div class="line">        TreeNode right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; handle(TreeNode root)&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        ArrayList&lt;LinkedList&lt;TreeNode&gt;&gt; stacks = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        stacks.add(<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;());</div><div class="line">        stacks.add(<span class="keyword">new</span> LinkedList&lt;TreeNode&gt;());</div><div class="line">        <span class="comment">// 当前使用栈0/1</span></div><div class="line">        <span class="keyword">int</span> current = <span class="number">0</span>;</div><div class="line"></div><div class="line">        stacks.get(current).add(root);</div><div class="line">        ArrayList&lt;Integer&gt; levelList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">while</span> (!stacks.get(current).isEmpty())&#123;</div><div class="line">            <span class="comment">// 出栈</span></div><div class="line">            TreeNode node = stacks.get(current).removeLast();</div><div class="line">            levelList.add(node.val);</div><div class="line">            <span class="keyword">if</span> (current == <span class="number">0</span>)&#123;</div><div class="line">                <span class="comment">// right to left</span></div><div class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)</div><div class="line">                    stacks.get(<span class="number">1</span>-current).add(node.left);</div><div class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)</div><div class="line">                    stacks.get(<span class="number">1</span>-current).add(node.right);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// left to right</span></div><div class="line">                <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)</div><div class="line">                    stacks.get(<span class="number">1</span>-current).add(node.right);</div><div class="line">                <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)</div><div class="line">                    stacks.get(<span class="number">1</span>-current).add(node.left);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (stacks.get(current).isEmpty())&#123;</div><div class="line">                current = <span class="number">1</span>- current;</div><div class="line">                list.add(levelList);</div><div class="line">                levelList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(60): 把二叉树打印成多行]]></title>
      <url>https://rogerfang.github.io/2017/02/10/SwordPointToOffer-60-%E6%8A%8A%E4%BA%8C%E5%8F%89%E6%A0%91%E6%89%93%E5%8D%B0%E6%88%90%E5%A4%9A%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>二叉树的层序遍历，需要借助队列完成。</p>
<p>本题需要注意的问题，将每层分行打印，需要两个变量：</p>
<ul>
<li>一个变量表示在当前层中还没有打印的节点数；</li>
<li>一个变量表示下一层节点的数目。</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintTreeInLines</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">        TreeNode left = <span class="keyword">null</span>;</div><div class="line">        TreeNode right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; handle(TreeNode root) &#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        queue.add(root);</div><div class="line">        <span class="keyword">int</span> current = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> next = <span class="number">0</span>;</div><div class="line">        TreeNode node;</div><div class="line">        ArrayList&lt;Integer&gt; levelList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">// 从队首开始删</span></div><div class="line">            node = queue.remove();</div><div class="line">            levelList.add(node.val);</div><div class="line">            <span class="keyword">if</span> (node.left != <span class="keyword">null</span>)&#123;</div><div class="line">                queue.add(node.left);</div><div class="line">                next++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)&#123;</div><div class="line">                queue.add(node.right);</div><div class="line">                next++;</div><div class="line">            &#125;</div><div class="line">            current--;</div><div class="line">            <span class="keyword">if</span> (current == <span class="number">0</span>)&#123;</div><div class="line">                list.add(levelList);</div><div class="line">                levelList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                current = next;</div><div class="line">                next = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(59): 对称的二叉树]]></title>
      <url>https://rogerfang.github.io/2017/02/10/SwordPointToOffer-59-%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通常我们有三种不同的二叉树遍历算法，即前序遍历、中序遍历和后序遍历。在这三种遍历算法中，都是先遍历左子结点再遍历右子结点。我们是否可以定义一种遍历算法，先遍历右子结点再遍历左子结点？比如我们针对前序遍历定义一种对称的遍历算法，即先遍历父节点，再遍历它的右子结点，最后遍历它的左子结点。</p>
<p>我们发现可以用过比较二叉树的<strong>前序遍历序列</strong>和<strong>对称前序遍历序列</strong>来判断二叉树是不是对称的。如果两个序列一样，那么二叉树就是对称的。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SymmetricalBinaryTree</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">        TreeNode left = <span class="keyword">null</span>;</div><div class="line">        TreeNode right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">return</span> isSymmetrical(root.left, root.right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSymmetrical</span><span class="params">(TreeNode left, TreeNode right)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> || right == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (left.val != right.val)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> isSymmetrical(left.left, right.right) &amp;&amp; isSymmetrical(left.right, right.left);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(58): 二叉树的下一个节点]]></title>
      <url>https://rogerfang.github.io/2017/02/09/SwordPointToOffer-58-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个二叉树和其中的一个节点，请找出中序遍历顺序的下一个节点并且返回。注意，树中的节点不仅包含左右子节点，同时包含指向父节点的指针。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>如果一个节点有右子树，那么它的下一个节点就是它的右子树中的左子节点。也就是说右子节点出发一直沿着指向左子节点的指针，我们就能找到它的下一个节点。</p>
<p>接着我们分析一个节点没有右子树的情形。如果节点是它父节点的左子节点，那么它的下一个节点就是它的父节点。</p>
<p>如果一个节点既没有右子树，并且它还是它父节点的右子节点，这种情形就比较复杂。我们可以沿着指向父节点的指针一直向上遍历，直到找到一个是它父节点的左子节点的节点。如果这样的节点存在，那么这个节点的父节点就是我们要找的下一个节点。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NextNodeInBinaryTree</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeLinkNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        TreeLinkNode left = <span class="keyword">null</span>;</div><div class="line">        TreeLinkNode right = <span class="keyword">null</span>;</div><div class="line">        TreeLinkNode parent = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        TreeLinkNode(<span class="keyword">int</span> val) &#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> TreeLinkNode <span class="title">handle</span><span class="params">(TreeLinkNode node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        TreeLinkNode target = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>)&#123;</div><div class="line">            target = node.right;</div><div class="line">            <span class="keyword">while</span> (target.left != <span class="keyword">null</span>)&#123;</div><div class="line">                target = target.left;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (node.parent != <span class="keyword">null</span>)&#123;</div><div class="line">            target = target.parent;</div><div class="line">            TreeLinkNode cur = node;</div><div class="line">            <span class="keyword">while</span> (target != <span class="keyword">null</span> &amp;&amp; target.left != cur)&#123;</div><div class="line">                cur = target;</div><div class="line">                target = target.parent;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> target;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(57): 删除链表中重复的节点]]></title>
      <url>https://rogerfang.github.io/2017/02/09/SwordPointToOffer-57-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。</p>
<p>例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>从头遍历整个链表，如果当前结点的值与下一个结点的值相同，那么它们就是重复的结点，都可以被删除。为了保证删除之后的链表仍然是相连的而没有中间断开，我们要把当前的前一个结点和后面值比当前结点的值要大的结点相连。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteDuplicatedListNode</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        ListNode next = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ListNode(<span class="keyword">int</span> val) &#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplication</span><span class="params">(ListNode head)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// 临时的头节点</span></div><div class="line">        ListNode root = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        root.next = head;</div><div class="line"></div><div class="line">        ListNode pre = root;</div><div class="line">        ListNode node = head;</div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span> &amp;&amp; node.next != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (node.val == node.next.val)&#123;</div><div class="line">                <span class="keyword">while</span> (node.next != <span class="keyword">null</span> &amp;&amp; node.next.val == node.val)&#123;</div><div class="line">                    node = node.next;</div><div class="line">                &#125;</div><div class="line">                pre.next = node.next;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                pre = node;</div><div class="line">            &#125;</div><div class="line">            node = node.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> root.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(56): 链表中环的入口节点]]></title>
      <url>https://rogerfang.github.io/2017/02/09/SwordPointToOffer-56-%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>一个链表中包含环，请找出该链表的环的入口结点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 节点定义</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    ListNode next = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    ListNode(<span class="keyword">int</span> val) &#123;</div><div class="line">        <span class="keyword">this</span>.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>可以用两个指针来解决这个问题。先定义两个指针 P1 和 P2 指向链表的头结点。如果链表中环有 n 个结点，指针 P1 在链表上向前移动 n 步，然后两个指针以相同的速度向前移动。当第二个指针指向环的入口结点时，第一个指针已经围绕着环走了一圈又回到了入口结点。</p>
<p>剩下的问题就是<strong>如何得到环中结点的数目</strong>。我们在面试题 15 的第二个相关题目时用到了一快一慢的两个指针。如果两个指针相遇，表明链表中存在环。两个指针相遇的结点一定是在环中。可以从这个结点出发，一边继续向前移动一边计数，当再次回到这个结点时就可以得到环中结点数了。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryNodeInListLoop</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        ListNode next = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ListNode(<span class="keyword">int</span> val) &#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">handle</span><span class="params">(ListNode head)</span></span>&#123;</div><div class="line">        ListNode meetingNode = getMeetingNode(head);</div><div class="line">        <span class="keyword">if</span> (meetingNode == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> nodesInLoop = <span class="number">1</span>;</div><div class="line">        ListNode node1 = meetingNode;</div><div class="line">        <span class="keyword">while</span> (node1.next != meetingNode)&#123;</div><div class="line">            node1 = node1.next;</div><div class="line">            ++nodesInLoop;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// move node1</span></div><div class="line">        node1 = head;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodesInLoop; ++i)</div><div class="line">            node1 = node1.next;</div><div class="line">        </div><div class="line">        <span class="comment">// move node1 &amp; node2</span></div><div class="line">        ListNode node2 = head;</div><div class="line">        <span class="keyword">while</span> (node1 != node2)&#123;</div><div class="line">            node1 = node1.next;</div><div class="line">            node2 = node2.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> node1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">getMeetingNode</span><span class="params">(ListNode head)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        ListNode slow = head;</div><div class="line">        ListNode fast = slow.next;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span> &amp;&amp; fast != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (fast == slow)</div><div class="line">                <span class="keyword">return</span> fast;</div><div class="line">            slow = slow.next;</div><div class="line">            fast = fast.next;</div><div class="line">            <span class="comment">// fast 走快一点才能和slow相遇</span></div><div class="line">            <span class="keyword">if</span> (fast != <span class="keyword">null</span>)</div><div class="line">                fast = fast.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(54): 表示数值的字符串]]></title>
      <url>https://rogerfang.github.io/2017/02/09/SwordPointToOffer-54-%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%80%BC%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>表示数值的字符串遵循如下模式：<br><code>[sign]integral-digits[.[fractional-digits]][e|E[sign]exponential-digits]</code></p>
<p>在数值之前可能有一个表示正负的’-‘或者’+’。接下来是若干个 0 到 9 的数位表示数值的整数部分（在某些小数里可能没有数值的整数部分）。如果数值是一个小数，那么在小数点后面可能会有若干个 0 到 9 的数位表示数值的小数部分。如果数值用科学计数法表示，接下来是一个’e’或者‘E’，以及紧跟着的一个整数（可以有正负号）表示指数。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumericStrings</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isNumeric</span><span class="params">(String string)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (string == <span class="keyword">null</span> || string.length() &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (string.charAt(index) == <span class="string">'+'</span> || string.charAt(index) == <span class="string">'-'</span>) &#123;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 已经到达字符串的末尾了</span></div><div class="line">        <span class="keyword">if</span> (index &gt;= string.length()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">boolean</span> numeric = <span class="keyword">true</span>;</div><div class="line">        index = scanDigits(string, index);</div><div class="line">        <span class="comment">// 还未到字符串的末尾</span></div><div class="line">        <span class="keyword">if</span> (index &lt; string.length()) &#123;</div><div class="line">            <span class="comment">// 如果是小数点</span></div><div class="line">            <span class="keyword">if</span> (string.charAt(index) == <span class="string">'.'</span>) &#123;</div><div class="line">                <span class="comment">// 移动到下一个位置</span></div><div class="line">                index++;</div><div class="line">                index = scanDigits(string, index);</div><div class="line">                <span class="comment">// 已经到了字符串的末尾了</span></div><div class="line">                <span class="keyword">if</span> (index &gt;= string.length()) &#123;</div><div class="line">                    numeric = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 还未到字符串结束位置</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (index &lt; string.length() &amp;&amp; (string.charAt(index) == <span class="string">'e'</span> || string.charAt(index) == <span class="string">'E'</span>)) &#123;</div><div class="line">                    numeric = isExponential(string, index);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    numeric = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 如果是指数标识</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (string.charAt(index) == <span class="string">'e'</span> || string.charAt(index) == <span class="string">'E'</span>) &#123;</div><div class="line">                numeric = isExponential(string, index);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                numeric = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> numeric;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 已经到了字符串的末尾了，说明其没有指数部分</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断是否是科学计数法的结尾部分，如E5，e5，E+5，e-5，e(E)后面接整数</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> string 字符串</div><div class="line">     * <span class="doctag">@param</span> index  开始匹配的位置</div><div class="line">     * <span class="doctag">@return</span> 匹配的结果</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExponential</span><span class="params">(String string, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= string.length() || (string.charAt(index) != <span class="string">'e'</span> &amp;&amp; string.charAt(index) != <span class="string">'E'</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 移动到下一个要处理的位置</span></div><div class="line">        index++;</div><div class="line">        <span class="comment">// 到达字符串的末尾，就返回false</span></div><div class="line">        <span class="keyword">if</span> (index &gt;= string.length()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (string.charAt(index) == <span class="string">'+'</span> || string.charAt(index) == <span class="string">'-'</span>) &#123;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 到达字符串的末尾，就返回false</span></div><div class="line">        <span class="keyword">if</span> (index &gt;= string.length()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        index = scanDigits(string, index);</div><div class="line">        <span class="comment">// 如果已经处理到了的数字的末尾就认为是正确的指数</span></div><div class="line">        <span class="keyword">return</span> index &gt;= string.length();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 扫描字符串部分的数字部分</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> string 字符串</div><div class="line">     * <span class="doctag">@param</span> index  开始扫描的位置</div><div class="line">     * <span class="doctag">@return</span> 从扫描位置开始第一个数字字符的位置</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">scanDigits</span><span class="params">(String string, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (index &lt; string.length() &amp;&amp; string.charAt(index) &gt;= <span class="string">'0'</span> &amp;&amp; string.charAt(index) &lt;= <span class="string">'9'</span>) &#123;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> index;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(53): 正则表达式匹配]]></title>
      <url>https://rogerfang.github.io/2017/02/09/SwordPointToOffer-53-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>请实现一个函数用来匹配包括’.’和’<em>‘的正则表达式。模式中的字符’.’表示任意一个字符，而’</em>‘表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但是与”aa.a”和”ab*a”均不匹配</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>每次从字符串里拿出<strong>一个字符</strong>和模式中的字符去匹配。先来分析如何匹配一个字符。如果模式中的字符 ch是‘.’，那么它可以匹配字符串中的任意字符。如果模式中的字符 ch不是’.’而且字符串中的字符也是 ch，那么他们相互匹配。当字符串中的字符和模式中的字符相匹配时，接着匹配后面的字符。</p>
<p>相对而言当模式中的<strong>第二个字符</strong>不是‘*’时问题要简单很多。如果字符串中的第一个字符和模式中的第一个字符相匹配，那么在字符串和模式上都向后移动一个字符，然后匹配剩余的字符串和模式。如果字符串中的第一个字符和模式中的第一个字符不相匹配，则直接返回 false。</p>
<p>当模式中的<strong>第二个字符</strong>是‘<em>’时问题要复杂一些，因为可能有多种不同的匹配方式。一个选择是在模式上向后移动两个字符。这相当于‘’和它面前的字符被忽略掉了，因为‘</em>’可以匹配字符串中 0 个字符。如果模式中的第一个字符和字符串中的第一个字符相匹配时，则在字符串向后移动一个字符，而在模式上有两个选择：我们可以在模式上向后移动两个字符，也可以保持模式不变。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegularExpressionsMatch</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        RegularExpressionsMatch test = <span class="keyword">new</span> RegularExpressionsMatch();</div><div class="line">        System.out.println(test.match(<span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">' '</span>&#125;, <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'.'</span>,<span class="string">'*'</span>&#125;));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span>[] input, <span class="keyword">char</span>[] pattern)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span> || pattern == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> matchCore(input, <span class="number">0</span>, pattern, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">matchCore</span><span class="params">(<span class="keyword">char</span>[] input, <span class="keyword">int</span> i, <span class="keyword">char</span>[] pattern, <span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">        <span class="comment">// 匹配串和模式串都到达尾，说明成功匹配</span></div><div class="line">        <span class="keyword">if</span> (i &gt;= input.length &amp;&amp; p &gt;= pattern.length) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 只有模式串到达结尾，说明匹配失败</span></div><div class="line">        <span class="keyword">if</span> (i &lt; input.length &amp;&amp; p &gt;= pattern.length) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 模式串未结束, 匹配串有可能结束有可能未结束</span></div><div class="line">        <span class="comment">// 第二个字符是'*', p位置的下一个字符中为*号</span></div><div class="line">        <span class="keyword">if</span> (p + <span class="number">1</span> &lt; pattern.length &amp;&amp; pattern[p + <span class="number">1</span>] == <span class="string">'*'</span>) &#123;</div><div class="line">            <span class="comment">// 第一个字符匹配, 第二个字符是'*', 分为3种情况</span></div><div class="line">            <span class="keyword">if</span> (i &lt; input.length &amp;&amp; (input[i] == pattern[p] || pattern[p] == <span class="string">'.'</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> matchCore(input, i, pattern, p + <span class="number">2</span>) ||</div><div class="line">                        matchCore(input, i + <span class="number">1</span>, pattern, p) ||</div><div class="line">                        matchCore(input, i + <span class="number">1</span>, pattern, p + <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 第一个字符不匹配, 第二个字符是'*', 直接略过'*'往后匹配</span></div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> matchCore(input, i, pattern, p + <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 第二个字符不是 '*', 第一个字符匹配</span></div><div class="line">        <span class="keyword">if</span> (i &lt; input.length &amp;&amp; (input[i] == pattern[p] || pattern[p] == <span class="string">'.'</span>))</div><div class="line">            <span class="keyword">return</span> matchCore(input, i + <span class="number">1</span>, pattern, p + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(52): 构建乘积数组]]></title>
      <url>https://rogerfang.github.io/2017/02/09/SwordPointToOffer-52-%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个数组 A[0,1,…,n-1]，请构建一个数组 B[0,1,…,n-1]，其中 B 中的元素 B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]，不能使用除法。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>定义 B[i] = C[i] <em> D[i]，C[i] = A[0]</em>A[1]<em>…</em>A[i-1]，D[i] = A[i+1]<em>…</em>A[n-1]。</p>
<p>C[i]采用从前到后的顺序计算而来，C[i] = C[i-1]<em>A[i-1]；D[i]采用从后往前的顺序计算出来，D[i] = A[i+1]</em>D[i+1]。</p>
<p>时间复杂度是$O(n)$。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayConstruction</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] handle(<span class="keyword">int</span>[] data)&#123;</div><div class="line">        <span class="keyword">if</span> (data== <span class="keyword">null</span> || data.length &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[data.length];</div><div class="line">        <span class="comment">// 保存C[]累乘值,累乘初始值取1</span></div><div class="line">        result[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; data.length; ++i)&#123;</div><div class="line">            result[i] = result[i-<span class="number">1</span>]*data[i-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 保存D[] 的累乘值</span></div><div class="line">        <span class="keyword">int</span> tmp = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = data.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i)&#123;</div><div class="line">            tmp *= data[i+<span class="number">1</span>];</div><div class="line">            result[i] *= tmp;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(51): 数组中重复的数字]]></title>
      <url>https://rogerfang.github.io/2017/02/09/SwordPointToOffer-51-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。</p>
<p>例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是重复的数字2或者3。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>排序，时间复杂度$O(n\log{n})$。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>借助哈希表记录数字的次数，时间复杂度$O(n)$，空间复杂度$O(n)$。</p>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>我们注意到数组中的数字都在 0 到 n-1 中。如果这个数组中没有重复的数字，那么当数组排序之后数字 i 将出现在下标为 i 的位置。由于数组中有重复的数字，有些位置可能存在多个数字，同时有些位置可能没有数字。</p>
<p>现在让我们重排这个数组，依然从头到尾一次扫描这个数组中的每个数字。当扫描到下标为 i 的数字时，首先比较这个数字（用 m 表示）是不是等于 i。如果是，接着扫描下一个数字。如果不是，再拿它和第 m 个数字进行比较。 如果它和第m个数字相等，就找到了一个重复的数字（该数字在下标为 i 和 m 的位置都出现了）。如果它和第 m 个数字不相等，就把第 i 个数字和第 m 个数字交换，把 m 放到属于它的位置。接下来再重读这个比较、交换的过程，直到我们发现一个重复的数字。</p>
<p>以数组{2,3,1,0,2,5,3}为例来分析找到重复数字的步骤。数组的第 0 个数字（从 0 开始计数，和数组的下标保持一致）是 2，与它的下标不相等，于是把它和下标为 2 的数字 1 交换。交换之后的数组是{1.3.2.0.2.5.3}。此时第 0 个数字是 1，仍然与它的下标不相等，继续把它和下标为 1 的数字 3 交换，得到数组{3,1,2,0,2,5,3}.接下来继续交换第 0 个数字 3 和第 3 个数字 0，得到数组{0,1,2,3,2,5,3}。此时第 0 个数字的数值为 0，接着扫描下一个数字。在接下来的几个数字中，下标为 1，2，3 的三个数字分别为 1，2，3 它们的下标和数值都分别相等，因此不需要做任何操作。接下来扫描到下标为 4 的数字 2。由于它的数值与它的下标不相等，再比较它和下标为 2 的数字。注意到此时数组中下标为 2 的数字也是 2，也就是数字在下标为 2 和下标为 4 的两个位置都出现了，因此找到一个重复的数字。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuplicateInArray</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        DuplicateInArray test = <span class="keyword">new</span> DuplicateInArray();</div><div class="line">        System.out.println(test.handle(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>&#125;));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] num)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (num == <span class="keyword">null</span> || num.length &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// 检测输入是否在[0, num.length-1]之间</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : num)&#123;</div><div class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= num.length)</div><div class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length; ++i)&#123;</div><div class="line">            <span class="keyword">while</span> (num[i] != i)&#123;</div><div class="line">                <span class="keyword">if</span> (num[i] == num[num[i]])&#123;</div><div class="line">                    <span class="keyword">return</span> num[i];</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    swap(num, i, num[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp = num[i];</div><div class="line">        num[i] = num[j];</div><div class="line">        num[j] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(49): 把字符串转换成整数]]></title>
      <url>https://rogerfang.github.io/2017/02/09/SwordPointToOffer-49-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>将一个字符串转换成一个整数，要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这个题目需要考虑边界条件，非法输入等，当出现非法输入时返回 0，同时还应该设置全局变量<code>isValid</code>这样可以和输入正确的字符串 “0”区分开。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrToInt</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isValid = <span class="keyword">true</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span>) &#123;</div><div class="line">            isValid = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">char</span> first = str.charAt(<span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (first == <span class="string">'-'</span>)&#123;</div><div class="line">            <span class="keyword">return</span> parse(str, <span class="number">1</span>, <span class="keyword">false</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (first == <span class="string">'+'</span>)&#123;</div><div class="line">            <span class="keyword">return</span> parse(str, <span class="number">1</span>, <span class="keyword">true</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (isDigit(first))&#123;</div><div class="line">            <span class="keyword">return</span> parse(str, <span class="number">0</span>, <span class="keyword">true</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            isValid = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">parse</span><span class="params">(String str, <span class="keyword">int</span> index, <span class="keyword">boolean</span> positive)</span></span>&#123;</div><div class="line">        <span class="keyword">long</span> tmp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (index &lt; str.length())&#123;</div><div class="line">            <span class="keyword">if</span> (isDigit(str.charAt(index)))&#123;</div><div class="line">                tmp = tmp * <span class="number">10</span> + str.charAt(index) - <span class="string">'0'</span>;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span> ((positive &amp;&amp; tmp &gt; <span class="number">0x7fffffff</span>) || (!positive &amp;&amp; tmp &lt; <span class="number">0x80000000</span>))</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException(<span class="string">"超过int最大值"</span>);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                isValid = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (positive)&#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) tmp;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) -tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> c &gt;= <span class="string">'0'</span> &amp;&amp; c &lt;= <span class="string">'9'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(47): 不用加减乘除做加法]]></title>
      <url>https://rogerfang.github.io/2017/02/09/SwordPointToOffer-47-%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>写一个函数，求两个整数之和，要求在函数体内不得使用 加减乘除 四则运算符号。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>不能用四则运算，还有位运算。</p>
<p>比如： <code>5 + 17 = 22</code><br>5 的二进制是<code>101</code>，17 的二进制是<code>10001</code>。把计算分成三步：</p>
<ol>
<li>二进制各位相加但不进位，得到结果是<code>10100</code>（最后一位两个都是1，相加结果不计进位）。</li>
<li>记下进位，上一步产生的进位是由最后两个1相加得到的<code>10</code>。</li>
<li>将前两步相加（仍重复前两步），得到结果<code>10110</code>，也就是22。</li>
</ol>
<p>关键：</p>
<ol>
<li>异或运算，相加不进位</li>
<li>与运算，然后再左移一位，只有1和1相加进位</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddTwoNumber</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(add(<span class="number">13</span>, <span class="number">20</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            sum = num1 ^ num2;</div><div class="line">            carry = (num1 &amp; num2) &lt;&lt; <span class="number">1</span>;</div><div class="line">            num1 = sum;</div><div class="line">            num2 = carry;</div><div class="line">        &#125;<span class="keyword">while</span> (carry != <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(45): 圆圈中最后剩下的数字]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-45-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>0,1,…,n-1折n个数字排成一个圆圈，从数字0开始每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote>
<p>环形链表模拟圆圈的经典解法。</p>
</blockquote>
<p>创建一个总共有 n 个结点的环形链表，然后每次在这个链表中删除第 m 个结点。<br>时间复杂度$O(nm)$，空间复杂度$O(n)$。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote>
<p>分析每次被删除的数字的规律并直接计算出圆圈中最后剩下的数字。</p>
</blockquote>
<p>$$ f(n,m)= \begin{cases} 0, &amp; \text {n=1} \\ (f(n-1,m)+m)\%n, &amp; \text{n&gt;1} \end{cases} $$</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LastRemaining</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span> || m &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"></div><div class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</div><div class="line">            list.add(i);</div><div class="line">        <span class="comment">// 要删除的元素id</span></div><div class="line">        <span class="keyword">int</span> idx = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (list.size() &gt; <span class="number">1</span>)&#123;</div><div class="line">            idx = (idx + m - <span class="number">1</span>)%list.size();</div><div class="line">            list.remove(idx);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span> || m &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> last = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;=n ; i++) &#123;</div><div class="line">            last = (last + m)%i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(44): 扑克牌的顺子]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-44-%E6%89%91%E5%85%8B%E7%89%8C%E7%9A%84%E9%A1%BA%E5%AD%90/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2~10位数字本身，A为1，J为11，Q为12，K为13，大小王看成任意数字（百搭牌）。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们可以把 5 张牌看成由 5 个数字组成的数组。大、小王是特殊的数字，我们不妨把它们都定义为 0，这样就能和其他扑克牌区分开来了。</p>
<p>接下来我们分析怎样判断 5 个数字是不是连续的，最直观的方法是把数组排序。值得注意的是，由于 0 可以当成任意数字，我们可以用 0 去补满数组中的空缺。如果排序之后的数组不是连续的，即相邻的两个数字相隔若干个数字，但只要我们有足够的。可以补满这两个数字的空缺，这个数组实际上还是连续的。举个例子，数组排序之后为{0，1，3，4，5}在 1 和 3 之间空缺了一个 2，刚好我们有一个 0，也就是我们可以把它当成 2 去填补这个空缺。</p>
<p>于是我们需要做 3 件事情：</p>
<ol>
<li>首先把数组排序</li>
<li>再统计数组中 0 的个数</li>
<li>最后统计排序之后的数组中相邻数字之间的空缺总数。<br>如果空缺的总数小于或者等于 0 的个数，那么这个数组就是连续的：反之则不连续。</li>
</ol>
<p>我们还需要注意一点： 如果数组中的非 0 数字重复出现，则该数组不是连续的。换成扑克牌的描述方式就是如果一副牌里含有对子，则不可能是顺子。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinuousCards</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Arrays.sort(data);</div><div class="line">        <span class="keyword">int</span> numOfZero = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> numOfGap = <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="comment">// 统计0的个数</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: data)&#123;</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>)</div><div class="line">                numOfZero++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 统计数组中的间隔数目，对0之后的数字 互相做减法</span></div><div class="line">        <span class="keyword">int</span> small = numOfZero;</div><div class="line">        <span class="keyword">int</span> big = small + <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (big &lt; data.length)&#123;</div><div class="line">            <span class="comment">// 两个数相等，有对子</span></div><div class="line">            <span class="keyword">if</span> (data[small] == data[big])</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            numOfGap += data[big] - data[small] - <span class="number">1</span>;</div><div class="line">            small = big;</div><div class="line">            ++big;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> numOfGap &lt;= numOfZero;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(43): n个骰子的点数]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-43-n%E4%B8%AA%E9%AA%B0%E5%AD%90%E7%9A%84%E7%82%B9%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>把n个骰子仍在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值的概率。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote>
<p>基于<strong>递归</strong>求解，时间效率不够高，有很多重复的计算。</p>
</blockquote>
<p>先把 n 个骰子分为两堆：第一堆只有一个，另一个有 n-1 个。单独的那一个有可能出现从 1 到 6 的点数。我们需要计算从 1 到 6 的每一种点数和剩下的 n-1 个骰子来计算点数和。接下来把剩下的 n-1 个骰子还是分成两堆，第一堆只有一个， 第二堆有 n-2 个。我们把上一轮那个单独骰子的点数和这一轮单独骰子的点数相加， 再和剩下的 n-2 个骰子来计算点数和。分析到这里，我们不难发现这是一种递归的思路，递归结束的条件就是最后只剩下一个骰子。</p>
<p>我们可以定义一个长度为<code>6n-n+1</code>的数组， 和为 s 的点数出现的次数保存到数组第<code>s-n</code>个元素里。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote>
<p>基于循环求解，时间性能好。</p>
</blockquote>
<p>我们可以考虑用两个数组来存储骰子点数的每一个总数出现的次数。在一次循环中， 第一个数组中的第 n 个数字表示骰子和为 n 出现的次数。在下一循环中，我们加上一个新的骰子，此时和为 n 的骰子出现的次数应该等于上一次循环中骰子点数和为 n-1 、n-2 、n-3 、n-4, n-5 与 n-6 的次数的总和，所以我们把另一个数组的第 n 个数字设为前一个数组对应的第 n-1 、n-2 、n-3 、n-4、n-5 与 n-6 之和。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><figcaption><span>方法一</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 递归实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintProbRecusive</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        PrintProbRecusive test = <span class="keyword">new</span> PrintProbRecusive();</div><div class="line">        test.handle(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 骰子最大的点数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_VAL = <span class="number">6</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> maxSum = n * MAX_VAL;</div><div class="line">        <span class="keyword">int</span> total = (<span class="keyword">int</span>) Math.pow(MAX_VAL, n);</div><div class="line">        <span class="keyword">int</span>[] countArray = <span class="keyword">new</span> <span class="keyword">int</span>[maxSum - n + <span class="number">1</span>];</div><div class="line"></div><div class="line">        getProbs(n, countArray);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt;= maxSum; ++i)&#123;</div><div class="line">            System.out.printf(<span class="string">"%d: %e\n"</span>, i, (<span class="keyword">double</span>)countArray[i-n]/total);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getProbs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[] countArray)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAX_VAL; ++i)&#123;</div><div class="line">            getProbs(n, n, i, countArray);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getProbs</span><span class="params">(<span class="keyword">int</span> originalN, <span class="keyword">int</span> currentN, <span class="keyword">int</span> sum, <span class="keyword">int</span>[] countArray)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (currentN == <span class="number">1</span>)&#123;</div><div class="line">            countArray[sum - originalN]++;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAX_VAL; ++i)&#123;</div><div class="line">                getProbs(originalN, currentN-<span class="number">1</span>, sum+i, countArray);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>方法二</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 循环实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintProbCycle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        PrintProbCycle test = <span class="keyword">new</span> PrintProbCycle();</div><div class="line">        test.handle(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 骰子最大的点数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_VAL = <span class="number">6</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="comment">// 第0位没有用</span></div><div class="line">        <span class="keyword">int</span>[][] probs = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][MAX_VAL * n + <span class="number">1</span>];</div><div class="line">        <span class="comment">// for (int i = 0)</span></div><div class="line">        <span class="comment">// 标记当前要使用的是第0个还是第1个数组</span></div><div class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 抛出一个骰子时的情况</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAX_VAL; ++i)&#123;</div><div class="line">            probs[flag][i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 抛出其他骰子</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= n; ++k)&#123;</div><div class="line">            <span class="comment">// 如果抛出了k个骰子，那么和为[0,k)的出现次数为0</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)&#123;</div><div class="line">                probs[<span class="number">1</span>-flag][i] = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 抛出k个骰子，所有和的可能</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= k*MAX_VAL; ++i)&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i &amp;&amp; j &lt;= MAX_VAL; ++j)&#123;</div><div class="line">                    <span class="comment">// 统计出现和为i的次数</span></div><div class="line">                    probs[<span class="number">1</span>-flag][i] += probs[flag][i-j];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            flag = <span class="number">1</span> - flag;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> total = Math.pow(MAX_VAL, n);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt;= MAX_VAL*n; ++i)&#123;</div><div class="line">            System.out.printf(<span class="string">"%d: %e\n"</span>, n, (<span class="keyword">double</span>)probs[flag][i]/total);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(42): 翻转单词顺序 VS 左旋转字符串(补充)]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-42-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F-VS-%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>字符串的左旋转操作时把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。</p>
<p>例如输入字符串“abcdefg”和数字2，该函数将返回左旋转2位得到的结果“cdefgab”。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>以”abcdefg”为例，我们可以把它分为两部分。由于想把它的前两个字符移到后面，我们就把前两个字符分到第一部分，把后面的所有字符都分到第二部分。我们先分别翻转这两部分，于是就得到”bagfedc”。接下来我们再翻转整个字符串， 得到的”cde 也 ab”刚好就是把原始字符串左旋转 2 位的结果。</p>
<p>只需要调用前面的翻转函数3次即可。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeftRotateString</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(String str, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt; n)</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line"></div><div class="line">        <span class="keyword">char</span>[] data = str.toCharArray();</div><div class="line">        reverse(data, <span class="number">0</span>, n - <span class="number">1</span>);</div><div class="line">        reverse(data, n, data.length - <span class="number">1</span>);</div><div class="line">        reverse(data, <span class="number">0</span>, data.length - <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || start &gt;= end)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</div><div class="line">            <span class="keyword">char</span> tmp = data[start];</div><div class="line">            data[start] = data[end];</div><div class="line">            data[end] = tmp;</div><div class="line"></div><div class="line">            ++start;</div><div class="line">            --end;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(42): 翻转单词顺序 VS 左旋转字符串]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-42-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F-VS-%E5%B7%A6%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。</p>
<p>例如输入字符串“I am a student.”，则输出“student. a am I”。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过两次翻转实现。</p>
<p>第一步翻转句子中所有的字符。比如翻转“I am a student. ”中所有的字符得到”.tneduts a m a I”，此时不但翻转了句子中单词的顺序，连单词内的字符顺序也被翻转了。第二步再翻转每个单词中字符的顺序，就得到了”student. a am I”。这正是符合题目要求的输出。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseWordsInSentence</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">char</span>[] data = str.toCharArray();</div><div class="line">        <span class="comment">// 翻转整个句子</span></div><div class="line">        reverse(data, <span class="number">0</span>, data.length-<span class="number">1</span>);</div><div class="line">        <span class="comment">// 翻转句子中的每个单词</span></div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (start &lt; data.length)&#123;</div><div class="line">            <span class="keyword">if</span> (data[start] == <span class="string">' '</span>)&#123;</div><div class="line">                ++start;</div><div class="line">                ++end;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (end == data.length || data[end] == <span class="string">' '</span>)&#123;</div><div class="line">                reverse(data, start, end - <span class="number">1</span>);</div><div class="line">                ++end;</div><div class="line">                start = end;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                ++end;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(data);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || start &gt;= end)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">while</span> (start &lt; end)&#123;</div><div class="line">            <span class="keyword">char</span> tmp = data[start];</div><div class="line">            data[start] = data[end];</div><div class="line">            data[end] = tmp;</div><div class="line">            </div><div class="line">            ++start;</div><div class="line">            --end;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(41): 和为s的两个数字VS和为s的连续整数序列(补充)]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-41-%E5%92%8C%E4%B8%BAs%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97VS%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%95%B4%E6%95%B0%E5%BA%8F%E5%88%97-%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个正数s，打印出所有和为s的连续正数序列（至少含有两个数）。</p>
<p>例如输入15，由于 1+2+3+4+5 = 4+5+6 = 7+8 = 15，所以输出3个连续序列。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>考虑用两个数 small 和 big 分别表示序列的最小值和最大值。首先把 small 初始化为 1，big 初始化为 2。如果从 small 到 big 的序列的和大于 s，我们可以从序列中去掉较小的值，也就是增大 small 的值。如果从 small 到 big 的序列的和小于 s，我们可以增大 big，让这个序列包含更多的数字。因为这个序列至少要有两个数字，我们一直增加 small 到(1+s)/2 为止。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContinuousSequenceWithSum</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; handle(<span class="keyword">int</span> sum)&#123;</div><div class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">3</span>)</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> small = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> big = <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> mid = (<span class="number">1</span> + sum) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> curSum = small + big;</div><div class="line">        <span class="keyword">while</span> (small &lt; mid)&#123;</div><div class="line">            <span class="keyword">if</span> (curSum == sum)&#123;</div><div class="line">                List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = small; i &lt;= big; ++i)&#123;</div><div class="line">                    list.add(i);</div><div class="line">                &#125;</div><div class="line">                result.add(list);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">while</span> (curSum &gt; sum &amp;&amp; small &lt; mid)&#123;</div><div class="line">                curSum -= small;</div><div class="line">                ++small;</div><div class="line">                <span class="keyword">if</span> (curSum == sum)&#123;</div><div class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = small; i &lt;= big; ++i)&#123;</div><div class="line">                        list.add(i);</div><div class="line">                    &#125;</div><div class="line">                    result.add(list);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            ++big;</div><div class="line">            curSum += big;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(41): 和为s的两个数字VS和为s的连续整数序列]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-41-%E5%92%8C%E4%B8%BAs%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97VS%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%95%B4%E6%95%B0%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个递增排序的数组和一个数字s，在数组中查找两个数，使得它们的和正好是s。如果有多对数字的和等于s，输出乘积最小的一对。</p>
<p>例如：输入数组 {1,2,4,7,11,15} 和数字 15，会输出4和11。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我们先在数组中选择两个数字 （比如第一个和最后一个），如果它们的和等于输入的 s，我们就找到了要找的两个数字。如果和小于 s 呢？我们希望两个数字的和再大一点。由于数组已经排好序了，我们可以考虑选择较小的数字后面的数字。因为排在后面的数字要大一些，那么两个数字的和也要大一些， 就有可能等于输入的数字 s 了。同样， 当两个数字的和大于输入的数字的时候，我们可以选择较大数字前面的数字，因为排在数组前面的数字要小一些。</p>
<p>关于乘积最小的一对，对于从两头开始夹逼，且是递增数组，如果存在多对情况，即<code>a&lt;b&lt;c&lt;d</code>且<code>a+d = b+c</code>，这是a和d的乘积就是最小的。（不等式很容易证明）</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoNumbersWithSum</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">handle</span><span class="params">(<span class="keyword">int</span> [] array, <span class="keyword">int</span> sum)</span> </span>&#123;</div><div class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(array == <span class="keyword">null</span> || array.length &lt;= <span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> list;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> j = array.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span>(i &lt; j)&#123;</div><div class="line">            <span class="keyword">int</span> tmpSum = array[i] + array[j];</div><div class="line">            <span class="keyword">if</span>(tmpSum == sum)&#123;</div><div class="line">                list.add(array[i]);</div><div class="line">                list.add(array[j]);</div><div class="line">                <span class="keyword">return</span> list;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tmpSum &lt; sum)&#123;</div><div class="line">                ++i;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                --j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(40): 数组中只出现一次的数字]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-40-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字，要求时间复杂度是$O(n)$，空间复杂度是$O(1)$。</p>
<p>例如：输入数组 {2,4,3,6,3,2,5,5}，会输出4和6。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这两个题目都在强调一个（或两个）数字只出现一次，其他的出现两次。这有什么意义呢？我们想到<strong>异或运算</strong>的一个性质：任何一个数字异或它自己都等于 0。也就是说， 如果我们从头到尾依次异或数组中的每一个数字，那么最终的结果刚好是那个只出现一次的数字，因为那些成对出现两次的数字全部在异或中抵消了。</p>
<p>想明白怎么解决这个简单问题之后，我们再回到原始的问题，看看能不能运用相同的思路。我们试着把原数组分成两个子数组，使得每个子数组包含一个只出现一次的数字，而其他数字都成对出现两次。如果能够这样拆分成两个数组， 我们就可以按照前面的办法分别找出两个只出现一次的数字了。</p>
<p>我们还是从头到尾依次异或数组中的每一个数字，那么最终得到的结果就是两个只出现一次的数字的异或结果。因为其他数字都出现了两次，在异或中全部抵消了。由于这两个数字肯定不一样，那么异或的结果肯定不为 0，也就是说在这个结果数字的二进制表示中至少就有一位为 1 。我们在结果数字中找到第一个为 1 的位的位置，记为第 n 位。现在<strong>我们以第 n 位是不是 １ 为标准把原数组中的数字分成两个子数组，第一个子数组中每个数字的第 n 位都是 1，而第二个子数组中每个数字的第 n 位都是 0。</strong>由于我们分组的标准是数字中的某一位是 1 还是 0 ， 那么出现了两次的数字肯定被分配到同一个子数组。因为两个相同的数字的任意一位都是相同的，我们不可能把两个相同的数字分配到两个子数组中去，<strong>于是我们已经把原数组分成了两个子数组，每个子数组都包含一个只出现一次的数字</strong>，而其他数字都出现了两次。我们已经知道如何在数组中找出唯一一个只出现一次数字， 因此到此为止所有的问题都已经解决了。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumbersAppearOnce</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] data1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] data2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</div><div class="line"></div><div class="line">        NumbersAppearOnce test = <span class="keyword">new</span> NumbersAppearOnce();</div><div class="line">        test.handle(data2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> resultExclusiveOR = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : data)</div><div class="line">            resultExclusiveOR ^= i;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> indexBitOf1 = findFirstBitIs1(resultExclusiveOR);</div><div class="line">        <span class="comment">// array中不存在两个只出现一次的数或者只存在一个只出现一次的数字0</span></div><div class="line">        <span class="keyword">if</span> (indexBitOf1 &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"There is not two num in array difference!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> n1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> n2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : data) &#123;</div><div class="line">            <span class="keyword">if</span> (isBit1(i, indexBitOf1)) &#123;</div><div class="line">                n1 ^= i;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                n2 ^= i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 例如数组中只有一个数字出现一次，且这个数字是非0的。比如&#123;3, 2, 1, 2, 1&#125;，会输出3,0</span></div><div class="line">        <span class="keyword">if</span> (!checkResult(data, n1, n2))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"There is not two num in array difference!"</span>);</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"n1="</span> + n1);</div><div class="line">        System.out.println(<span class="string">"n2="</span> + n2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在整数二进制表示中找到最右边是1的位</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> num</div><div class="line">     * <span class="doctag">@return</span> -1 表示没有bit=1</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findFirstBitIs1</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> indexBit = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> ((num &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; (indexBit &lt; Integer.SIZE)) &#123;</div><div class="line">            num = num &gt;&gt; <span class="number">1</span>;</div><div class="line">            ++indexBit;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((num &amp; <span class="number">1</span>) == <span class="number">0</span>)</div><div class="line">            indexBit = -<span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> indexBit;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断num的二进制表示中从右边数起的indexBit位是不是1</div><div class="line">     * <span class="doctag">@param</span> num</div><div class="line">     * <span class="doctag">@param</span> indexBit</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isBit1</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> indexBit)</span> </span>&#123;</div><div class="line">        num = num &gt;&gt; indexBit;</div><div class="line">        <span class="keyword">return</span> (num &amp; <span class="number">1</span>) == <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkResult</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> b1 = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span> b2 = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: data)&#123;</div><div class="line">            <span class="keyword">if</span> (i == n1)</div><div class="line">                b1 = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">if</span> (i == n2)</div><div class="line">                b2 = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> b1 &amp;&amp; b2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(39): 二叉树的深度(补充)]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-39-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6-%E8%A1%A5%E5%85%85/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>前一篇涉及到如何求二叉树的深度，借用这个可以递归实现平衡判断。</p>
<p>该方法不足之处在于需要重复遍历节点多次。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>用后序遍历的方式遍历二叉树的每一个节点，在遍历到一个节点之前我们就已经遍历了它的左右子树。只要在遍历每个节点的时候记录它的深度（某一节点的深度等于它到叶节点的路径的长度），我们就可以一边遍历一边判断每个节点是不是平衡的。</p>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>在后序遍历求二叉树深度的同时，设置一个全局变量，自底向上判断二叉树是否平衡。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><figcaption><span>方法一</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> isBalanced = <span class="keyword">true</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsBalanced_Solution</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = getDepth(root.left);</div><div class="line">        <span class="keyword">int</span> right = getDepth(root.right);</div><div class="line">        <span class="keyword">int</span> diff = left - right;</div><div class="line">        <span class="keyword">if</span>(diff &gt; <span class="number">1</span> || diff &lt; -<span class="number">1</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> IsBalanced_Solution(root.left) &amp;&amp; IsBalanced_Solution(root.right);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = getDepth(root.left);</div><div class="line">        <span class="keyword">int</span> right = getDepth(root.right);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> (left &gt; right)?left+<span class="number">1</span>:right+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>方法三</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> isBalanced = <span class="keyword">true</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">IsBalanced_Solution</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        getDepth(root);</div><div class="line">        <span class="keyword">return</span> isBalanced;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> left = getDepth(root.left);</div><div class="line">        <span class="keyword">int</span> right = getDepth(root.right);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> diff = left - right;</div><div class="line">        <span class="keyword">if</span>(diff &gt; <span class="number">1</span> || diff &lt; -<span class="number">1</span>)</div><div class="line">            isBalanced = <span class="keyword">false</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> (left &gt; right)?left+<span class="number">1</span>:right+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(39): 二叉树的深度]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-39-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成一条路径，最长路径的长度为树的深度。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>递归的思想，取左子树和右子树最大的深度加1即为根的深度。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeDepth1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">        TreeNode left = <span class="keyword">null</span>;</div><div class="line">        TreeNode right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(TreeNode root)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> left = handle(root.left);</div><div class="line">        <span class="keyword">int</span> right = handle(root.right);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> (left &gt; right)?left+<span class="number">1</span>:right+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(38): 数字在排序数组中出现的次数]]></title>
      <url>https://rogerfang.github.io/2017/02/07/SwordPointToOffer-38-%E6%95%B0%E5%AD%97%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>统计一个数字在排序数组中出现的次数。例如输入排序数组 {1,2,3,3,3,3,4,5}和数字3，由于3在这个数组出现了4次，因此输出4。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>对排序的数组使用二分查找，主要为了确定目标数字k的第一个位置和最后一个位置。<br>在一次查找过程中，存在3种情况：</p>
<ol>
<li>如果中间数字比k小，则在数组的后半段进行查找；</li>
<li>如果中间数字比k大，则在数组的前半段进行查找；</li>
<li>如果中间数字和k相等，则需要判断这个数字是不是第一个k或者是不是最后一个k。</li>
</ol>
<p>时间复杂度是$O(\log{n})$。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberOfKInOrderArray</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> first = getFirstK(data, k, <span class="number">0</span>, data.length - <span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> last = getLastK(data, k, <span class="number">0</span>, data.length - <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (first &gt; -<span class="number">1</span> &amp;&amp; last &gt; -<span class="number">1</span>) &#123;</div><div class="line">            num = last - first + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getFirstK</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> k, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt; end)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> mid = (start + end) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (data[mid] == k) &#123;</div><div class="line">            <span class="keyword">if</span> ((mid &gt; <span class="number">0</span> &amp;&amp; data[mid - <span class="number">1</span>] != k) || mid == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                end = mid - <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data[mid] &lt; k) &#123;</div><div class="line">            start = mid + <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            end = mid - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> getFirstK(data, k, start, end);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getLastK</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> k, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt; end)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> mid = (start + end) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (data[mid] == k) &#123;</div><div class="line">            <span class="keyword">if</span> ((mid &lt; data.length - <span class="number">1</span> &amp;&amp; data[mid + <span class="number">1</span>] != k) || mid == data.length - <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> mid;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                start = mid + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data[mid] &lt; k) &#123;</div><div class="line">            start = mid + <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            end = mid - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> getLastK(data, k, start, end);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(37): 两个链表的第一个公共节点]]></title>
      <url>https://rogerfang.github.io/2017/02/06/SwordPointToOffer-37-%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入两个链表，找出它们的第一个公共节点。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>蛮力法：在第一个链表上顺序遍历每个节点，每遍历到一个节点的时候，在第二个链表上顺序遍历每个节点。如果在第二个链表上有一个节点和第一个链表上的节点一样，说明两个链表在这个节点上重合。</p>
<p>时间复杂度是$O(mn)$，m和n分别为两个链表的长度。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>两个单链表有公共节点时，呈 Y 字型。<br>借助两个辅助栈，从链表的尾部开始比较，最后一个相同的节点就是要找的节点。<br>时间复杂度是$O(m + n)$，空间复杂度是$O(m + n)$。</p>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>不借助辅助栈，时间复杂度也是$O(m + n)$。</p>
<p>首先遍历两个链表得到各自的长度m和n，然后长一点的链表先遍历(m-n)步，然后两个链表同时继续遍历并比较节点是否相等。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><figcaption><span>方法三</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindFirstCommonNode</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        ListNode next = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ListNode(<span class="keyword">int</span> val) &#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">handle</span><span class="params">(ListNode head1, ListNode head2)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (head1 == <span class="keyword">null</span> || head2 == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input!"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> length1 = getListLength(head1);</div><div class="line">        <span class="keyword">int</span> length2 = getListLength(head2);</div><div class="line">        </div><div class="line">        ListNode nodeOfLong = head1;</div><div class="line">        ListNode nodeOfShort = head2;</div><div class="line">        <span class="keyword">int</span> lengthDiff = length1 - length2;</div><div class="line">        <span class="keyword">if</span> (length1 &lt; length2)&#123;</div><div class="line">            nodeOfLong = head2;</div><div class="line">            nodeOfShort = head1;</div><div class="line">            lengthDiff = length2 - length1;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lengthDiff; i++)&#123;</div><div class="line">            nodeOfLong = nodeOfLong.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (nodeOfLong != <span class="keyword">null</span> &amp;&amp; nodeOfShort != <span class="keyword">null</span> &amp;&amp; nodeOfLong != nodeOfShort)&#123;</div><div class="line">            nodeOfLong = nodeOfLong.next;</div><div class="line">            nodeOfShort = nodeOfShort.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nodeOfLong;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getListLength</span><span class="params">(ListNode head)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        ListNode node = head;</div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            count++;</div><div class="line">            node = node.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(36): 数组中的逆序对]]></title>
      <url>https://rogerfang.github.io/2017/02/06/SwordPointToOffer-36-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在数组中的两个数字如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>从头到尾扫描数组，没扫描到一个数字，就逐个比较该数字和后面的数字的大小，时间复杂度是 $O(n^2)$。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>先把数组分隔成子数组， 先统计出子数组内部的逆序对的数目，然后再统计出两个相邻子数组之间的逆序对的数目。在统计逆序对的过程中，还需要对数组进行排序。这个排序的过程实际上就是<strong>归并排序</strong>。</p>
<blockquote>
<p>该方法会改变原数组，在data和copy之间交替作为辅助数组。</p>
</blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InversePairs</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        InversePairs test = <span class="keyword">new</span> InversePairs();</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line">        System.out.println(test.handle(data));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length &lt; <span class="number">2</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input!"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>[] copy = <span class="keyword">new</span> <span class="keyword">int</span>[data.length];</div><div class="line">        System.arraycopy(data, <span class="number">0</span>, copy, <span class="number">0</span>, data.length);</div><div class="line">        <span class="keyword">return</span> doHandle(data, copy, <span class="number">0</span>, data.length - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doHandle</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span>[] copy, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (start == end)&#123;</div><div class="line">            copy[start] = data[start];</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> mid = (end + start) &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> left = doHandle(copy, data, start, mid);</div><div class="line">        <span class="keyword">int</span> right = doHandle(copy, data, mid + <span class="number">1</span>, end);</div><div class="line">        </div><div class="line">        <span class="comment">// 初始化前半段最后一个数字的下标</span></div><div class="line">        <span class="keyword">int</span> i = mid;</div><div class="line">        <span class="comment">// 初始化后半段最后一个数字的下标</span></div><div class="line">        <span class="keyword">int</span> j = end;</div><div class="line">        <span class="keyword">int</span> indexOfCopy = end;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (i &gt;= start &amp;&amp; j &gt;= mid + <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (data[i] &gt; data[j])&#123;</div><div class="line">                copy[indexOfCopy--] = data[i--];</div><div class="line">                </div><div class="line">                count += j - mid;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                copy[indexOfCopy--] = data[j--];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (; i &gt;= start; --i)&#123;</div><div class="line">            copy[indexOfCopy--] = data[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(; j &gt;= mid + <span class="number">1</span>; --j)&#123;</div><div class="line">            copy[indexOfCopy--] = data[j];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> left + right + count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(35): 第一个只出现一次的字符]]></title>
      <url>https://rogerfang.github.io/2017/02/06/SwordPointToOffer-35-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在字符串中找出第一个只出现一次的字符。如输入“abaccdeff”，则输出“b”。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>字符是长度为8的数据类型，一共有256种可能，可以用一个数组模拟哈希表记录统计的次数。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstNotRepeatingChar</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</div><div class="line">        <span class="keyword">int</span>[] hashTable = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c: chars)&#123;</div><div class="line">            hashTable[c]++;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (hashTable[chars[i]] == <span class="number">1</span>)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(34): 丑数]]></title>
      <url>https://rogerfang.github.io/2017/02/06/SwordPointToOffer-34-%E4%B8%91%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>我们把只包含因子2、3和5的数称作丑数。求按从小到大的顺序的第1500个丑数。例如6、8都是丑数，但14不是，习惯上把1称为第一个丑数。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>逐个判断每个整数是不是丑数，直观但不够高效。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</div><div class="line">	<span class="keyword">while</span>(num%<span class="number">2</span> == <span class="number">0</span>)</div><div class="line">    	num /= <span class="number">2</span>;</div><div class="line">	<span class="keyword">while</span>(num%<span class="number">3</span> == <span class="number">0</span>)</div><div class="line">    	num /= <span class="number">3</span>;</div><div class="line">	<span class="keyword">while</span>(num%<span class="number">5</span> == <span class="number">0</span>)</div><div class="line">    	num /= <span class="number">5</span>;</div><div class="line">	<span class="keyword">return</span> num == <span class="number">1</span>?<span class="keyword">true</span>:<span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>保存已经找到丑数，用空间换时间的解法。</p>
<p>根据丑数的定义， 丑数应该是另一个丑数乘以 2、3 或者 5 的结果（1 除外）。因此我们可以创建一个数组，里面的数字是排好序的丑数，每一个丑数都是前面的丑数乘以 2、3 或者 5 得到的。</p>
<p>把已有的每个丑数分别都乘以 2、3 和 5，事实上这不是必须的。因为已有的丑数是按顺序存放在数组中的。对乘以 2 而言， 肯定存在某一个丑数 T2，排在它之前的每一个丑数乘以 2 得到的结果都会小于已有最大的丑数，在它之后的每一个丑数乘以 2 得到的结果都会太大。我们只需<strong>记下这个丑数的位置</strong>， 同时每次生成新的丑数的时候，去更新这个 T2。对乘以 3 和 5 而言， 也存在着同样的 T3 和 T5。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><figcaption><span>方法二</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UglyNumber</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        list.add(<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> t2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> t3 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> t5 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (list.size() &lt; index)&#123;</div><div class="line">            <span class="keyword">int</span> m2 = list.get(t2) * <span class="number">2</span>;</div><div class="line">            <span class="keyword">int</span> m3 = list.get(t3) * <span class="number">3</span>;</div><div class="line">            <span class="keyword">int</span> m5 = list.get(t5) * <span class="number">5</span>;</div><div class="line">            <span class="keyword">int</span> min  = min(m2, m3, m5);</div><div class="line">            list.add(min);</div><div class="line">            <span class="keyword">if</span> (m2 == min) t2++;</div><div class="line">            <span class="keyword">if</span> (m3 == min) t3++;</div><div class="line">            <span class="keyword">if</span> (m5 == min) t5++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list.get(index - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> m2, <span class="keyword">int</span> m3, <span class="keyword">int</span> m5)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> Math.min(m2, Math.min(m3, m5));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(33): 把数组排成最小的数]]></title>
      <url>https://rogerfang.github.io/2017/02/06/SwordPointToOffer-33-%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个正整数数组，把数组里所有数字都拼接起来排成一个数，打印能拼接处的所有数字中最小的一个。例如输入数组{3,32,321}，则打印出能排成的最小数字321323。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>求出所有数字的全排列，然后拼接起来，最后求出最大值。n个数字总共有 $n!$个排列。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>找到一个排序规则，数组根据这个规则排序之后能排成一个最小的数字。要确定排序规则，就要比较两个数字，也就是给出两个数字 m 和 n，我们需要确定一个规则判断 m 和 n 哪个应该排在前面，而不是仅仅比较这两个数字的值哪个更大。</p>
<p>两个数a和b，排序规则如下：</p>
<ul>
<li>若ab &gt; ba 则 a &gt; b，</li>
<li>若ab &lt; ba 则 a &lt; b，</li>
<li>若ab = ba 则 a = b；</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortArrayForMinNumber</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        String[] strings = <span class="keyword">new</span> String[data.length];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; ++i)&#123;</div><div class="line">            <span class="keyword">if</span> (data[i] &lt;= <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input!"</span>);</div><div class="line">            strings[i] = String.valueOf(data[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Arrays.sort(strings, <span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</div><div class="line">                String s1 = o1 + o2;</div><div class="line">                String s2 = o2 + o1;</div><div class="line">                <span class="keyword">return</span> s1.compareTo(s2);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">for</span> (String s: strings)&#123;</div><div class="line">            sb.append(s);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(32): 从1到n整数中1出现的次数]]></title>
      <url>https://rogerfang.github.io/2017/02/06/SwordPointToOffer-32-%E4%BB%8E1%E5%88%B0n%E6%95%B4%E6%95%B0%E4%B8%AD1%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>#题目<br>输入一个整数n，求从1到n这n个整数的十进制表示中1出现的次数。例如输入12，从1到12这些整数中国包含1的数字有1,10,11和12，1一共出现了5次。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>如果直接累加1到n中每个整数出现1的次数，采用做除法和求余运算以求出该数字中1出现的次数。如果输入数字n，n有$O(\log{n})$位，因此该算法的时间复杂度是$O(n\log{n})$。运算效率不高。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>从数字规律着手明显提高时间效率的解法</strong>。</p>
<p><strong>数字的规律</strong>：<br>从右往左，给每位标号1,2,3…，当统计x的次数时，需要分两种情况讨论：$x\in[1,9]$和 $x=0$。</p>
<h3 id="x-in-1-9-情况"><a href="#x-in-1-9-情况" class="headerlink" title="$x\in[1,9]$情况"></a>$x\in[1,9]$情况</h3><p>第<code>i</code>位上的数字记为<code>t</code>时，高位记为<code>a</code>，低位记为<code>b</code>，因此一个整数可以记为<code>atb</code>形式。<br>分下面三种情况：</p>
<ol>
<li>当<code>t &lt; x</code>时，高位可取<code>[0, a-1]</code>，第i位的计数为 $a\times10^{i-1}$。</li>
<li>当<code>t = x</code>时，高位可取<code>[0, a]</code>，此时还受低位的影响，第i位的计数为 $a\times10^{i-1} + (b+1)$。</li>
<li>当<code>t &gt; x</code>时，高位可取<code>[0, a]</code>，此时不受低位的影响，第i位的计数为 $(a+1)\times10^{i-1}$。</li>
</ol>
<h3 id="x-0-情况"><a href="#x-0-情况" class="headerlink" title="$x=0$情况"></a>$x=0$情况</h3><p>第<code>i</code>位上的数字记为<code>t</code>时，高位记为<code>a</code>，低位记为<code>b</code>，因此一个整数可以记为<code>atb</code>形式。<br>分下面两种种情况：</p>
<ol>
<li>当<code>t = 0</code>时，高位可取<code>[1, a]</code>，此时还受低位的影响，第i位的计数为 $(a-1)\times10^{i-1} + (b+1)$。</li>
<li>当<code>t &gt; 0</code>时，高位可取<code>[1, a]</code>，此时不受低位的影响，第i位的计数为 $a\times10^{i-1}$。</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 求出1到n整数中出现x(1&lt;=x&lt;=9)的次数</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberOfX</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(handle(<span class="number">13</span>, <span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (num &lt; <span class="number">1</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> high = num;</div><div class="line">        <span class="keyword">int</span> low, cur, tmp;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (high != <span class="number">0</span>) &#123;</div><div class="line">            high = num / (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i);</div><div class="line">            tmp = num % (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i);</div><div class="line">            cur = tmp / (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i - <span class="number">1</span>);</div><div class="line">            low = tmp % (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i - <span class="number">1</span>);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (cur == x) &#123;</div><div class="line">                sum += high * (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i - <span class="number">1</span>) + low + <span class="number">1</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur &lt; x) &#123;</div><div class="line">                sum += high * (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i - <span class="number">1</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                sum += (high + <span class="number">1</span>) * (<span class="keyword">int</span>) Math.pow(<span class="number">10</span>, i - <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            ++i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(31): 连续子数组的最大和]]></title>
      <url>https://rogerfang.github.io/2017/02/06/SwordPointToOffer-31-%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个整型数组，数组里有正数也有负数。数组中一个或连续的多个正数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为O(n)。</p>
<p>例如：输入的数组为{1,-2,3,10,-4,7,2,-5}，和最大的子数组为{3,10,-4,7,2}，因此输出为该子数组的和18。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>如果使用枚举所有子数组进行求和比较，长度为n的数组由 n(n+1)/2 个子数组，因而时间复杂度是$O(n^2)$。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p><strong>举例分析数组的规律</strong></p>
<p>试着从头到尾逐个累加示例数组中的每个数字。初始化和为 0。第一步加上第一个数字 1， 此时和为 1。接下来第二步加上数字 -2，和就变成了 -1。第三步刷上数字3。我们注意到由于此前累计的和是 －1 ，小于 0，那如果用-1 加上 3 ，得到的和是 2 ， 比 3 本身还小。也就是说从第一个数字开始的子数组的和会小于从第三个数字开始的子数组的和。因此我们不用考虑从第一个数字开始的子数组，之前累计的和也被抛弃。</p>
<p>从第三个数字重新开始累加，此时得到的和是 3。接下来第四步加 10，得到和为 13 。第五步加上 -4， 和为 9。我们发现由于 -4 是一个负数，因此累加 -4 之后得到的和比原来的和还要小。因此我们要把之前得到的和 13 保存下来，它有可能是最大的子数组的和。第六步加上数字 7，9 加 7 的结果是 16，此时和比之前最大的和 13 还要大， 把最大的子数组的和由 13 更新为 16。第七步加上 2，累加得到的和为 18，同时我们也要更新最大子数组的和。第八步加上最后一个数字 -5，由于得到的和为 13 ，小于此前最大的和 18，因此最终最大的子数组的和为 18 ，对应的子数组是｛3, 10, -4, 7, 2｝。</p>
<table>
<thead>
<tr>
<th>步骤</th>
<th>操作</th>
<th>累加的子数组和</th>
<th>最大的子数组和</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>加1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>加-2</td>
<td>-1</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>抛弃前面的和-1，加3</td>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>加10</td>
<td>13</td>
<td>13</td>
</tr>
<tr>
<td>5</td>
<td>加-4</td>
<td>9</td>
<td>13</td>
</tr>
<tr>
<td>6</td>
<td>加7</td>
<td>16</td>
<td>16</td>
</tr>
<tr>
<td>7</td>
<td>加2</td>
<td>18</td>
<td>18</td>
</tr>
<tr>
<td>8</td>
<td>加-5</td>
<td>13</td>
<td>18</td>
</tr>
</tbody>
</table>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreatestSumOfSubarrays1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] data1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,-<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>,-<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,-<span class="number">5</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] data2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">5</span>,-<span class="number">2</span>,-<span class="number">1</span>,-<span class="number">6</span>,-<span class="number">9</span>&#125;;</div><div class="line">        </div><div class="line">        System.out.println(handle(data1));</div><div class="line">        System.out.println(handle(data2));</div><div class="line"></div><div class="line">        <span class="comment">// System.out.println(0x7fffffff);</span></div><div class="line">        <span class="comment">// System.out.println(0x80000000);</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input!"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> cumulativeSum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> greatestSum = <span class="number">0x80000000</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (cumulativeSum &lt;= <span class="number">0</span>)&#123;</div><div class="line">                cumulativeSum = data[i];</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                cumulativeSum += data[i];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (cumulativeSum &gt; greatestSum)&#123;</div><div class="line">                greatestSum = cumulativeSum;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> greatestSum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(30): 最小的k个数]]></title>
      <url>https://rogerfang.github.io/2017/02/06/SwordPointToOffer-30-%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入n个整数，找出其中最小的k个数。例如输入 4、5、1、6、2、7、3、8，则最小的4个数字是1、2、3、4。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote>
<p>时间复杂度最优是$O(n\log{n})$。</p>
</blockquote>
<p>最简单的方法就是对整个输入的数字进行排序，然后取出前k个数。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote>
<p>时间复杂度是$O(n)$。 和29题的方法二一样</p>
</blockquote>
<p>借助快速排序的partition函数，随机选择一个基数索引<code>pivotIndex</code>，如果<code>pivotIndex &gt; k</code>就在基数索引的左边进行查找；如果<code>pivotIndex &lt; k</code>就在基数索引的右边进行查找。</p>
<p><strong>这种方法会修改输入的数组</strong>。</p>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><blockquote>
<p>时间复杂度是$O(n\log{k})$。</p>
</blockquote>
<p>先创建一个大小为 k 的数据容器来存储最小的 k 个数字，接下来我们每次从输入的 n 个整数中读入一个数．如果容器中已有的数字少于 k 个，则直接把这次读入的整数放入容器之中：如果容器中己有k 数字了，也就是容器己满，此时我们不能再插入新的数字而只能替换已有的数字。找出这己有的 k 个数中的最大值，然后 1 在这次待插入的整数和最大值进行比较。如果待插入的值比当前己有的最大值小，则用这个数替换当前已有的最大值：如果待插入的值比当前已有的最大值还要大，那么这个数不可能是最小的k个整数之一，于是我们可以抛弃这个整数。</p>
<p>因此当容器满了之后，我们要做 3 件事情： 一是在 k 个整数中找到最大数： 二是有可能在这个容器中删除最大数： 三是有可能要插入一个新的数字。我们可以使用一个<strong>最大堆</strong>在 $O(\log{k})$时间内实现这三步操作。</p>
<p><strong>这种方法特别适合处理海量数据</strong>。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><figcaption><span>方法二</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 基于partition函数</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KLeastNumbers2</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || k &lt;= <span class="number">0</span> || data.length &lt; k)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input!"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end = data.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> index = partition(data, start, end, end);</div><div class="line">        <span class="keyword">while</span> (index != k - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (index &lt; k - <span class="number">1</span>)&#123;</div><div class="line">                start = index + <span class="number">1</span>;</div><div class="line">                index = partition(data, start, end, end);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                end = index - <span class="number">1</span>;</div><div class="line">                index = partition(data, start, end, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)&#123;</div><div class="line">            list.add(data[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> pivotIndex)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> small = start;</div><div class="line">        <span class="keyword">int</span> large = end;</div><div class="line">        <span class="keyword">int</span> pivot = data[pivotIndex];</div><div class="line">        swap(data, end, pivotIndex);</div><div class="line">        <span class="keyword">while</span> (small != large)&#123;</div><div class="line">            <span class="keyword">while</span> (data[small] &lt;= pivot &amp;&amp; small &lt; large)</div><div class="line">                small++;</div><div class="line">            <span class="keyword">while</span> (data[large] &gt;= pivot &amp;&amp; small &lt; large)</div><div class="line">                large--;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (small &lt; large)</div><div class="line">                swap(data, small, large);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 基数归位</span></div><div class="line">        swap(data, end, small);</div><div class="line">        <span class="keyword">return</span> small;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp = data[i];</div><div class="line">        data[i] = data[j];</div><div class="line">        data[j] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>方法三</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"><span class="keyword">import</span> java.util.PriorityQueue;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用容器存储k个数</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KLeastNumbers2</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || k &lt;= <span class="number">0</span> || data.length &lt; k)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input!"</span>);</div><div class="line"></div><div class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(k, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> o2 - o1;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; ++i)&#123;</div><div class="line">            <span class="keyword">if</span> (queue.size() &lt; k)&#123;</div><div class="line">                queue.offer(data[i]);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (data[i] &lt; queue.peek())&#123;</div><div class="line">                    queue.poll();</div><div class="line">                    queue.offer(data[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (Integer i: queue)&#123;</div><div class="line">            list.add(i);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(29): 数组中出现次数超过一半的数字]]></title>
      <url>https://rogerfang.github.io/2017/02/06/SwordPointToOffer-29-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个数组 {1,2,3,2,2,2,2,5,4,2}，会输出数字2。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote>
<p>时间复杂度最优是$O(n\log{n})$。</p>
</blockquote>
<p>将整个数组进行排序，取出<code>n/2</code>索引处的数字即可。</p>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote>
<p>时间复杂度是$O(n)$。</p>
</blockquote>
<p>借用快速排序的<code>partition</code>函数，简化整个方法一的整个排序过程。随机选择一个基数索引<code>pivotIndex</code>，如果<code>pivotIndex &gt; middle</code>就在基数索引的左边进行查找；如果<code>pivotIndex &lt; middle</code>就在基数索引的右边进行查找。</p>
<p><strong>这种方法会修改输入的数组</strong>。</p>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><blockquote>
<p>时间复杂度是$O(n)$。</p>
</blockquote>
<p>数组中有一个数字出现的次数超过数组长度的一半，也就是说它出现的次数比其他所有数字出现次数的和还要多。因此我们可以考虑在遍历数组的时候保存两个值： 一个是数组中的一个数字， 一个是次数。当我们遍历到下～个数字的时候，如果下一个数字和我们之前保存的数字相同，则次数加 l ：如果下一个数字和我们之前保存的数字，不同，则次数减 1 。如果次数为零，我们需要保存下一个数字，并把次数设为 1 。由于我们要找的数字出现的次数比其他所有数字出现的次数之和还要多，那么要找的数字肯定是最后一次把次数设为 1 时对应的数字。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><figcaption><span>方法二partition函数</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 基于快速排序的partition</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreThanHalfNumber1</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MoreThanHalfNumber1 test = <span class="keyword">new</span> MoreThanHalfNumber1();</div><div class="line">        <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</div><div class="line">        System.out.println(test.handle(data));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input!"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> middle = data.length &gt;&gt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> end = data.length - <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> index = partition(data, start, end, end);</div><div class="line">        <span class="keyword">while</span> (index != middle)&#123;</div><div class="line">            <span class="keyword">if</span> (index &lt; middle)&#123;</div><div class="line">                start = index + <span class="number">1</span>;</div><div class="line">                index = partition(data, start, end, end);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                end = index - <span class="number">1</span>;</div><div class="line">                index = partition(data, start, end, end);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span> result = data[middle];</div><div class="line">        <span class="keyword">if</span> (!checkMoreThanHalf(data,result))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"there is no number more than half Num"</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkMoreThanHalf</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> result)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; ++i)&#123;</div><div class="line">            <span class="keyword">if</span> (data[i] == result)&#123;</div><div class="line">                ++times;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> times * <span class="number">2</span> &gt; data.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> pivotIndex)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> small = start;</div><div class="line">        <span class="keyword">int</span> large = end;</div><div class="line">        <span class="keyword">int</span> pivot = data[pivotIndex];</div><div class="line">        swap(data, end, pivotIndex);</div><div class="line">        <span class="keyword">while</span> (small != large)&#123;</div><div class="line">            <span class="keyword">while</span> (data[small] &lt;= pivot &amp;&amp; small &lt; large)</div><div class="line">                small++;</div><div class="line">            <span class="keyword">while</span> (data[large] &gt;= pivot &amp;&amp; small &lt; large)</div><div class="line">                large--;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (small &lt; large)</div><div class="line">                swap(data, small, large);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 基数归位</span></div><div class="line">        swap(data, end, small);</div><div class="line">        <span class="keyword">return</span> small;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp = data[i];</div><div class="line">        data[i] = data[j];</div><div class="line">        data[j] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><figcaption><span>方法三</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoreThanHalfNumber2</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MoreThanHalfNumber2 test = <span class="keyword">new</span> MoreThanHalfNumber2();</div><div class="line">        <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</div><div class="line">        System.out.println(test.handle(data));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> result = data[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> times = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; data.length; ++i)&#123;</div><div class="line">            <span class="keyword">if</span> (times == <span class="number">0</span>)&#123;</div><div class="line">                result = data[i];</div><div class="line">                times = <span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (data[i] == result)&#123;</div><div class="line">                times++;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                times--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!checkMoreThanHalf(data, result))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"there is no number more than half Num"</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkMoreThanHalf</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> result)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> times = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; ++i)&#123;</div><div class="line">            <span class="keyword">if</span> (data[i] == result)&#123;</div><div class="line">                ++times;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> times * <span class="number">2</span> &gt; data.length;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(28): 字符串的排列]]></title>
      <url>https://rogerfang.github.io/2017/02/05/SwordPointToOffer-28-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个字符串，打印出该字符串中字符的所有排列。例如输入字符串abc，则打印出由字符a、b、c所能排列出来的所有字符串 abc、acb、bac、bca、cab和cba。（可能有字符重复，字符只包括大小写字母）</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>把一个字符串看成由两部分组成：第一部分为它的第一个字符，第二部分是后面的所有字符。</p>
<p>我们求整个字符串的排列，可以看成两步：首先求所有可能出现在第一个位置的字符，即把第一个字符和后面所有的字符交换。首先固定第一个字符，求后面所有字符的排列。这个时候我们仍把后面的所有字符分成两部分：后面字符的第一个字符，以及这个字符之后的所有字符。然后把第一个字符逐一和它后面的字符交换。</p>
<blockquote>
<p>注意：</p>
<ol>
<li>由于可能有字符重复，所以交换时需要做判断，一样的字符不做交换，一定程度上起到了去重减少递归的效果，但是不能达到绝对的去重，因此还是使用<code>TreeSet</code>进行存储结果实现去重。</li>
<li>同时在每次递归调用之后需要将前一次的交换操作还原。</li>
</ol>
</blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringPermutation</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(permutation(<span class="string">"cba"</span>));</div><div class="line">        System.out.println(<span class="string">"******************"</span>);</div><div class="line">        System.out.println(permutation(<span class="string">"abab"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title">permutation</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(str != <span class="keyword">null</span>)&#123;</div><div class="line">            TreeSet&lt;String&gt; set = <span class="keyword">new</span> TreeSet&lt;&gt;();</div><div class="line">            doPermutation(set, str.toCharArray(), <span class="number">0</span>);</div><div class="line">            list.addAll(set);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doPermutation</span><span class="params">(TreeSet&lt;String&gt; set, <span class="keyword">char</span>[] chars, <span class="keyword">int</span> begin)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(chars.length - <span class="number">1</span> == begin)&#123;</div><div class="line">            set.add(<span class="keyword">new</span> String(chars));</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = begin; i &lt; chars.length; i++)&#123;</div><div class="line">                <span class="keyword">if</span> (i == begin || chars[i] != chars[begin])&#123;</div><div class="line">                    swap(chars, i, begin);</div><div class="line">                    doPermutation(set, chars, begin + <span class="number">1</span>);</div><div class="line">                    swap(chars, i, begin);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">char</span> tmp = chars[i];</div><div class="line">        chars[i] = chars[j];</div><div class="line">        chars[j] = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(27): 二叉搜索树与双向链表]]></title>
      <url>https://rogerfang.github.io/2017/02/05/SwordPointToOffer-27-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>使用二叉树的中序遍历，并更改原节点的<code>left</code>和<code>right</code>引用指向。</p>
<blockquote>
<p>注意：更改链表尾节点的引用，需要声明一个相应的全局变量。</p>
</blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">    TreeNode left = <span class="keyword">null</span>;</div><div class="line">    TreeNode right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.val = val;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">TreeNode tailNodeInList = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">convert</span><span class="params">(TreeNode pRootOfTree)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(pRootOfTree == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    doConvert(pRootOfTree);</div><div class="line"></div><div class="line">    TreeNode headNodeInList = tailNodeInList;</div><div class="line">    <span class="keyword">while</span>(headNodeInList != <span class="keyword">null</span> &amp;&amp; headNodeInList.left != <span class="keyword">null</span>)&#123;</div><div class="line">        headNodeInList = headNodeInList.left;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> headNodeInList;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">doConvert</span><span class="params">(TreeNode node)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(node == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</div><div class="line">        doConvert(node.left);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    node.left = tailNodeInList;</div><div class="line">    <span class="keyword">if</span>(tailNodeInList != <span class="keyword">null</span>)&#123;</div><div class="line">        tailNodeInList.right = node;</div><div class="line">    &#125;</div><div class="line">    tailNodeInList = node;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</div><div class="line">        doConvert(node.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(26): 复杂链表的复制]]></title>
      <url>https://rogerfang.github.io/2017/02/05/SwordPointToOffer-26-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点或者为<code>null</code>），返回结果为复制后复杂链表的head。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><blockquote>
<p>时间复杂度是 $O(n_2)$。</p>
</blockquote>
<p>思路：</p>
<ol>
<li>复制原始链表上的每个节点，并用<code>next</code>连接起来；</li>
<li>设置节点的<code>random</code>指针，在原始链表中定位<code>random</code>指向的节点，从头节点开始查找经过<code>s</code>步，然后在新链表中也从头节点开始，经过<code>s</code>步就是对应的节点。</li>
</ol>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><blockquote>
<p>空间复杂度是 $O(n)$，时间复杂度是$O(n)$。</p>
</blockquote>
<p>思路：</p>
<ol>
<li>复制原始链表上的每个节点，并用<code>next</code>连接起来；</li>
<li>在复制节点的时候，用<strong>哈希表</strong>把<code>&lt;N, N&#39;&gt;</code>的配对信息存储起来；</li>
<li>利用哈希表来设置<code>random</code>指针的时间复杂度为$O(n)$。</li>
</ol>
<h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><blockquote>
<p>时间复杂度是$O(n)$，不需要辅助空间。</p>
</blockquote>
<p>思路：</p>
<ol>
<li>复制原始链表上的每个节点，并每个复制的节点链接在原节点的后面；</li>
<li>设置节点的<code>random</code>指针，假设原节点 N 的<code>random</code>指向节点 S，则其对应的复制节点 N’ 的<code>random</code>指向节点 S的下一个节点 S’；</li>
<li>拆分链表，把奇数位的节点链接起来就是原始链表，把偶数位的节点链接起来就是复制链表。</li>
</ol>
<p><strong>Step1</strong>:<br><img src="/images/swordpointtooffer/t26_1.png" alt=""></p>
<p><strong>Step2</strong>:<br><img src="/images/swordpointtooffer/t26_2.png" alt=""></p>
<p><strong>Step3</strong>:<br><img src="/images/swordpointtooffer/t26_3.png" alt=""></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyComplexList</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RandomListNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> label;</div><div class="line">        RandomListNode next = <span class="keyword">null</span>;</div><div class="line">        RandomListNode random = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        RandomListNode(<span class="keyword">int</span> label) &#123;</div><div class="line">            <span class="keyword">this</span>.label = label;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> RandomListNode <span class="title">clone</span><span class="params">(RandomListNode head)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        cloneNode(head);</div><div class="line">        connectRandomNodes(head);</div><div class="line">        <span class="keyword">return</span> reconnectNodes(head);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cloneNode</span><span class="params">(RandomListNode head)</span></span>&#123;</div><div class="line">        RandomListNode node = head;</div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            RandomListNode clonedNode = <span class="keyword">new</span> RandomListNode(node.label);</div><div class="line">            RandomListNode nextNode = node.next;</div><div class="line">            node.next = clonedNode;</div><div class="line">            clonedNode.next = nextNode;</div><div class="line">            clonedNode.random = <span class="keyword">null</span>;</div><div class="line">            </div><div class="line">            node = clonedNode.next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connectRandomNodes</span><span class="params">(RandomListNode head)</span></span>&#123;</div><div class="line">        RandomListNode node = head;</div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            RandomListNode clonedNode = node.next;</div><div class="line">            <span class="keyword">if</span> (node.random != <span class="keyword">null</span>)&#123;</div><div class="line">                clonedNode.random = node.random.next;</div><div class="line">            &#125;</div><div class="line">            node = clonedNode.next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> RandomListNode <span class="title">reconnectNodes</span><span class="params">(RandomListNode head)</span></span>&#123;</div><div class="line">        RandomListNode node = head;</div><div class="line">        RandomListNode clonedHead = <span class="keyword">null</span>;</div><div class="line">        RandomListNode clonedNode = <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (head != <span class="keyword">null</span>)&#123;</div><div class="line">            clonedHead = clonedNode = node.next;</div><div class="line">            node.next = clonedNode.next;</div><div class="line">            node = node.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            clonedNode.next = node.next;</div><div class="line">            clonedNode = clonedNode.next;</div><div class="line">            node.next = clonedNode.next;</div><div class="line">            node = node.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> clonedHead;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(25): 二叉树中和为某一值的路径]]></title>
      <url>https://rogerfang.github.io/2017/02/05/SwordPointToOffer-25-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一棵二叉树和一个整数，打印出二叉树中节点值的和为输入整数的所有路径。从树的根节点开始往下一直到叶节点所经过的节点形成一条路径。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>由于路径是从根结点出发到叶结点， 也就是说路径总是以根结点为起始点，因此我们首先需要遍历根结点。在树的前序、中序、后序三种遍历方式中，只有前序遍历是首先访问根结点的。</p>
<p>当用前序遍历的方式访问到某一结点时， 我们把该结点添加到路径上，并累加该结点的值。如果该结点为叶结点并且路径中结点值的和刚好等于输入的整数， 则当前的路径符合要求，我们把它打印出来。如果当前结点不是叶结点，则继续访问它的子结点。当前结点访问结束后，递归函数将自动回到它的父结点。因此<strong>在函数退出之前要在路径上删除当前结点并减去当前结点的值</strong>，以确保返回父结点时路径刚好是从根结点到父结点的路径。</p>
<p>保存单条路径的数据结构是<strong>栈</strong>。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathInTree</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">        TreeNode left = <span class="keyword">null</span>;</div><div class="line">        TreeNode right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt; FindPath(TreeNode root, <span class="keyword">int</span> target) &#123;</div><div class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; paths = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</div><div class="line">            Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">            doFindPath(root, paths, stack, <span class="number">0</span>, target);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> paths;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doFindPath</span><span class="params">(TreeNode node, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; paths, Stack&lt;Integer&gt; path, <span class="keyword">int</span> curSum, <span class="keyword">int</span> expectSum)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        curSum += node.val;</div><div class="line">        path.push(node.val);</div><div class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>)&#123;</div><div class="line">            doFindPath(node.left, paths, path, curSum, expectSum);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node.right != <span class="keyword">null</span>)&#123;</div><div class="line">            doFindPath(node.right, paths, path, curSum, expectSum);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(node.left == <span class="keyword">null</span> &amp;&amp; node.right == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(curSum == expectSum)&#123;</div><div class="line">                ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i: path)&#123;</div><div class="line">                    list.add(i);</div><div class="line">                &#125;</div><div class="line">                paths.add(list);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        path.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(24): 二叉搜索树的后序遍历序列]]></title>
      <url>https://rogerfang.github.io/2017/02/05/SwordPointToOffer-24-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历的结果。如果是则返回true，否则返回false。假设输入的数组的任意两个数字都互不相同。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>后序遍历的序列中最后一个总是树（子树）的根节点，同时二叉搜索树的性质是左子树都小于根节点，且右子树都大于根节点。确定根节点后，依次遍历其子树序列，找出分界节点。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerifySequenceOfBST</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] sequence1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">8</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] sequence2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>&#125;;</div><div class="line"></div><div class="line">        System.out.println(verify(sequence1));</div><div class="line">        System.out.println(verify(sequence2));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(<span class="keyword">int</span> [] sequence)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(sequence == <span class="keyword">null</span> || sequence.length == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> doVerify(sequence, <span class="number">0</span>, sequence.length - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">doVerify</span><span class="params">(<span class="keyword">int</span>[] sequence, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(begin &gt; end || begin &lt; <span class="number">0</span> || end &gt;= sequence.length)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> root = sequence[end];</div><div class="line">        <span class="keyword">int</span> i = begin;</div><div class="line">        <span class="keyword">for</span>(; i &lt; end; i++)&#123;</div><div class="line">            <span class="keyword">if</span>(sequence[i] &gt; root)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> j = i;</div><div class="line">        <span class="keyword">for</span>(; j &lt; end; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(sequence[j] &lt; root)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> left = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>)</div><div class="line">            left = doVerify(sequence, begin, i - <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> right = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span>(j &lt; end &amp;&amp; end &gt; <span class="number">0</span>)</div><div class="line">            right = doVerify(sequence, i, end - <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> left&amp;&amp;right;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(23): 从上往下打印二叉树]]></title>
      <url>https://rogerfang.github.io/2017/02/05/SwordPointToOffer-23-%E4%BB%8E%E4%B8%8A%E5%BE%80%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>从上往下打印出二叉树的每个节点，同一层的节点按照从左往右的顺序打印。如下图中的二叉树，则依次打印出8、6、10、5、7、9、11。<br><img src="/images/swordpointtooffer/t23.png" alt=""></p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过队列来保存遍历的节点。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">print</span><span class="params">(TreeNode node)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    queue.add(node);</div><div class="line">    TreeNode curNode;</div><div class="line">    <span class="keyword">while</span> (!queue.isEmpty())&#123;</div><div class="line">        curNode = queue.remove();</div><div class="line">        list.add(curNode.val);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (curNode.left != <span class="keyword">null</span>)&#123;</div><div class="line">            queue.add(curNode.left);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (curNode.right != <span class="keyword">null</span>)&#123;</div><div class="line">            queue.add(curNode.right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(22): 栈的压入、弹出序列]]></title>
      <url>https://rogerfang.github.io/2017/02/05/SwordPointToOffer-22-%E6%A0%88%E7%9A%84%E5%8E%8B%E5%85%A5%E3%80%81%E5%BC%B9%E5%87%BA%E5%BA%8F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如，序列1、2、3、4、5是某栈的压入序列，序列4、5、3、2、1是该栈的对应的一个弹出序列，但是4、3、5、1、2就不可能是该栈的弹出序列。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>思路：借助辅助栈，把压入序列的数字依次压入该辅助栈，并按照弹出序列从该栈中弹出数字。</p>
<p>规律：如果下一个弹出的数字刚好是栈顶数字，那么直接弹出。如果下一个弹出的数字不在栈顶，我们把压栈序列中还没有入栈的数字压入辅助栈，直到把下一个需要弹出的数字压入栈顶为止。如果所有的数字都压入栈了仍然没有找到下一个弹出的数字，那么该序列不可能是一个弹出序列。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackPushPopOrder</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] push = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] pop1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] pop2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;</div><div class="line"></div><div class="line">        System.out.println(isPopOrder(push, pop1));</div><div class="line">        System.out.println(isPopOrder(push, pop2));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPopOrder</span><span class="params">(<span class="keyword">int</span>[] push, <span class="keyword">int</span>[] pop)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (push == <span class="keyword">null</span> || pop == <span class="keyword">null</span> || pop.length == <span class="number">0</span> || push.length == <span class="number">0</span> ||  push.length != pop.length)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Invalid input!"</span>);</div><div class="line">        </div><div class="line">        <span class="keyword">boolean</span> isPossible = <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// 辅助栈</span></div><div class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> indexForPush = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> indexForPop = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (indexForPop &lt; pop.length)&#123;</div><div class="line">            <span class="keyword">while</span> (indexForPush &lt; push.length &amp;&amp; (stack.isEmpty() || stack.peek() != pop[indexForPop]))&#123;</div><div class="line">                stack.push(push[indexForPush]);</div><div class="line">                ++indexForPush;                    </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (stack.peek() != pop[indexForPop])&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            stack.pop();</div><div class="line">            ++indexForPop;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (stack.isEmpty() &amp;&amp; indexForPop == pop.length)&#123;</div><div class="line">            isPossible = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> isPossible;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(21): 包含min函数的栈]]></title>
      <url>https://rogerfang.github.io/2017/02/05/SwordPointToOffer-21-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的min函数。在该栈中，调用min、push以及pop的时间复杂度都是O(1)。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>如果在定义的数据结构中，仅仅通过添加一个全局变量来保存最小元素，当最小元素出栈时，则得不到下一个最小元素。</p>
<p>思路：通过一个辅助栈来保存每次应该存放的最小元素，当前最小元素是辅助栈的栈顶元素。当数据栈进行出栈操作时，辅助栈也跟着进行出栈操作。如果入栈的元素大于辅助栈的栈顶元素，则重复将原辅助栈的栈顶元素进行入栈。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinInStack</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MyStack&lt;Integer&gt; stack = <span class="keyword">new</span> MyStack&lt;&gt;();</div><div class="line">        stack.push(<span class="number">3</span>);</div><div class="line">        stack.push(<span class="number">4</span>);</div><div class="line">        stack.push(<span class="number">2</span>);</div><div class="line">        stack.push(<span class="number">1</span>);</div><div class="line"></div><div class="line">        System.out.println(stack.min());</div><div class="line">        stack.pop();</div><div class="line">        System.out.println(stack.min());</div><div class="line">        stack.pop();</div><div class="line">        System.out.println(stack.min());</div><div class="line">        stack.pop();</div><div class="line">        System.out.println(stack.min());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt;</span>&#123;</div><div class="line">        <span class="comment">// 数据栈</span></div><div class="line">        <span class="keyword">private</span> Stack&lt;T&gt; dataStack;</div><div class="line">        <span class="comment">// 辅助栈</span></div><div class="line">        <span class="keyword">private</span> Stack&lt;T&gt; minStack;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</div><div class="line">            dataStack = <span class="keyword">new</span> Stack&lt;T&gt;();</div><div class="line">            minStack = <span class="keyword">new</span> Stack&lt;T&gt;();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T element)</span></span>&#123;</div><div class="line">            <span class="keyword">if</span> (element == <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Element cannot be null!"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (dataStack.isEmpty())&#123;</div><div class="line">                minStack.push(element);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                T curMinEle = minStack.peek();</div><div class="line">                <span class="keyword">if</span> (element.compareTo(curMinEle) &lt; <span class="number">0</span>)&#123;</div><div class="line">                    minStack.push(element);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    minStack.push(curMinEle);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            dataStack.push(element);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">if</span> (dataStack.isEmpty())&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"The Stack is empty!"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            minStack.pop();</div><div class="line">            <span class="keyword">return</span> dataStack.pop();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">min</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">if</span> (dataStack.isEmpty())&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"The Stack is empty!"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">return</span> minStack.peek();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(20): 顺时针打印矩阵]]></title>
      <url>https://rogerfang.github.io/2017/01/30/SwordPointToOffer-20-%E9%A1%BA%E6%97%B6%E9%92%88%E6%89%93%E5%8D%B0%E7%9F%A9%E9%98%B5/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个矩阵，按照从外往里以顺时针的顺序依次打印出每一个数字。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>把打印一圈分为四步：第一步从左到右打印一行，第二步从上到下打印一列，第三步从右到左打印一行，第四步从下到上打印一列。每一步我们根据起始坐标和终止坐标用一个循环就能打印出一行或者一列。</p>
<p>最后一圈有可能退化成只有一行、只有一列，甚至只有一个数字。也可能只有一步、两步、三步。</p>
<p>继续打印圈的终止条件：<code>startX * 2 &lt; columns &amp;&amp; startY * 2 &lt; rows</code></p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintMatrixClockWisely</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printMatrix</span><span class="params">(<span class="keyword">int</span> [][] matrix)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(matrix == <span class="keyword">null</span> || matrix[<span class="number">0</span>].length &lt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(start*<span class="number">2</span> &lt; matrix.length &amp;&amp; start*<span class="number">2</span> &lt; matrix[<span class="number">0</span>].length)&#123;</div><div class="line">            print(list, matrix, start);</div><div class="line">            start++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(ArrayList&lt;Integer&gt; list, <span class="keyword">int</span> [][] matrix, <span class="keyword">int</span> start)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> endX = matrix[<span class="number">0</span>].length - <span class="number">1</span>- start;</div><div class="line">        <span class="keyword">int</span> endY = matrix.length - <span class="number">1</span> - start;</div><div class="line">        <span class="comment">// 从左到右 打印一行</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= endX; i++)&#123;</div><div class="line">            list.add(matrix[start][i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 从上到下 打印一列</span></div><div class="line">        <span class="keyword">if</span>(start &lt; endY)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt;= endY; ++i)&#123;</div><div class="line">                list.add(matrix[i][endX]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 从右到左 打印一行</span></div><div class="line">        <span class="keyword">if</span>(start &lt; endX &amp;&amp; start &lt; endY)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = endX - <span class="number">1</span>; i &gt;= start; --i)&#123;</div><div class="line">                list.add(matrix[endY][i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 从下到上 打印一列</span></div><div class="line">        <span class="keyword">if</span>(start &lt; endX &amp;&amp; start &lt; endY - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = endY - <span class="number">1</span>; i &gt;= start + <span class="number">1</span>; --i)&#123;</div><div class="line">                list.add(matrix[i][start]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(19): 二叉树的镜像]]></title>
      <url>https://rogerfang.github.io/2017/01/29/SwordPointToOffer-19-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%95%9C%E5%83%8F/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>请完成一个函数，输入一个二叉树，该函数输出它的镜像。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>从上往下递归交换左右子树。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MirrorTree</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> value;</div><div class="line">        TreeNode left;</div><div class="line">        TreeNode right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mirror</span><span class="params">(TreeNode root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        TreeNode tmp = root.left;</div><div class="line">        root.left = root.right;</div><div class="line">        root.right = tmp;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(root.left != <span class="keyword">null</span>)&#123;</div><div class="line">            mirror(root.left);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(root.right != <span class="keyword">null</span>)&#123;</div><div class="line">            mirror(root.right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(18): 树的子结构]]></title>
      <url>https://rogerfang.github.io/2017/01/29/SwordPointToOffer-18-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入两棵二叉树A和B，判断B是不是A的子结构。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>整个判断过程分为两步：</p>
<ol>
<li>在树A中查找与根节点的值一样的节点R，实际上是二叉树的遍历。</li>
<li>判断树A中以R为根节点的子树是不是和树B具有相同的结构。</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HasSubTree</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val = <span class="number">0</span>;</div><div class="line">        TreeNode left = <span class="keyword">null</span>;</div><div class="line">        TreeNode right = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">has</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span>(root1 != <span class="keyword">null</span> &amp;&amp; root2 != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(root1.val == root2.val)&#123;</div><div class="line">                result = doHasSubTree(root1, root2);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!result)&#123;</div><div class="line">                result = has(root1.left, root2);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(!result)&#123;</div><div class="line">                result = has(root1.right, root2);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doHasSubTree</span><span class="params">(TreeNode root1, TreeNode root2)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(root2 == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(root1 == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(root1.val != root2.val)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> doHasSubTree(root1.left, root2.left) &amp;&amp; doHasSubTree(root1.right, root2.right);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(17): 合并两个排序的链表]]></title>
      <url>https://rogerfang.github.io/2017/01/29/SwordPointToOffer-17-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是按照递增排序的。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>合并链表的过程：</p>
<ol>
<li>比较两个链表头节点的值大小，将较小的节点合并到新链表中；</li>
<li>递归完成所有比较</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeList</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> value;</div><div class="line">        ListNode next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode list1,ListNode list2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(list1 == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> list2;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list2 == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> list1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ListNode mergeList = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(list1.value &lt; list2.value)&#123;</div><div class="line">            mergeList = list1;</div><div class="line">            mergeList.next = merge(list1.next, list2);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            mergeList = list2;</div><div class="line">            mergeList.next = merge(list1, list2.next);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> mergeList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(16): 反转链表]]></title>
      <url>https://rogerfang.github.io/2017/01/29/SwordPointToOffer-16-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>定义一个函数，输入一个链表的头节点，反转该链表并返回反转后链表的头节点。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>分析整个调整链表方向的过程，需要借助具体的例子来分析，例如原链表中的某一段h-&gt;i-&gt;j，当调整h&lt;-i时，将i的next节点指向节点h，但是会导致i-&gt;j的断裂，所以需要保存这个引用。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReverseList</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> value;</div><div class="line">        ListNode next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span></span>&#123;</div><div class="line">        ListNode reverseHead = <span class="keyword">null</span>;</div><div class="line">        ListNode node = head;</div><div class="line">        ListNode preNode = <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            ListNode nextNode = node.next;</div><div class="line">            <span class="keyword">if</span> (nextNode == <span class="keyword">null</span>)&#123;</div><div class="line">                reverseHead = node;</div><div class="line">            &#125;</div><div class="line">            node.next = preNode;</div><div class="line">            preNode = node;</div><div class="line">            node = nextNode;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> reverseHead;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(15): 链表中倒数第k个节点]]></title>
      <url>https://rogerfang.github.io/2017/01/29/SwordPointToOffer-15-%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个链表，输出该链表中倒数第k个节点。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>思路1：先遍历一次链表，得到节点数n，然后遍历输出第(n-k+1)个节点。</p>
<p>思路2：只遍历一次链表，维护两个指针，一个从头开始计数，另一个指针也从头开始计数，只不过两个指针的距离保持在k-1，当第一个指针到达尾节点时，第二个指针就是倒数第k个节点。</p>
<p>需要注意代码的鲁棒性：</p>
<ol>
<li>校验输入为空</li>
<li>校验链表节点数少于k</li>
<li>校验输入参数k是否大于0</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindKthToTail</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> value;</div><div class="line">        ListNode next;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">find</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || k &lt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        ListNode index1 = head;</div><div class="line">        ListNode index2 = head;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (index1.next != <span class="keyword">null</span>)&#123;</div><div class="line">                index1 = index1.next;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 节点数少于k个</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (index1.next != <span class="keyword">null</span>)&#123;</div><div class="line">            index1 = index1.next;</div><div class="line">            index2 = index2.next;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> index2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(14): 调整数组顺序使奇数位于偶数前面]]></title>
      <url>https://rogerfang.github.io/2017/01/29/SwordPointToOffer-14-%E8%B0%83%E6%95%B4%E6%95%B0%E7%BB%84%E9%A1%BA%E5%BA%8F%E4%BD%BF%E5%A5%87%E6%95%B0%E4%BD%8D%E4%BA%8E%E5%81%B6%E6%95%B0%E5%89%8D%E9%9D%A2/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>时间复杂度$O(n_2)$的思路：从前往后遍历，每遇到一个偶数时，拿出这个数字，并把位于该数字后面的所有数字往前移动一位，再将该数字插入到末尾的空位。</p>
<p>时间复杂度$O(n)$的思路：使用两个指针，一个指向第一位index1，只向后移动；另一个指向最后一位index2，只向前移动。如果index1指向偶数，index2指向奇数则交换这两个数。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorder</span><span class="params">(<span class="keyword">int</span>[] num)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (num == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> index1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> index2 = num.length - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (index1 &lt; index2) &#123;</div><div class="line">        <span class="comment">// 从前往后找到第一个偶数</span></div><div class="line">        <span class="keyword">while</span> ((num[index1] &amp; <span class="number">1</span>) != <span class="number">0</span>) &#123;</div><div class="line">            index1++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 从后往前找到第一个奇数</span></div><div class="line">        <span class="keyword">while</span> ((num[index2] &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</div><div class="line">            index2--;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index1 &lt; index2) &#123;</div><div class="line">            <span class="keyword">int</span> tmp = num[index1];</div><div class="line">            num[index1] = num[index2];</div><div class="line">            num[index2] = tmp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(13): 在 O(1) 时间删除链表节点]]></title>
      <url>https://rogerfang.github.io/2017/01/29/SwordPointToOffer-13-%E5%9C%A8-O-1-%E6%97%B6%E9%97%B4%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定单向链表的头指针和一个节点的指针，定义一个函数在O(1)时间删除该节点。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>常规的做法是：从链表的头节点开始，顺序遍历查找到要删除的节点，并在链表中删除该节点。<br>顺序查找使得时间复杂度是O(n)。</p>
<p>实现O(1)时间复杂度：使用复制覆盖的思想，将targetNode节点的next节点的值复制给targetNode节点，并将next节点的下一节点覆盖掉targetNode的next节点，然后删除targetNode节点的原next节点即可。</p>
<p>存在的问题：</p>
<ol>
<li>对于尾节点，其next节点为null，因而仍需要顺序查找删除节点。</li>
<li>对于不存在的节点，需要O(n)的时间判断节点是否在链表中，所以要实现O(1)时间复杂度的删除操作，需要将检验节点是否在链表中的责任交给delete操作的调用者。</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">    ListNode next;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过复制覆盖来删除节点</div><div class="line"> * <span class="doctag">@param</span> head</div><div class="line"> * <span class="doctag">@param</span> targetNode</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">delete</span><span class="params">(ListNode head, ListNode targetNode)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || targetNode == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (head == targetNode)&#123;</div><div class="line">        <span class="keyword">return</span> head.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (targetNode.next == <span class="keyword">null</span>)&#123;</div><div class="line">        ListNode tmp = head;</div><div class="line">        <span class="keyword">while</span> (tmp.next != targetNode)&#123;</div><div class="line">            tmp = tmp.next;</div><div class="line">        &#125;</div><div class="line">        tmp.next = <span class="keyword">null</span>;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        targetNode.value = targetNode.next.value;</div><div class="line">        targetNode.next = targetNode.next.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(12): 打印1到最大的n位数]]></title>
      <url>https://rogerfang.github.io/2017/01/29/SwordPointToOffer-12-%E6%89%93%E5%8D%B01%E5%88%B0%E6%9C%80%E5%A4%A7%E7%9A%84n%E4%BD%8D%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入数字n，按顺序打印出从1到最大的n位十进制数。比如输入3，则打印出1,2,3,…,999。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>问题：需要注意这个题目的陷阱，最大的n位数可能会造成数据类型（int 或 long）的溢出，所以这是一个<strong>大数问题</strong>，应该使用字符串或字符数组来解决。</p>
<p>有两种方法:<br>首先定义一个长度为n的字符数组，默认所有位置填充字符 ‘0’。</p>
<ol>
<li><strong>在字符串上模拟数字的加法</strong></li>
<li><strong>利用全排列思想的递归实现</strong></li>
</ol>
<p>打印数字的时候前面的填充 ‘0’ 注意不打印。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 打印1到最大的n位数</div><div class="line"> * 考虑大数问题</div><div class="line"> * Created by Roger on 2017/1/29.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintMaxN</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        PrintMaxN test = <span class="keyword">new</span> PrintMaxN();</div><div class="line">        <span class="comment">// test.method1(3);</span></div><div class="line">        test.method2(<span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 利用字符串来模拟整数的加法并打印</div><div class="line">     * <span class="doctag">@param</span> n</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">char</span>[] num = <span class="keyword">new</span> <span class="keyword">char</span>[n];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            num[i] = <span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> (!increment(num))&#123;</div><div class="line">            print(num);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 把问题转换为数字全排列</div><div class="line">     * <span class="doctag">@param</span> n</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">char</span>[] num = <span class="keyword">new</span> <span class="keyword">char</span>[n];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</div><div class="line">            num[i] = <span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*for (int i = 0; i &lt; 10; i++)&#123;</span></div><div class="line">            num[0] = (char)(i + '0');</div><div class="line">            usingRecursion(num, 0);</div><div class="line">        &#125;*/</div><div class="line">        usingRecursion(num, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 字符串模拟整数的加法</div><div class="line">     * <span class="doctag">@param</span> num</div><div class="line">     * <span class="doctag">@return</span> 是否溢出</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">increment</span><span class="params">(<span class="keyword">char</span>[] num)</span></span>&#123;</div><div class="line">        <span class="keyword">boolean</span> isOverFlow = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">int</span> nTakeOver = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> nLength = num.length;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = nLength - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</div><div class="line">            <span class="keyword">int</span> sum = num[i] - <span class="string">'0'</span> + nTakeOver;</div><div class="line">            <span class="keyword">if</span> (i == nLength - <span class="number">1</span>)&#123;</div><div class="line">                sum++;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (sum &gt;= <span class="number">10</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;</div><div class="line">                    isOverFlow = <span class="keyword">true</span>;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    sum -= <span class="number">10</span>;</div><div class="line">                    nTakeOver = <span class="number">1</span>;</div><div class="line">                    num[i] = (<span class="keyword">char</span>)(<span class="string">'0'</span> + sum);</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                num[i] = (<span class="keyword">char</span>) (<span class="string">'0'</span> + sum);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> isOverFlow;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 模拟全排列递归实现</div><div class="line">     * <span class="doctag">@param</span> num</div><div class="line">     * <span class="doctag">@param</span> index</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">usingRecursion</span><span class="params">(<span class="keyword">char</span>[] num, <span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (index == num.length)&#123;</div><div class="line">            print(num);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">            num[index] = (<span class="keyword">char</span>)(i + <span class="string">'0'</span>);</div><div class="line">            usingRecursion(num, index + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span>[] num)</span></span>&#123;</div><div class="line">        <span class="keyword">boolean</span> isBeginning0 = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (isBeginning0 &amp;&amp; num[i] != <span class="string">'0'</span>)&#123;</div><div class="line">                isBeginning0 = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (!isBeginning0)&#123;</div><div class="line">                System.out.print(num[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(11): 数值的整数次方]]></title>
      <url>https://rogerfang.github.io/2017/01/27/SwordPointToOffer-11-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。<br>不得使用库函数，同时不需要考虑大数问题。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这个题目看似简单，但是有很多问题需要考虑。</p>
<ol>
<li>边界问题<br> 当底数base是0且指数是负数时，需要做特殊处理。</li>
<li>浮点型equal问题<br> 计算机表示小数（float和double）都有误差，因而不能直接使用等号（==）进行比较。如果两个小数的差的绝对值很小，就可以认为它们相等。</li>
<li>效率问题<br> 可以不用进行exponent次乘法完成指数计算，比如：求一个树的32次方，如果已经计算得到了16次方，那么只需要在16次方的基础上再平方一次就可以了。</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberExponentialOperation</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(equal(base, <span class="number">0.0</span>) &amp;&amp; exponent &lt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> absExponent = exponent;</div><div class="line">        <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)&#123;</div><div class="line">            absExponent = -exponent;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">double</span> result = doPowerWithExponent(base, absExponent);</div><div class="line">        <span class="keyword">if</span>(exponent &lt; <span class="number">0</span>)&#123;</div><div class="line">            result = <span class="number">1.0</span>/result;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">doPowerWithExponent</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(exponent == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(exponent == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> base;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">double</span> result = doPowerWithExponent(base, exponent &gt;&gt; <span class="number">1</span>);</div><div class="line">        result *= result;</div><div class="line">        <span class="keyword">if</span>((exponent &amp; <span class="number">0x1</span>) == <span class="number">1</span>)&#123;</div><div class="line">            result *= base;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">equal</span><span class="params">(<span class="keyword">double</span> d1, <span class="keyword">double</span> d2)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>((d1 - d2 &gt; -<span class="number">0.0000001</span>) &amp;&amp; (d1 - d2 &lt; <span class="number">0.0000001</span>))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(10): 二进制中1的个数]]></title>
      <url>https://rogerfang.github.io/2017/01/26/SwordPointToOffer-10-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>方法1：用标志位与数target进行按位与操作，如果不为0代表有一个1，循环比较，标志位左移1位。时间复杂度为O(n)，n为二进制的位数。</p>
<p>方法2：将数target减1，然后与原数target进行按位与操作并更新target数，直到target数变为0（每次按位与操作从右到左减少一个二进制位中的1）。时间复杂度为O(m)，m为二进制中1的个数。（target不为0时，至少有一个1）</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitCount</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// O(n) n为二进制位数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solutuon1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(flag != <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">if</span>( (n&amp;flag) != <span class="number">0</span>)&#123;</div><div class="line">                ++count;</div><div class="line">            &#125;</div><div class="line">            flag = flag &lt;&lt; <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//O(m) m位1的个数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">solution2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (n != <span class="number">0</span>)&#123;</div><div class="line">            ++count;</div><div class="line">            n = (n-<span class="number">1</span>)&amp;n;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(9): Fibonacci]]></title>
      <url>https://rogerfang.github.io/2017/01/26/SwordPointToOffer-9-Fibonacci/</url>
      <content type="html"><![CDATA[<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>下面代码的时间复杂度是O(n)，但是运用矩阵运算公式及乘方的性质可以达到O(logn)。</p>
<p>青蛙跳台阶问题：一只青蛙一次可以跳1级台阶，也可以跳2级台阶，求跳上n级台阶总共有多少种跳法。</p>
<blockquote>
<p>n&gt;2时，考虑第一次跳1级时，总共有f(n-1)种跳法；第一次跳2级时，总共有f(n-2)种跳法。</p>
</blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> f1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> f2 = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> fn = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</div><div class="line">            fn = f1 + f2;</div><div class="line">            f1 = f2;</div><div class="line">            f2 = fn;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fn;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(8): 旋转数组的最小数字]]></title>
      <url>https://rogerfang.github.io/2017/01/26/SwordPointToOffer-8-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。<br>输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。<br>例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>Bad：直接使用顺序查找，时间复杂度是 O(n)，但是没有利用旋转数组的特性。</p>
<p>和二分查找一样，使用两个指针，分别指向数组的第一个元素和最后一个元素。根据题目中旋转的规则，第一个元素应该是大于或者等于最后一个元素的（不过还存在特例）。</p>
<p><strong>步骤</strong>：</p>
<ol>
<li>根据index1和index2求出indexMid（中间元素的索引）</li>
<li>比较indexMid和index1、index2的元素大小<br> 2.1. 如果<code>array[indexMid] &gt;= array[index1]</code>，表示最小元素在indexMid和index2之间；<br> 2.2. 如果<code>array[indexMid] &lt; array[index2]</code>，表示最小元素在index1和indexMid之间。</li>
<li>结束条件：直到index1指向前半部分子数组的最后一个元素，index2指向后半部分子数组的第一个元素。（即index1和index2相邻）</li>
</ol>
<p><strong>特例</strong>：</p>
<ol>
<li>当旋转0个元素时，也就是保持原数组本身。最小元素就是第一个元素。</li>
<li>当index1、index2和indexMid的元素都相等时，没法判断最小元素在哪个区间，因而只能采用顺序查找的办法。</li>
</ol>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinForRotateArray</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="keyword">int</span> [] array)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(array == <span class="keyword">null</span> || array.length &lt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"invalid input"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> index1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> index2 = array.length - <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 旋转0个元素到最后面，即还是排序数组本身</span></div><div class="line">        <span class="keyword">if</span>(array[index1] &lt; array[index2])&#123;</div><div class="line">            <span class="keyword">return</span> array[index1];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(index1 != index2 - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">int</span> indexMid = (index2 + index1)/<span class="number">2</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 当索引1和索引2以及中间元素相等时，无法判断最小元素在哪部分子数组，需要使用顺序查找</span></div><div class="line">            <span class="keyword">if</span>(array[indexMid] == array[index1] &amp;&amp; array[indexMid] == array[index2])&#123;</div><div class="line">                <span class="keyword">return</span> minInOrder(array, index1, index2);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(array[indexMid] &gt;= array[index1])&#123;</div><div class="line">                index1 = indexMid;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                index2 = indexMid;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> array[index2];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">minInOrder</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> result = array[start];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start+<span class="number">1</span>; i &lt;= end; ++i)&#123;</div><div class="line">            <span class="keyword">if</span>(result &gt; array[i])&#123;</div><div class="line">                result = array[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(7) 补充: 用两个队列实现栈]]></title>
      <url>https://rogerfang.github.io/2017/01/25/SwordPointToOffer-7-%E8%A1%A5%E5%85%85-%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
      <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>用两个队列来实现一个栈，完成栈的push和pop操作。 栈中的元素为int类型。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过具体的例子抽象整个过程，所有的入栈操作插入到非空的队列上，所有的出栈操作将非空队列的 length-1 个元素转移到另一个空队列中，剩下的最后一个元素出栈。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueForStack</span> </span>&#123;</div><div class="line">    Queue&lt;Integer&gt; queue1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    Queue&lt;Integer&gt; queue2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (!queue1.isEmpty())&#123;</div><div class="line">            queue1.offer(node);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            queue2.offer(node);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">pop</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (!queue1.isEmpty())&#123;</div><div class="line">            <span class="keyword">while</span> (queue1.size() &gt; <span class="number">1</span>)&#123;</div><div class="line">                queue2.offer(queue1.poll());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> queue1.poll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!queue2.isEmpty())&#123;</div><div class="line">            <span class="keyword">while</span> (queue2.size() &gt; <span class="number">1</span>)&#123;</div><div class="line">                queue1.offer(queue2.poll());</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> queue2.poll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(7): 用两个栈实现队列]]></title>
      <url>https://rogerfang.github.io/2017/01/25/SwordPointToOffer-7-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>用两个栈来实现一个队列，完成队列的enqueue和dequeue操作。 队列中的元素为int类型。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>通过具体的例子来抽象出整个过程，所有的入队操作插入到stack1中，所有的出队操作从stack2中删除。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackForQueue</span> </span>&#123;</div><div class="line">    Stack&lt;Integer&gt; stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">    Stack&lt;Integer&gt; stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(<span class="keyword">int</span> node)</span> </span>&#123;</div><div class="line">        stack1.push(node);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(stack2.size() &lt;= <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">while</span>(stack1.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">                Integer tmp = stack1.pop();</div><div class="line">                stack2.push(tmp);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(stack2.size() == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"The queue is empty"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> stack2.pop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(6): 重建二叉树]]></title>
      <url>https://rogerfang.github.io/2017/01/25/SwordPointToOffer-6-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>二叉树的前序序列中，第一个数字总是数的根节点的值。但是在中序序列中，根节点的值在序列的中间，左子树的节点值位于根节点的值的左边，而右子树的节点的值位于根节点的值的右边。</p>
<p>先根据前序序列得到根节点的值，然后遍历中序序列得到该值所在的索引，从而分开左子树和右子树。此过程进行递归。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] in)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (pre == <span class="keyword">null</span> || in == <span class="keyword">null</span> || pre.length != in.length || pre.length &lt; <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> usingRecursion(pre, in, <span class="number">0</span>, pre.length, <span class="number">0</span>, in.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">TreeNode <span class="title">usingRecursion</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] in, <span class="keyword">int</span> beginP, <span class="keyword">int</span> endP, <span class="keyword">int</span> beginI, <span class="keyword">int</span> endI)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> rootVal = pre[beginP];</div><div class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(rootVal);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> indexOfIn = beginI;</div><div class="line">    <span class="keyword">while</span> (indexOfIn &lt; endI &amp;&amp; in[indexOfIn] != rootVal)</div><div class="line">        ++indexOfIn;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (indexOfIn &gt;= endI) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Invalid input"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> leftLength = indexOfIn - beginI;</div><div class="line">    <span class="keyword">int</span> rightLength = endI - <span class="number">1</span> - indexOfIn;</div><div class="line">    <span class="keyword">if</span> (leftLength &gt; <span class="number">0</span>) &#123;</div><div class="line">        root.left = usingRecursion(pre, in, beginP + <span class="number">1</span>, beginP + <span class="number">1</span> + leftLength, beginI, indexOfIn);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (rightLength &gt; <span class="number">0</span>) &#123;</div><div class="line">        root.right = usingRecursion(pre, in, endP - rightLength, endP, indexOfIn + <span class="number">1</span>, endI);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> val;</div><div class="line">    TreeNode left;</div><div class="line">    TreeNode right;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.val = val;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(5): 从尾到头打印链表]]></title>
      <url>https://rogerfang.github.io/2017/01/25/SwordPointToOffer-5-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>输入一个链表，从尾到头打印链表每个节点的值。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>在不改变链表结构的情况下，可以通过<strong>栈</strong>来实现“后进先出”的顺序，也可以使用<strong>递归</strong>来实现。<br>递归在本质上就是一个栈结构，但是递归可能会导致函数调用层级很深造成栈溢出，显示地用栈基于循环实现的代码更好一些。</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListReversePrintDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">printListFromTailToHead</span><span class="params">(ListNode listNode)</span> </span>&#123;</div><div class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">// usingRecursion(list, listNode);</span></div><div class="line">        usingIteration(list, listNode);</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用栈实现</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">usingIteration</span><span class="params">(ArrayList&lt;Integer&gt; list, ListNode listNode)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (listNode != <span class="keyword">null</span>) &#123;</div><div class="line">            Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">            <span class="keyword">while</span> (listNode != <span class="keyword">null</span>) &#123;</div><div class="line">                stack.push(listNode.val);</div><div class="line">                listNode = listNode.next;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (!stack.isEmpty()) &#123;</div><div class="line">                list.add(stack.pop());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过递归实现</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">usingRecursion</span><span class="params">(ArrayList&lt;Integer&gt; list, ListNode listNode)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (listNode != <span class="keyword">null</span>) &#123;</div><div class="line">            usingRecursion(list, listNode.next);</div><div class="line">            list.add(listNode.val);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> val;</div><div class="line">        ListNode next = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        ListNode(<span class="keyword">int</span> val) &#123;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(4): 字符串替换空格]]></title>
      <url>https://rogerfang.github.io/2017/01/25/SwordPointToOffer-4-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>对于字符串替换，会造成字符串的长度变化，所以有两种方式解决：1.在位的替换字符；2，通过创建新的字符串来完成字符替换操作。</p>
<p>在位解决思路（时间复杂度为<strong>O(n)</strong>）：</p>
<ol>
<li>先遍历一次字符数组，获取空格的数量，由此计算出替换之后的字符串总长度。</li>
<li>准备两个索引指针<code>indexOfOriginal</code>和<code>indexOfNew</code>，分别指向原字符串的末尾和新字符串的末尾。</li>
<li>向前移动指针<code>indexOfOriginal</code>，逐个把字符复制到<code>indexOfNew</code>指向的位置，直到遇到空格符时进行相应的字符替换。</li>
</ol>
<h1 id="在位实现"><a href="#在位实现" class="headerlink" title="在位实现"></a>在位实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> string 字符数组</div><div class="line"> * <span class="doctag">@param</span> length 字符串实际大小</div><div class="line"> * <span class="doctag">@return</span> 转换后的字符串实际长度，-1表示失败</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">replaceBlank</span><span class="params">(<span class="keyword">char</span>[] string, <span class="keyword">int</span> length)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (string == <span class="keyword">null</span> || length &lt;= <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> numOfBlank = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (string[i] == <span class="string">' '</span>)&#123;</div><div class="line">            numOfBlank++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (numOfBlank == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> newLength = length + <span class="number">2</span> * numOfBlank;</div><div class="line">    <span class="keyword">if</span> (newLength &gt; string.length)&#123;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> indexOfOriginal = length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> indexOfNew = newLength - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (indexOfOriginal &gt;= <span class="number">0</span> &amp;&amp; indexOfNew &gt; indexOfOriginal)&#123;</div><div class="line">        <span class="keyword">if</span> (string[indexOfOriginal] == <span class="string">' '</span>)&#123;</div><div class="line">            string[indexOfNew--] = <span class="string">'0'</span>;</div><div class="line">            string[indexOfNew--] = <span class="string">'2'</span>;</div><div class="line">            string[indexOfNew--] = <span class="string">'%'</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            string[indexOfNew--] = string[indexOfOriginal];</div><div class="line">        &#125;</div><div class="line">        --indexOfOriginal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newLength;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwordPointToOffer(3): 二维数组中的查找]]></title>
      <url>https://rogerfang.github.io/2017/01/25/SwordPointToOffer-3-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>原数组有序，从左到右递增，从上到下递增，步骤如下：</p>
<ol>
<li>选取数组中右上角(或者左下角)的数字</li>
<li>和target数字比较<br> 2.1 如果相等，则返回true<br> 2.2 如果大于target，则删除列（–column）<br> 2.3 如果小于target，则删除行（++row）</li>
</ol>
<p>注意边界检查。</p>
<blockquote>
<p>选取右上角或者左下角的数字和target数字比较的原因是，每次比较后都能缩小查找的范围，如果选取左上角或者右下角则不能。</p>
</blockquote>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> found = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(array != <span class="keyword">null</span> &amp;&amp; array.length &gt; <span class="number">0</span> &amp;&amp; array[<span class="number">0</span>] != <span class="keyword">null</span> &amp;&amp; array[<span class="number">0</span>].length &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> row = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> column = array[<span class="number">0</span>].length - <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(row &lt; array.length &amp;&amp; column &gt;= <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">int</span> cur = array[row][column];</div><div class="line">                <span class="keyword">if</span>(cur == target)&#123;</div><div class="line">                    found = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur &gt; target)&#123;</div><div class="line">                    --column;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    ++row;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> found;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><ul>
<li>二维数组中包含target数字（target为最大值或最小值，或者是中间数）</li>
<li>二维数组中没有target数字</li>
<li>特殊输入测试（空指针）</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat(5): Connector初始化和加载]]></title>
      <url>https://rogerfang.github.io/2017/01/24/Tomcat-5-Connector%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>Connector 组件的主要任务：</p>
<ol>
<li>监听端口，创建服务端与客户端的连接；</li>
<li>获取客户端请求的Socket数据，并对Socket数据进行解析和包装成Http请求数据格式；</li>
<li>将包装后的数据交给Container处理。</li>
</ol>
<p>Connector有两个属性：<code>protocolHandler</code>（协议处理器）和<code>adapter</code>（适配器），其中<code>protocolHandler</code>完成步骤(1)(2)，<code>adapter</code>完成步骤(3)。</p>
<p>三种不带Ajp的协议，客户端与Tomcat服务器<strong>直接连接</strong>：</p>
<ul>
<li>Http11NioProtocol———-默认方式，NIO方式的支持http1.1协议</li>
<li>Http11Nio2Protocol———-NIO2方式的支持http1.1协议</li>
<li>Http11AprProtocol———-使用ARP技术的支持http1.1协议（ARP：Apache portable runtime)</li>
</ul>
<p>三种带Ajp的协议为定向包协议，即WEB服务器通过 TCP连接和SERVLET容器连接，例如tomcat和Apache、Nginx等前端服务器连接：</p>
<ul>
<li>AjpNioProtocol—————NIO方式的支持Ajp协议</li>
<li>AjpNio2Protocol—————NIO2方式的支持Ajp协议</li>
<li>AjpAprProtocol—————使用ARP技术的支持Ajp协议</li>
</ul>
<h1 id="Connector配置"><a href="#Connector配置" class="headerlink" title="Connector配置"></a>Connector配置</h1><figure class="highlight xml"><figcaption><span>conf/server.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h1 id="Connector初始化"><a href="#Connector初始化" class="headerlink" title="Connector初始化"></a>Connector初始化</h1><h1 id="Connector启动"><a href="#Connector启动" class="headerlink" title="Connector启动"></a>Connector启动</h1><hr>
<p>感谢：<br>阿里技术专家，楚岩：<a href="https://yq.aliyun.com/tags/type_blog-tagid_2702/?spm=5176.8091938.0.0.FiZvcG" target="_blank" rel="external">Tomcat源码分析系列博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat(4): Container初始化和加载]]></title>
      <url>https://rogerfang.github.io/2017/01/23/Tomcat-4-Container%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>Container分成4个级别的容器：Engine、Host、Context、Wrapper，它们是父子关系。</p>
<p><img src="/images/tomcat/tomcat-container.png" alt=""></p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>Container容器的初始化入口在<code>org.apache.catalina.startup.Catalina</code>类的<code>load()</code>方法中，其中调用了<code>Digester digester = createStartDigester();</code>得到Digester对象（其中设置了许多的解析规则），之后调用<code>digester.parse()</code>对<code>conf/server.xml</code>进行解析生成对象及其相互关系。</p>
<blockquote>
<p>Digeter是apache的common项目，是对 SAX 的封装，作用是将 XML 转化成对象。</p>
</blockquote>
<figure class="highlight java"><figcaption><span>Catalina.createStartDigester()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用于设置解析时用到的规则</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> Digester <span class="title">createStartDigester</span><span class="params">()</span> </span>&#123;</div><div class="line">    ……</div><div class="line"></div><div class="line">    <span class="comment">// 如果遇到”Server“元素起始符;则创建"org.apache.catalina.core.StandardServer"的一个实例对象，并压入堆栈;如果"Server"元素的"className"属性存在，那么用这个属性的值所指定的class来创建实例对象，并压入堆栈。</span></div><div class="line">    digester.addObjectCreate(<span class="string">"Server"</span>,</div><div class="line">                             <span class="string">"org.apache.catalina.core.StandardServer"</span>,</div><div class="line">                             <span class="string">"className"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 从server.xml读取"Server"元素的所有&#123;属性:值&#125;配对,用对应的Setter方法将属性值设置到堆栈顶层元素(Server)。</span></div><div class="line">    digester.addSetProperties(<span class="string">"Server"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 遇到"Server"结束符时，调用“次顶层元素(Catalina)”的"setServer"方法，设置对象间的关系。</span></div><div class="line">    digester.addSetNext(<span class="string">"Server"</span>,</div><div class="line">                        <span class="string">"setServer"</span>,</div><div class="line">                        <span class="string">"org.apache.catalina.Server"</span>);</div><div class="line">    ……</div><div class="line">    <span class="comment">//遇到标签使用规则</span></div><div class="line">    digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">"Server/Service/Engine/"</span>));</div><div class="line">    ……</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>digester对<code>conf/server.xml</code>设置的标签动作有5种调用：</p>
<ul>
<li>addObjectCreate：遇到起始标签的元素，初始化一个实例对象入栈</li>
<li>addSetProperties：遇到某个属性名，使用setter来赋值</li>
<li>addSetNext：遇到结束标签的元素，调用相应的方法</li>
<li>addRule：调用rule的begin 、body、end、finish方法来解析xml，入栈和出栈给对象赋值</li>
<li>addRuleSet：调用addRuleInstances来解析xml标签</li>
</ul>
<h2 id="Server、Service解析"><a href="#Server、Service解析" class="headerlink" title="Server、Service解析"></a>Server、Service解析</h2><p><code>conf/server.xml</code>中，Calatina的Server对象是<code>StandardServer</code>，Service对象是<code>StandardService</code>。以下代码来自<code>Catalina.createStartDigester()</code>方法，涉及Server和Service部分并省略了部分子节点。<br><figure class="highlight java"><figcaption><span>Catalina.createStartDigester()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Server</span></div><div class="line">digester.addObjectCreate(<span class="string">"Server"</span>,</div><div class="line">                         <span class="string">"org.apache.catalina.core.StandardServer"</span>,</div><div class="line">                         <span class="string">"className"</span>);</div><div class="line">digester.addSetProperties(<span class="string">"Server"</span>);</div><div class="line">digester.addSetNext(<span class="string">"Server"</span>,</div><div class="line">                    <span class="string">"setServer"</span>,</div><div class="line">                    <span class="string">"org.apache.catalina.Server"</span>);</div><div class="line"></div><div class="line"><span class="comment">// Service</span></div><div class="line">digester.addObjectCreate(<span class="string">"Server/Service"</span>,</div><div class="line">                         <span class="string">"org.apache.catalina.core.StandardService"</span>,</div><div class="line">                         <span class="string">"className"</span>);</div><div class="line">digester.addSetProperties(<span class="string">"Server/Service"</span>);</div><div class="line">digester.addSetNext(<span class="string">"Server/Service"</span>,</div><div class="line">                    <span class="string">"addService"</span>,</div><div class="line">                    <span class="string">"org.apache.catalina.Service"</span>);</div><div class="line"><span class="comment">// Service:Executor</span></div><div class="line">digester.addObjectCreate(<span class="string">"Server/Service/Executor"</span>,</div><div class="line">                 <span class="string">"org.apache.catalina.core.StandardThreadExecutor"</span>,</div><div class="line">                 <span class="string">"className"</span>);</div><div class="line">digester.addSetProperties(<span class="string">"Server/Service/Executor"</span>);</div><div class="line"></div><div class="line">digester.addSetNext(<span class="string">"Server/Service/Executor"</span>,</div><div class="line">                    <span class="string">"addExecutor"</span>,</div><div class="line">                    <span class="string">"org.apache.catalina.Executor"</span>);</div><div class="line"></div><div class="line"><span class="comment">// Service:Connector</span></div><div class="line">digester.addRule(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                 <span class="keyword">new</span> ConnectorCreateRule());</div><div class="line">digester.addRule(<span class="string">"Server/Service/Connector"</span>, <span class="keyword">new</span> SetAllPropertiesRule(</div><div class="line">        <span class="keyword">new</span> String[]&#123;<span class="string">"executor"</span>, <span class="string">"sslImplementationName"</span>, <span class="string">"protocol"</span>&#125;));</div><div class="line">digester.addSetNext(<span class="string">"Server/Service/Connector"</span>,</div><div class="line">                    <span class="string">"addConnector"</span>,</div><div class="line">                    <span class="string">"org.apache.catalina.connector.Connector"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="Engine、Host、Context解析"><a href="#Engine、Host、Context解析" class="headerlink" title="Engine、Host、Context解析"></a>Engine、Host、Context解析</h2><p>以下代码来自<code>Catalina.createStartDigester()</code>方法。其中<code>EngineRuleSet</code>、<code>HostRuleSet</code>、<code>ContextRuleSet</code>都定义了相应的解析规则。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Engine</span></div><div class="line">digester.addRuleSet(<span class="keyword">new</span> EngineRuleSet(<span class="string">"Server/Service/"</span>));</div><div class="line"><span class="comment">// Host</span></div><div class="line">digester.addRuleSet(<span class="keyword">new</span> HostRuleSet(<span class="string">"Server/Service/Engine/"</span>));</div><div class="line"><span class="comment">// Context</span></div><div class="line">digester.addRuleSet(<span class="keyword">new</span> ContextRuleSet(<span class="string">"Server/Service/Engine/Host/"</span>));</div></pre></td></tr></table></figure></p>
<h1 id="Context容器加载web服务与热部署"><a href="#Context容器加载web服务与热部署" class="headerlink" title="Context容器加载web服务与热部署"></a>Context容器加载web服务与热部署</h1><p>Tomcat 通过BackgroundProcessor来实现Context的加载web服务和热部署：Tomcat 的 Engine 会启动一个线程，该线程每10s会发送一个事件，监听到该事件的部署配置类会自动去扫描 webapp 文件夹下的war包，将其加载成一个Context，即启动一个web服务。</p>
<p>##开启线程，执行BackGroupProcessor</p>
<ol>
<li><p><code>StandardEngine</code>的<code>startInternal()</code>方法调用父类<code>ContainerBase</code>的<code>startInternal()</code>方法，其中调用<code>threadStart()</code>方法开启一个线程。</p>
 <figure class="highlight java"><figcaption><span>ContainerBase.threadStart()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Start the background thread that will periodically check for</div><div class="line"> * session timeouts.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">threadStart</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (thread != <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (backgroundProcessorDelay &lt;= <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    threadDone = <span class="keyword">false</span>;</div><div class="line">    String threadName = <span class="string">"ContainerBackgroundProcessor["</span> + toString() + <span class="string">"]"</span>;</div><div class="line">    thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> ContainerBackgroundProcessor(), threadName);</div><div class="line">    thread.setDaemon(<span class="keyword">true</span>);</div><div class="line">    thread.start();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>2.该线程每10s会调用一次processChildren。</p>
<pre><code><figure class="highlight java"><figcaption><span>ContainerBase.ContainerBackgroundProcessor</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Private thread class to invoke the backgroundProcess method</div><div class="line"> * of this container and its children after a fixed delay.</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerBackgroundProcessor</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Throwable t = <span class="keyword">null</span>;</div><div class="line">        String unexpectedDeathMessage = sm.getString(</div><div class="line">                <span class="string">"containerBase.backgroundProcess.unexpectedThreadDeath"</span>,</div><div class="line">                Thread.currentThread().getName());</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (!threadDone) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="comment">// 在StandardEngine中构造方法设置默认backgroundProcessorDelay=10，即10s调用一次</span></div><div class="line">                    Thread.sleep(backgroundProcessorDelay * <span class="number">1000L</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    <span class="comment">// Ignore</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (!threadDone) &#123;</div><div class="line">                    processChildren(ContainerBase.<span class="keyword">this</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (RuntimeException|Error e) &#123;</div><div class="line">            t = e;</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (!threadDone) &#123;</div><div class="line">                log.error(unexpectedDeathMessage, t);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>3.在<code>processChildren()</code>方法中又调用其子组件Engine、Host、Context、Wrapper及其相关组件的<code>backgroundProcess()</code>方法。</p>
<pre><code>`fireLifecycleEvent()`：对容器的监听对象发送Lifecycle.PERIODIC_EVENT事件，调用LifecycleListener的lifecycleEvent。

<figure class="highlight java"><figcaption><span>ContainerBase.backgroundProcess()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Execute a periodic task, such as reloading, etc. This method will be</div><div class="line"> * invoked inside the classloading context of this container.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line">    fireLifecycleEvent(Lifecycle.PERIODIC_EVENT, <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<figure class="highlight java"><figcaption><span>StandardContext.backgroundProcess()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!getState().isAvailable())</div><div class="line">        <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    Loader loader = getLoader();</div><div class="line">    <span class="keyword">if</span> (loader != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// WebappLoader</span></div><div class="line">            loader.backgroundProcess();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.warn(sm.getString(</div><div class="line">                    <span class="string">"standardContext.backgroundProcess.loader"</span>, loader), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Manager manager = getManager();</div><div class="line">    <span class="keyword">if</span> (manager != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            manager.backgroundProcess();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.warn(sm.getString(</div><div class="line">                    <span class="string">"standardContext.backgroundProcess.manager"</span>, manager),</div><div class="line">                    e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    WebResourceRoot resources = getResources();</div><div class="line">    <span class="keyword">if</span> (resources != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            resources.backgroundProcess();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            log.warn(sm.getString(</div><div class="line">                    <span class="string">"standardContext.backgroundProcess.resources"</span>,</div><div class="line">                    resources), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.backgroundProcess();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><p>4.调用 WebappLoader 的<code>backgroundProcess()</code>方法，<code>reloadable</code>即为是否开启热部署，而<code>modified()</code>则是当前文件是否有修改的判断，当开启了热部署且有修改就会调用Context的reload方法进行重加载，实现web服务的<strong>热部署</strong>。<br><figure class="highlight java"><figcaption><span>WebappLoader.backgroundProcess()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backgroundProcess</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (reloadable &amp;&amp; modified()) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.currentThread().setContextClassLoader</div><div class="line">                (WebappLoader.class.getClassLoader());</div><div class="line">            <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</div><div class="line">                context.reload();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (context != <span class="keyword">null</span> &amp;&amp; context.getLoader() != <span class="keyword">null</span>) &#123;</div><div class="line">                Thread.currentThread().setContextClassLoader</div><div class="line">                    (context.getLoader().getClassLoader());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="加载Web服务"><a href="#加载Web服务" class="headerlink" title="加载Web服务"></a>加载Web服务</h2><p>在上述BackgroundProcessor的第3步中，调用<code>fireLifecycleEvent()</code>方法对容器的监听对象发送<code>Lifecycle.PERIODIC_EVENT</code>事件。</p>
<p>而在Digester<strong>解析</strong>规则定义阶段，Host的解析规则通过添加<code>HostRuleSet</code>完成，该类在对<code>StandardHost</code>解析时会增加一个<code>HostConfig</code>监听器。</p>
<p><code>HostConfig</code>对该事件的响应方法<code>lifecycleEvent()</code>中调用其<code>check()</code>方法，在<code>check()</code>方法中会调用其<code>deployApps()</code>方法完成 Web Application的部署。</p>
<blockquote>
<p>部署的过程，其实就是创建了Context对象，并添加到Host中。</p>
</blockquote>
<figure class="highlight java"><figcaption><span>HostConfig</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</div><div class="line">	...</div><div class="line"></div><div class="line">    <span class="comment">// Process the event that has occurred</span></div><div class="line">    <span class="comment">// 事件对应的处理</span></div><div class="line">    <span class="keyword">if</span> (event.getType().equals(Lifecycle.PERIODIC_EVENT)) &#123;</div><div class="line">        check();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.BEFORE_START_EVENT)) &#123;</div><div class="line">        beforeStart();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.START_EVENT)) &#123;</div><div class="line">        start();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.STOP_EVENT)) &#123;</div><div class="line">        stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Check status of all webapps.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (host.getAutoDeploy()) &#123;</div><div class="line">        <span class="comment">// Check for resources modification to trigger redeployment</span></div><div class="line">        DeployedApplication[] apps =</div><div class="line">            deployed.values().toArray(<span class="keyword">new</span> DeployedApplication[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; apps.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (!isServiced(apps[i].name))</div><div class="line">                checkResources(apps[i], <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Check for old versions of applications that can now be undeployed</span></div><div class="line">        <span class="keyword">if</span> (host.getUndeployOldVersions()) &#123;</div><div class="line">            checkUndeploy();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Hotdeploy applications</span></div><div class="line">        deployApps();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Deploy applications for any directories or WAR files that are found</div><div class="line"> * in our "application root" directory.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deployApps</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    File appBase = host.getAppBaseFile();</div><div class="line">    File configBase = host.getConfigBaseFile();</div><div class="line">    String[] filteredAppPaths = filterAppPaths(appBase.list());</div><div class="line">    <span class="comment">// Deploy XML descriptors from configBase</span></div><div class="line">    deployDescriptors(configBase, configBase.list());</div><div class="line">    <span class="comment">// Deploy WARs</span></div><div class="line">    deployWARs(appBase, filteredAppPaths);</div><div class="line">    <span class="comment">// Deploy expanded folders</span></div><div class="line">    deployDirectories(appBase, filteredAppPaths);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>WebApp由三种<strong>部署方式</strong>：</p>
<ul>
<li>在server.xml的Host标签中声明Context标签</li>
<li>将war包放入webapps中</li>
<li>context.xml配置方式</li>
</ul>
<p><strong>部署的过程</strong>：就是通过任务框架<code>ExecutorService</code>执行一个具体的部署任务（这些任务类作为<code>HostConfig</code>的内部类）。每个部署任务执行过程都有下面一块代码完成Context对象的实例化并为其添加一个<code>ContextConfig</code>监听器，以及将其添加到对应的Host中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// StandardHost中configClass默认为"org.apache.catalina.startup.ContextConfig"</span></div><div class="line">Class&lt;?&gt; clazz = Class.forName(host.getConfigClass());</div><div class="line">LifecycleListener listener =</div><div class="line">    (LifecycleListener) clazz.newInstance();</div><div class="line">context.addLifecycleListener(listener);</div><div class="line"></div><div class="line">host.addChild(context);</div></pre></td></tr></table></figure></p>
<h1 id="Wrapper加载"><a href="#Wrapper加载" class="headerlink" title="Wrapper加载"></a>Wrapper加载</h1><p>在上面的 Context 部署的过程中有一步是给 Context 添加<code>ContextConfig</code>监听器。<br>而在 StandardContext 的<code>startInternal()</code>方法中，发送了监听事件<code>CONFIGURE_START_EVENT</code>。</p>
<figure class="highlight java"><figcaption><span>StandardContext.startInternal()</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Notify our interested LifecycleListeners</span></div><div class="line">fireLifecycleEvent(Lifecycle.CONFIGURE_START_EVENT, <span class="keyword">null</span>);</div></pre></td></tr></table></figure>
<p><code>ContextConfig</code>监听到该事件，调用<code>configureStart()</code>方法，在该方法中调用<code>webConfig()</code>完成web.xml解析，生成servlet、filter等信息，并配置加载Wrapper。</p>
<blockquote>
<p>Wrapper 代表一个 Servlet，它负责管理一个 Servlet，包括的 Servlet 的装载、初始化、执行以及资源回收。</p>
</blockquote>
<hr>
<p>感谢：<br>阿里技术专家，楚岩：<a href="https://yq.aliyun.com/tags/type_blog-tagid_2702/?spm=5176.8091938.0.0.FiZvcG" target="_blank" rel="external">Tomcat源码分析系列博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat(3): 初始化和启动概述]]></title>
      <url>https://rogerfang.github.io/2017/01/22/Tomcat-3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%90%AF%E5%8A%A8%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>想要了解 Tomcat 的启动和初始化过程，就应该从启动入口<code>org.apache.catalina.startup.Bootstrap</code>类开始。</p>
<h1 id="main"><a href="#main" class="headerlink" title="main()"></a>main()</h1><p>Bootstrap类的<code>main()</code>方法中，主要的任务是：</p>
<ol>
<li>实例化Bootstrap对象，并调用其<code>init()</code>方法</li>
<li>如果传入的命令是启动Tomcat，则调用其<code>load()</code>和<code>start()</code>方法。</li>
</ol>
<p>传入的命令参数<code>startd</code>和<code>start</code>的区别是设置了一个布尔变量<code>await</code>为<code>true</code>。</p>
<figure class="highlight java"><figcaption><span>Boostrap.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (daemon == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Don't set daemon until init() has completed</span></div><div class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            bootstrap.init();</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">            handleThrowable(t);</div><div class="line">            t.printStackTrace();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        daemon = bootstrap;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        String command = <span class="string">"start"</span>;</div><div class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            command = args[args.length - <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (command.equals(<span class="string">"startd"</span>)) &#123;</div><div class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"start"</span>;</div><div class="line">            daemon.load(args);</div><div class="line">            daemon.start();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stopd"</span>)) &#123;</div><div class="line">            args[args.length - <span class="number">1</span>] = <span class="string">"stop"</span>;</div><div class="line">            daemon.stop();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"start"</span>)) &#123;</div><div class="line">            daemon.setAwait(<span class="keyword">true</span>);</div><div class="line">            daemon.load(args);</div><div class="line">            daemon.start();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"stop"</span>)) &#123;</div><div class="line">            daemon.stopServer(args);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (command.equals(<span class="string">"configtest"</span>)) &#123;</div><div class="line">            daemon.load(args);</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span>==daemon.getServer()) &#123;</div><div class="line">                System.exit(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            System.exit(<span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            log.warn(<span class="string">"Bootstrap: command \""</span> + command + <span class="string">"\" does not exist."</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        <span class="comment">// Unwrap the Exception for clearer error reporting</span></div><div class="line">        <span class="keyword">if</span> (t <span class="keyword">instanceof</span> InvocationTargetException &amp;&amp;</div><div class="line">                t.getCause() != <span class="keyword">null</span>) &#123;</div><div class="line">            t = t.getCause();</div><div class="line">        &#125;</div><div class="line">        handleThrowable(t);</div><div class="line">        t.printStackTrace();</div><div class="line">        System.exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><h2 id="静态块"><a href="#静态块" class="headerlink" title="静态块"></a>静态块</h2><p>静态块的主要任务是初始化路径：</p>
<ul>
<li>HOME 路径：代表 Tomcat 的安装目录</li>
<li>BASE 路径：代表 Tomcat 的工作目录。<blockquote>
<p>如果想要运行Tomcat 的 多个实例，但是不想安装多个Tomcat软件副本。那么可以配置多个工作目录，每个运行实例独占一个工作目录，但是共享同一个安装目录。</p>
</blockquote>
</li>
</ul>
<h2 id="init"><a href="#init" class="headerlink" title="init()"></a>init()</h2><p>Bootstrap的<code>init()</code>的主要任务是：</p>
<ol>
<li><p><strong>初始化类加载器</strong><br> Tomcat类加载器：commonLoader、catalinaLoader、sharedLoader。<br> <img src="../images/tomcat/tomcat-classloader.png" alt=""></p>
</li>
<li><p>主线程的classLoader设置为catalinaLoader，安全管理的classLoad设置为catalineLoader。</p>
</li>
<li><p><strong>初始化Bootstrap的<code>Catalina</code>对象</strong><br> 通过反射生成Catalina对象，并通过反射调用setParentClassLoader方法设置其父 ClassLoader为sharedLoader。</p>
</li>
</ol>
<figure class="highlight java"><figcaption><span>Boostrap.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	<span class="comment">// 初始化Tomcat的类加载器</span></div><div class="line">    initClassLoaders();</div><div class="line"></div><div class="line">    Thread.currentThread().setContextClassLoader(catalinaLoader);</div><div class="line"></div><div class="line">    SecurityClassLoad.securityClassLoad(catalinaLoader);</div><div class="line"></div><div class="line">    <span class="comment">// Load our startup class and call its process() method</span></div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">        log.debug(<span class="string">"Loading startup class"</span>);</div><div class="line">	<span class="comment">// 初始化Catalina对象</span></div><div class="line">    Class&lt;?&gt; startupClass =</div><div class="line">        catalinaLoader.loadClass</div><div class="line">        (<span class="string">"org.apache.catalina.startup.Catalina"</span>);</div><div class="line">    Object startupInstance = startupClass.newInstance();</div><div class="line"></div><div class="line">    <span class="comment">// Set the shared extensions class loader</span></div><div class="line">    <span class="keyword">if</span> (log.isDebugEnabled())</div><div class="line">        log.debug(<span class="string">"Setting startup class properties"</span>);</div><div class="line">    String methodName = <span class="string">"setParentClassLoader"</span>;</div><div class="line">    Class&lt;?&gt; paramTypes[] = <span class="keyword">new</span> Class[<span class="number">1</span>];</div><div class="line">    paramTypes[<span class="number">0</span>] = Class.forName(<span class="string">"java.lang.ClassLoader"</span>);</div><div class="line">    Object paramValues[] = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">    paramValues[<span class="number">0</span>] = sharedLoader;</div><div class="line">    Method method =</div><div class="line">        startupInstance.getClass().getMethod(methodName, paramTypes);</div><div class="line">    method.invoke(startupInstance, paramValues);</div><div class="line"></div><div class="line">    catalinaDaemon = startupInstance;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h1><p>Bootstrap的<code>load()</code>方法通过反射调用<code>Catalina</code>对象的<code>load()</code>方法。</p>
<p><code>Catalina</code>的<code>load()</code>方法主要任务是：</p>
<ol>
<li>初始化命名服务的基本配置</li>
<li>创建一个Digester类对象，默认用于解析<code>conf/server.xml</code>，将xml文件转换成相应的对象。</li>
<li>调用<code>Server</code>的<code>init()</code>方法。</li>
</ol>
<figure class="highlight xml"><figcaption><span>conf/server.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></div><div class="line">    ……</div><div class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></div><div class="line">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span></div><div class="line">               <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span>/&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></div><div class="line">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></div><div class="line">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</div><div class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="start"><a href="#start" class="headerlink" title="start()"></a>start()</h1><p>Bootstrap的<code>start()</code>方法通过反射调用<code>Catalina</code>对象的<code>start()</code>方法。</p>
<p><code>Catalina</code>的<code>start()</code>方法主要任务是：</p>
<ol>
<li>调用<code>Server</code>的<code>start()</code>方法。</li>
<li>注册<code>shutdown</code>的钩子</li>
</ol>
<figure class="highlight java"><figcaption><span>Catalina.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</div><div class="line">        load();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</div><div class="line">        log.fatal(<span class="string">"Cannot start server. Server instance is not configured."</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t1 = System.nanoTime();</div><div class="line"></div><div class="line">    <span class="comment">// Start the new server</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        getServer().start();</div><div class="line">    &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">        log.fatal(sm.getString(<span class="string">"catalina.serverStartFail"</span>), e);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            getServer().destroy();</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e1) &#123;</div><div class="line">            log.debug(<span class="string">"destroy() failed for failed Server "</span>, e1);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> t2 = System.nanoTime();</div><div class="line">    <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</div><div class="line">        log.info(<span class="string">"Server startup in "</span> + ((t2 - t1) / <span class="number">1000000</span>) + <span class="string">" ms"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Register shutdown hook</span></div><div class="line">    <span class="keyword">if</span> (useShutdownHook) &#123;</div><div class="line">        <span class="keyword">if</span> (shutdownHook == <span class="keyword">null</span>) &#123;</div><div class="line">            shutdownHook = <span class="keyword">new</span> CatalinaShutdownHook();</div><div class="line">        &#125;</div><div class="line">        Runtime.getRuntime().addShutdownHook(shutdownHook);</div><div class="line"></div><div class="line">        LogManager logManager = LogManager.getLogManager();</div><div class="line">        <span class="keyword">if</span> (logManager <span class="keyword">instanceof</span> ClassLoaderLogManager) &#123;</div><div class="line">            ((ClassLoaderLogManager) logManager).setUseShutdownHook(</div><div class="line">                    <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (await) &#123;</div><div class="line">        await();</div><div class="line">        stop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br>阿里技术专家，楚岩：<a href="https://yq.aliyun.com/tags/type_blog-tagid_2702/?spm=5176.8091938.0.0.FiZvcG" target="_blank" rel="external">Tomcat源码分析系列博客</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 自定义代码折叠]]></title>
      <url>https://rogerfang.github.io/2017/01/22/Hexo-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E6%8A%98%E5%8F%A0/</url>
      <content type="html"><![CDATA[<p>代码折叠功能在hexo中没有提供，需要自己自定义添加css和js。</p>
<h1 id="自定义CSS"><a href="#自定义CSS" class="headerlink" title="自定义CSS"></a>自定义CSS</h1><p>将自定义的css样式加入到: <code>Blog目录/themes/next/source/css/_custom/custom.styl</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.highlight</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.code-fold</span>&#123;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.code-fold</span><span class="selector-pseudo">::before</span>&#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">'双击展开'</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0em</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">10em</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fc0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.code-unfold</span><span class="selector-pseudo">::before</span>&#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">'双击关闭'</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0em</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">10em</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1em</span>;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fc0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="自定义JS"><a href="#自定义JS" class="headerlink" title="自定义JS"></a>自定义JS</h1><p>将自定义的js添加到(全局生效): <code>Blog目录/themes/next/source/js/src/post-details.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  $(<span class="string">".highlight"</span>).dblclick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> ($(<span class="keyword">this</span>).hasClass(<span class="string">"code-fold"</span>)) &#123;</div><div class="line">      $(<span class="keyword">this</span>).removeClass(<span class="string">"code-fold"</span>).addClass(<span class="string">"code-unfold"</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      $(<span class="keyword">this</span>).removeClass(<span class="string">"code-unfold"</span>).addClass(<span class="string">"code-fold"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">    $(<span class="string">".highlight"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">var</span> obj = $(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span> (!obj.hasClass(<span class="string">"code-fold"</span>)) &#123;</div><div class="line">      obj.addClass(<span class="string">"code-fold"</span>);</div><div class="line">    &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://www.missfli.com/2016/10/02/hexo-customer-js/" target="_blank" rel="external">http://www.missfli.com/2016/10/02/hexo-customer-js/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat(2): 生命周期Lifecycle]]></title>
      <url>https://rogerfang.github.io/2017/01/22/Tomcat-2-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9FLifecycle/</url>
      <content type="html"><![CDATA[<p>Tomcat中有很多组件，这些组件会随着Tomcat启动而一起启动，也会随着Tomcat关闭而一起关闭。通过实现<code>org.apache.catalina.Lifecycle</code>接口，可以达到统一启动/关闭这些组件的效果。</p>
<p>生命周期涉及的三个重要接口或类：<code>Lifecycle</code>、<code>LifecycleEvenet</code>和<code>LifecycleListener</code>。</p>
<h1 id="Lifecycle接口"><a href="#Lifecycle接口" class="headerlink" title="Lifecycle接口"></a>Lifecycle接口</h1><p>Tomcat在设计上允许一个组件包含其他组件，父组件负责启动/关闭它的子组件。这样，Tomcat的启动类只需要启动一个组件就可以将全部应用的组件都启动起来。这种单一启动/关闭机制是通过 Lifecycle 接口实现的。</p>
<p>Lifecycle接口中最重要的是<code>start()</code>方法和<code>stop()</code>方法。组件必须提供这两个方法的实现，供其父组件使用，以实现对其进行启动/关闭操作。</p>
<p><code>addLifecycleListener()</code>、<code>findLifecycleListeners</code>和<code>removeLifecycleListener</code>是与事件监听器有关的。组件可以注册多个事件监听器来对发生在该组件上的某些事件进行监听。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lifecycle</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// ----------------------------------------------------- Manifest Constants</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component before init" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_INIT_EVENT = <span class="string">"before_init"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component after init" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_INIT_EVENT = <span class="string">"after_init"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component start" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String START_EVENT = <span class="string">"start"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component before start" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_START_EVENT = <span class="string">"before_start"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component after start" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_START_EVENT = <span class="string">"after_start"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component stop" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String STOP_EVENT = <span class="string">"stop"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component before stop" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_STOP_EVENT = <span class="string">"before_stop"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component after stop" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_STOP_EVENT = <span class="string">"after_stop"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component after destroy" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AFTER_DESTROY_EVENT = <span class="string">"after_destroy"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "component before destroy" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BEFORE_DESTROY_EVENT = <span class="string">"before_destroy"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "periodic" event.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PERIODIC_EVENT = <span class="string">"periodic"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "configure_start" event. Used by those</div><div class="line">     * components that use a separate component to perform configuration and</div><div class="line">     * need to signal when configuration should be performed - usually after</div><div class="line">     * &#123;<span class="doctag">@link</span> #BEFORE_START_EVENT&#125; and before &#123;<span class="doctag">@link</span> #START_EVENT&#125;.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIGURE_START_EVENT = <span class="string">"configure_start"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The LifecycleEvent type for the "configure_stop" event. Used by those</div><div class="line">     * components that use a separate component to perform configuration and</div><div class="line">     * need to signal when de-configuration should be performed - usually after</div><div class="line">     * &#123;<span class="doctag">@link</span> #STOP_EVENT&#125; and before &#123;<span class="doctag">@link</span> #AFTER_STOP_EVENT&#125;.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIGURE_STOP_EVENT = <span class="string">"configure_stop"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// --------------------------------------------------------- Public Methods</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Add a LifecycleEvent listener to this component.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> listener The listener to add</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLifecycleListener</span><span class="params">(LifecycleListener listener)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Get the life cycle listeners associated with this life cycle.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> An array containing the life cycle listeners associated with this</div><div class="line">     *         life cycle. If this component has no listeners registered, a</div><div class="line">     *         zero-length array is returned.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> LifecycleListener[] findLifecycleListeners();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Remove a LifecycleEvent listener from this component.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> listener The listener to remove</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeLifecycleListener</span><span class="params">(LifecycleListener listener)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Prepare the component for starting. This method should perform any</div><div class="line">     * initialization required post object creation. The following</div><div class="line">     * &#123;<span class="doctag">@link</span> LifecycleEvent&#125;s will be fired in the following order:</div><div class="line">     * &lt;ol&gt;</div><div class="line">     *   &lt;li&gt;INIT_EVENT: On the successful completion of component</div><div class="line">     *                   initialization.&lt;/li&gt;</div><div class="line">     * &lt;/ol&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</div><div class="line">     *  that prevents this component from being used</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Prepare for the beginning of active use of the public methods other than</div><div class="line">     * property getters/setters and life cycle methods of this component. This</div><div class="line">     * method should be called before any of the public methods other than</div><div class="line">     * property getters/setters and life cycle methods of this component are</div><div class="line">     * utilized. The following &#123;<span class="doctag">@link</span> LifecycleEvent&#125;s will be fired in the</div><div class="line">     * following order:</div><div class="line">     * &lt;ol&gt;</div><div class="line">     *   &lt;li&gt;BEFORE_START_EVENT: At the beginning of the method. It is as this</div><div class="line">     *                           point the state transitions to</div><div class="line">     *                           &#123;<span class="doctag">@link</span> LifecycleState#STARTING_PREP&#125;.&lt;/li&gt;</div><div class="line">     *   &lt;li&gt;START_EVENT: During the method once it is safe to call start() for</div><div class="line">     *                    any child components. It is at this point that the</div><div class="line">     *                    state transitions to &#123;<span class="doctag">@link</span> LifecycleState#STARTING&#125;</div><div class="line">     *                    and that the public methods other than property</div><div class="line">     *                    getters/setters and life cycle methods may be</div><div class="line">     *                    used.&lt;/li&gt;</div><div class="line">     *   &lt;li&gt;AFTER_START_EVENT: At the end of the method, immediately before it</div><div class="line">     *                          returns. It is at this point that the state</div><div class="line">     *                          transitions to &#123;<span class="doctag">@link</span> LifecycleState#STARTED&#125;.</div><div class="line">     *                          &lt;/li&gt;</div><div class="line">     * &lt;/ol&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</div><div class="line">     *  that prevents this component from being used</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Gracefully terminate the active use of the public methods other than</div><div class="line">     * property getters/setters and life cycle methods of this component. Once</div><div class="line">     * the STOP_EVENT is fired, the public methods other than property</div><div class="line">     * getters/setters and life cycle methods should not be used. The following</div><div class="line">     * &#123;<span class="doctag">@link</span> LifecycleEvent&#125;s will be fired in the following order:</div><div class="line">     * &lt;ol&gt;</div><div class="line">     *   &lt;li&gt;BEFORE_STOP_EVENT: At the beginning of the method. It is at this</div><div class="line">     *                          point that the state transitions to</div><div class="line">     *                          &#123;<span class="doctag">@link</span> LifecycleState#STOPPING_PREP&#125;.&lt;/li&gt;</div><div class="line">     *   &lt;li&gt;STOP_EVENT: During the method once it is safe to call stop() for</div><div class="line">     *                   any child components. It is at this point that the</div><div class="line">     *                   state transitions to &#123;<span class="doctag">@link</span> LifecycleState#STOPPING&#125;</div><div class="line">     *                   and that the public methods other than property</div><div class="line">     *                   getters/setters and life cycle methods may no longer be</div><div class="line">     *                   used.&lt;/li&gt;</div><div class="line">     *   &lt;li&gt;AFTER_STOP_EVENT: At the end of the method, immediately before it</div><div class="line">     *                         returns. It is at this point that the state</div><div class="line">     *                         transitions to &#123;<span class="doctag">@link</span> LifecycleState#STOPPED&#125;.</div><div class="line">     *                         &lt;/li&gt;</div><div class="line">     * &lt;/ol&gt;</div><div class="line">     *</div><div class="line">     * Note that if transitioning from &#123;<span class="doctag">@link</span> LifecycleState#FAILED&#125; then the</div><div class="line">     * three events above will be fired but the component will transition</div><div class="line">     * directly from &#123;<span class="doctag">@link</span> LifecycleState#FAILED&#125; to</div><div class="line">     * &#123;<span class="doctag">@link</span> LifecycleState#STOPPING&#125;, bypassing</div><div class="line">     * &#123;<span class="doctag">@link</span> LifecycleState#STOPPING_PREP&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</div><div class="line">     *  that needs to be reported</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Prepare to discard the object. The following &#123;<span class="doctag">@link</span> LifecycleEvent&#125;s will</div><div class="line">     * be fired in the following order:</div><div class="line">     * &lt;ol&gt;</div><div class="line">     *   &lt;li&gt;DESTROY_EVENT: On the successful completion of component</div><div class="line">     *                      destruction.&lt;/li&gt;</div><div class="line">     * &lt;/ol&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</div><div class="line">     *  that prevents this component from being used</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Obtain the current state of the source component.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> The current state of the source component.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> LifecycleState <span class="title">getState</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Obtain a textual representation of the current component state. Useful</div><div class="line">     * for JMX. The format of this string may vary between point releases and</div><div class="line">     * should not be relied upon to determine component state. To determine</div><div class="line">     * component state, use &#123;<span class="doctag">@link</span> #getState()&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> The name of the current component state.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStateName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Marker interface used to indicate that the instance should only be used</div><div class="line">     * once. Calling &#123;<span class="doctag">@link</span> #stop()&#125; on an instance that supports this interface</div><div class="line">     * will automatically call &#123;<span class="doctag">@link</span> #destroy()&#125; after &#123;<span class="doctag">@link</span> #stop()&#125;</div><div class="line">     * completes.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SingleUse</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="LifecycleEvent"><a href="#LifecycleEvent" class="headerlink" title="LifecycleEvent"></a>LifecycleEvent</h1><p>生命周期事件是<code>org.apache.catalina.LifecycleEvent</code>的实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Construct a new LifecycleEvent with the specified parameters.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> lifecycle Component on which this event occurred</div><div class="line">     * <span class="doctag">@param</span> type Event type (required)</div><div class="line">     * <span class="doctag">@param</span> data Event data (if any)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifecycleEvent</span><span class="params">(Lifecycle lifecycle, String type, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(lifecycle);</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The event data associated with this event.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object data;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * The event type this instance represents.</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> the event data of this event.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> the Lifecycle on which this event occurred.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (Lifecycle) getSource();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@return</span> the event type of this event.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.type;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="LifecycleListener"><a href="#LifecycleListener" class="headerlink" title="LifecycleListener"></a>LifecycleListener</h1><p>生命周期事件的监听器实现了<code>org.apache.catalina.LifecycleListener</code>接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleListener</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Acknowledge the occurrence of the specified event.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> event LifecycleEvent that has occurred</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat(1): 系统架构]]></title>
      <url>https://rogerfang.github.io/2017/01/21/Tomcat-1-%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p><img src="/images/tomcat/tomcat-system-architecture.png" alt="Tomcat系统架构"></p>
<p>Tomcat的核心组件有两个：<strong>Connector（连接器）</strong>和<strong>Container（容器）</strong>。</p>
<h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><p><strong>Server</strong>：是Tomcat的顶级容器，对外提供一个接口访问Service，对内负责管理维护Service集合，维护Service集合又包括管理Service的生命周期、寻找一个请求的Service、结束一个Service等。</p>
<p>Server使用一个数组来管理Service的，每添加一个Service就把原来的Service拷贝到一个新的数组中，再把新的Service放入Service数组中。</p>
<p><code>org.apache.catalina.Server</code>接口的标准实现类是<code>org.apache.catalina.core.StandardServer</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Server</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span></span></div><div class="line"></div><div class="line"><span class="title">public</span> <span class="title">final</span> <span class="title">class</span> <span class="title">StandardServer</span> <span class="keyword">extends</span> <span class="title">LifecycleMBeanBase</span> <span class="keyword">implements</span> <span class="title">Server</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The set of Services associated with this Server.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Service services[] = <span class="keyword">new</span> Service[<span class="number">0</span>];</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object servicesLock = <span class="keyword">new</span> Object();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Add a new Service to the set of defined Services.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> service The Service to be added</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addService</span><span class="params">(Service service)</span> </span>&#123;</div><div class="line"></div><div class="line">    service.setServer(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (servicesLock) &#123;</div><div class="line">        Service results[] = <span class="keyword">new</span> Service[services.length + <span class="number">1</span>];</div><div class="line">        System.arraycopy(services, <span class="number">0</span>, results, <span class="number">0</span>, services.length);</div><div class="line">        results[services.length] = service;</div><div class="line">        services = results;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (getState().isAvailable()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                service.start();</div><div class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">                <span class="comment">// Ignore</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Report this property change to interested listeners</span></div><div class="line">        support.firePropertyChange(<span class="string">"service"</span>, <span class="keyword">null</span>, service);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><p>Service是Tomcat提供对外服务的组件，用于关联Connector和Container，一个Service可以由 <strong>多个</strong> Connector + <strong>一个</strong> Container 构成。<br><code>org.apache.catalina.Service</code>接口的标准实现类是<code>org.apache.catalina.core.StandardService</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Service</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span></span></div><div class="line"></div><div class="line"><span class="title">public</span> <span class="title">class</span> <span class="title">StandardService</span> <span class="keyword">extends</span> <span class="title">LifecycleMBeanBase</span> <span class="keyword">implements</span> <span class="title">Service</span></div></pre></td></tr></table></figure></p>
<h2 id="setContainer"><a href="#setContainer" class="headerlink" title="setContainer()"></a>setContainer()</h2><p>Service中的<code>setContainer()</code>方法的主要任务是，设置一个Container容器来处理一个或者多个Connector传送过来的请求。首先判断当前的Service是否已经关联了Container容器，如果已经关联了就去除原来的关联并与新的Container容器关联，新的Container容器开始新的生命周期，如果原来的Container容器已经启动则停止掉，最后把这个过程通知给感兴趣的事件监听程序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContainer</span><span class="params">(Engine engine)</span> </span>&#123;</div><div class="line">    Engine oldEngine = <span class="keyword">this</span>.engine;</div><div class="line">    <span class="keyword">if</span> (oldEngine != <span class="keyword">null</span>) &#123;</div><div class="line">        oldEngine.setService(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.engine = engine;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.engine != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.engine.setService(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (getState().isAvailable()) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.engine != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">this</span>.engine.start();</div><div class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">                log.warn(sm.getString(<span class="string">"standardService.engine.startFailed"</span>), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Restart MapperListener to pick up new engine.</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mapperListener.stop();</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">            log.warn(sm.getString(<span class="string">"standardService.mapperListener.stopFailed"</span>), e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            mapperListener.start();</div><div class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">            log.warn(sm.getString(<span class="string">"standardService.mapperListener.startFailed"</span>), e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (oldEngine != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                oldEngine.stop();</div><div class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">                log.warn(sm.getString(<span class="string">"standardService.engine.stopFailed"</span>), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Report this property change to interested listeners</span></div><div class="line">    support.firePropertyChange(<span class="string">"container"</span>, oldEngine, <span class="keyword">this</span>.engine);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="addConnector"><a href="#addConnector" class="headerlink" title="addConnector()"></a>addConnector()</h2><p>Service的<code>addConnector()</code>方法的主要任务是，设置connector与container和service的关联关系，然后让connector开始新的生命周期，最后通知感兴趣的事件监听程序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Add a new Connector to the set of defined Connectors, and associate it</div><div class="line"> * with this Service's Container.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> connector The Connector to be added</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConnector</span><span class="params">(Connector connector)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (connectorsLock) &#123;</div><div class="line">        connector.setService(<span class="keyword">this</span>);</div><div class="line">        Connector results[] = <span class="keyword">new</span> Connector[connectors.length + <span class="number">1</span>];</div><div class="line">        System.arraycopy(connectors, <span class="number">0</span>, results, <span class="number">0</span>, connectors.length);</div><div class="line">        results[connectors.length] = connector;</div><div class="line">        connectors = results;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (getState().isAvailable()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                connector.start();</div><div class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</div><div class="line">                log.error(sm.getString(</div><div class="line">                        <span class="string">"standardService.connector.startFailed"</span>,</div><div class="line">                        connector), e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Report this property change to interested listeners</span></div><div class="line">        support.firePropertyChange(<span class="string">"connector"</span>, <span class="keyword">null</span>, connector);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h1><p><strong>Connector</strong>：连接器，负责接收请求并把请求交给Container。<br>主要任务是负责接收浏览器的发过来的 HTTP 请求，创建一个 Request 和 Response 对象分别用于和请求端交换数据，然后把 Request 和 Response 交给Container组件去处理。</p>
<h1 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h1><p><strong>Container</strong>：容器，主要装的是具体处理请求的组件。<br>Container 是容器的父接口，所有子容器都必须实现这个接口，Container 容器的设计用的是典型的责任链的设计模式，它有四个子容器组件构成，分别是：<strong>Engine</strong>、<strong>Host</strong>（虚拟主机）、<strong>Context</strong>（所属的Web应用）、<strong>Wrapper</strong>（针对每个具体的Servlet），它们是父子关系。</p>
<h1 id="Lifecycle接口"><a href="#Lifecycle接口" class="headerlink" title="Lifecycle接口"></a>Lifecycle接口</h1><p>Tomcat 中组件的生命周期是通过 Lifecycle 接口来控制的，组件只要继承这个接口并实现其中的方法就可以统一被拥有它的组件控制了。</p>
<p>Tomcat中顶级容器管理着Service的生命周期，Service容器又是Connector和Container的父容器，所以这两个组件的生命周期是由Service管理的，Container也有子容器，所以管理着这些子容器的生命周期。这样，只要所有组件都实现了Lifecycle接口，从顶层容器Server开始，就可以控制所有容器的生命周期了。</p>
<blockquote>
<p>Lifecycle接口中定义了很多状态，在api中详细说明了调用不同方法后的状态转变。</p>
</blockquote>
<hr>
<p>感谢：<br><a href="http://blog.csdn.net/u011116672/article/details/50993980" target="_blank" rel="external">http://blog.csdn.net/u011116672/article/details/50993980</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[IDEA 搭建 Tomcat9 源码调试环境]]></title>
      <url>https://rogerfang.github.io/2017/01/20/IDEA-%E6%90%AD%E5%BB%BA-Tomcat9-%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ol>
<li>IDEA</li>
<li>Tomcat源码：apache-tomcat-9.0.0.M17-src.zip 版本</li>
<li>Maven环境</li>
<li>JDK 1.8</li>
</ol>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ol>
<li>解压tomcat源码</li>
<li><p>在解压根目录下添加<code>pom.xml</code>文件，转换为Maven工程</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">    &lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Tomcat9.0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tomcat9.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Tomcat9.0<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.easymock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easymock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxrpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jdt.core.compiler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ecj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在解压根目录下新建<code>catalina-home</code>目录，作为tomcat的运行目录</p>
</li>
<li>将<code>conf</code>、<code>webapps</code>目录移到<code>catalina-home</code>目录下</li>
<li>在IDEA中打开该maven项目</li>
<li>设置启动<br> 6.1 Run &gt; Edit configurations… &gt; Application<br> 6.2 配置<code>main class</code>：<code>org.apache.catalina.startup.Bootstrap</code>。<br> 6.3 配置<code>vm options</code>：<code>-Dcatalina.home=&quot;D:\Workspace\java\source\apache-tomcat-9.0.0.M17-src\catalina-home&quot;</code>。</li>
<li>运行启动</li>
</ol>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol>
<li><p>启动时出现如下异常<br> 解决办法：删除<code>webapps</code>目录下的<code>examples</code>目录</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">严重: Error configuring application listener of class listeners.ContextListener</div><div class="line">java.lang.ClassNotFoundException: listeners.ContextListener</div><div class="line">    at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1275)</div><div class="line">    at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1109)</div><div class="line">    at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:520)</div><div class="line">    at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:501)</div><div class="line">    at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:118)</div><div class="line">    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4639)</div><div class="line">    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5179)</div><div class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:752)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:728)</div><div class="line">    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)</div><div class="line">    at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)</div><div class="line">    at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)</div><div class="line">    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</div><div class="line">    at java.util.concurrent.FutureTask.run(FutureTask.java:266)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</div><div class="line">    at java.lang.Thread.run(Thread.java:745)</div><div class="line"></div><div class="line">一月 20, 2017 4:39:46 下午 org.apache.catalina.core.StandardContext listenerStart</div><div class="line">严重: Error configuring application listener of class listeners.SessionListener</div><div class="line">java.lang.ClassNotFoundException: listeners.SessionListener</div><div class="line">    at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1275)</div><div class="line">    at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1109)</div><div class="line">    at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:520)</div><div class="line">    at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:501)</div><div class="line">    at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:118)</div><div class="line">    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4639)</div><div class="line">    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5179)</div><div class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:752)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:728)</div><div class="line">    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)</div><div class="line">    at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)</div><div class="line">    at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)</div><div class="line">    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</div><div class="line">    at java.util.concurrent.FutureTask.run(FutureTask.java:266)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</div><div class="line">    at java.lang.Thread.run(Thread.java:745)</div><div class="line"></div><div class="line">一月 20, 2017 4:39:46 下午 org.apache.catalina.core.StandardContext listenerStart</div><div class="line">严重: Error configuring application listener of class websocket.drawboard.DrawboardContextListener</div><div class="line">java.lang.ClassNotFoundException: websocket.drawboard.DrawboardContextListener</div><div class="line">    at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1275)</div><div class="line">    at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1109)</div><div class="line">    at org.apache.catalina.core.DefaultInstanceManager.loadClass(DefaultInstanceManager.java:520)</div><div class="line">    at org.apache.catalina.core.DefaultInstanceManager.loadClassMaybePrivileged(DefaultInstanceManager.java:501)</div><div class="line">    at org.apache.catalina.core.DefaultInstanceManager.newInstance(DefaultInstanceManager.java:118)</div><div class="line">    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4639)</div><div class="line">    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5179)</div><div class="line">    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:752)</div><div class="line">    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:728)</div><div class="line">    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:734)</div><div class="line">    at org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1107)</div><div class="line">    at org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1841)</div><div class="line">    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</div><div class="line">    at java.util.concurrent.FutureTask.run(FutureTask.java:266)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)</div><div class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</div><div class="line">    at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure>
</li>
<li><p>访问<code>localhost:8080</code>出现500<br> 解决办法：从tomcat二进制版本下拷贝<code>lib</code>目录到本项目中的<code>catalina-home</code>目录下。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">java.lang.NullPointerException</div><div class="line">at org.apache.jsp.index_jsp._jspService(index_jsp.java:<span class="number">427</span>)</div><div class="line">at org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:<span class="number">70</span>)</div><div class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">729</span>)</div><div class="line">at org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:<span class="number">443</span>)</div><div class="line">at org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:<span class="number">385</span>)</div><div class="line">at org.apache.jasper.servlet.JspServlet.service(JspServlet.java:<span class="number">329</span>)</div><div class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">729</span>)</div><div class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">230</span>)</div><div class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">165</span>)</div><div class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">199</span>)</div><div class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">96</span>)</div><div class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">140</span>)</div><div class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">79</span>)</div><div class="line">at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:<span class="number">624</span>)</div><div class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">87</span>)</div><div class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">349</span>)</div><div class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">495</span>)</div><div class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">66</span>)</div><div class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">767</span>)</div><div class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1347</span>)</div><div class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1142</span>)</div><div class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">617</span>)</div><div class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>)</div><div class="line">at java.lang.Thread.run(Thread.java:<span class="number">745</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统：内存管理]]></title>
      <url>https://rogerfang.github.io/2017/01/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%9A%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="内存管理的方式"><a href="#内存管理的方式" class="headerlink" title="内存管理的方式"></a>内存管理的方式</h1><p>常见的由以下4种：</p>
<ul>
<li><strong>块式管理</strong><br>  把主存分成一大块一大块的，会造成很大的浪费，但是易于管理。</li>
<li><strong>页式管理</strong><br>  把主存分为一页一页的，每一页的空间要比每一块的空间小很多。空间利用率会高很多。</li>
<li><strong>段式管理</strong><br>  把主存分为一段一段的，每一段的空间又比每一页的小很多。这会导致一个程序片断可能会被分为几十段，这样很多时间又会浪费在计算每一段的物理地址上。</li>
<li><strong>段页式管理</strong>（最常用）<br> 结合了段式管理和页式管理的优点。把主存分为若干段，每个段又分为若干页。段页式管理每取一数据需要访问3次内存。</li>
</ul>
<h1 id="分段和分页"><a href="#分段和分页" class="headerlink" title="分段和分页"></a>分段和分页</h1><p><strong>页</strong>是信息的物理单位，分页就是为了实现离散分配方式，提高内存的利用率。分页仅仅是由于系统管理的需要，而不是用户的需要。页的大小由系统确定。</p>
<p><strong>段</strong>是信息的逻辑单位，它含有一组其意义相对完整的信息。分段的目的是为了能更好的满足用户的需要。段的长度不固定取决于用户所编写的程序。</p>
<h1 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h1><p>虚拟内存时计算机内存管理的一种技术，相对于物理内存而言。</p>
<p>虚拟内存使得应用程序认为它拥有连续可用的内存，允许程序员编写并运行比实际系统拥有的内存大得多的程序。而实际上，它通常是被分割成多个物理内存碎片。</p>
<h1 id="Cache替换算法"><a href="#Cache替换算法" class="headerlink" title="Cache替换算法"></a>Cache替换算法</h1><p>Cache替换算法例如：</p>
<ol>
<li><strong>RAND</strong><br> Rand随机算法的思想是：设置随机数产生器，依据产生的随机数确定替换块，将其替换。</li>
<li><strong>FIFO</strong><br> FIFO（先进先出算法）算法的思想是：如果一个数据是最先进入的，那么可以认为在将来它被访问的可能性很小。空间满的时候，最先进入的数据会被最早置换（淘汰）掉。</li>
<li><strong>LRU</strong><br> LRU(The Least Recently Used，最久未使用算法)算法的思想是：如果一个数据在最近一段时间没有被访问到，那么可以认为在将来它被访问的可能性也很小。因此，当空间满时，最久没有访问的数据最先被置换（淘汰）。</li>
<li><strong>LFU</strong><br> LFU（Least Frequently Used ，最不经常使用算法）算法的思想是：如果一个数据在最近一段时间很少被访问到，那么可以认为在将来它被访问的可能性也很小。因此，当空间满时，最小频率访问的数据最先被淘汰。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[操作系统：进程管理]]></title>
      <url>https://rogerfang.github.io/2017/01/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%EF%BC%9A%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h1><p><strong>进程</strong>是一个执行中的程序的实例，它是系统进行资源分配和调度的一个独立单位。</p>
<p><strong>线程</strong>是进程的一个实体，是CPU调度和分配的基本单位，线程基本上不拥有系统资源，只拥有一点在运行中必不可少的资源（如：程序计数器、寄存器和栈），但是它可以与同属一个进程的其他线程共享进程所拥有的所有资源。</p>
<p>在实现了线程的操作系统中，进程是资源分配的基本单位，线程是调度的基本单位，是系统中并发执行的单元。</p>
<p>引入线程的主要优点：</p>
<ul>
<li>易于调度。</li>
<li>提高并发性。</li>
<li>开销小。</li>
<li>有利于发挥多处理器的功能。</li>
</ul>
<p><strong>进程和线程的区别：</strong></p>
<ol>
<li>一个线程必定属于也只能属于一个进程；而一个进程可以拥有多个线程并且至少拥有一个线程。</li>
<li>属于一个进程的所有线程共享该线程的所有资源，不同的进程相互独立。</li>
<li>线程又被称为轻量级进程（LWP）。线程间切换代价小，进程间切换代价大。</li>
<li>进程是程序的一次执行，线程可以理解为程序中一段程序片段的执行。</li>
<li>每个进程都有独立的内存空间，而线程共享其所属进程的内存空间。</li>
</ol>
<h1 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h1><p>线程同步互斥的控制机制，其实是由最基本的4种方法实现的：</p>
<ol>
<li><strong>临界区</strong><br> 通过对多线程的串行化来访问公共资源或一段代码，适合控制数据访问。</li>
<li><strong>互斥量</strong><br> 为协调共同对一个共享资源的单独访问而设计。只有拥有互斥对象的线程才有权限去访问系统的公共资源，因为互斥对象只有一个。</li>
<li><strong>信号量</strong><br> 为控制一个具有有限数量的用户资源而设计。它允许多个线程在同一时刻去访问同一资源，但是一般需要限制同时访问的最大线程数目。</li>
<li><strong>事件</strong><br> 用来通知线程有一些事件已发生，从而启动后继任务的开始。</li>
</ol>
<h1 id="内核线程和用户线程"><a href="#内核线程和用户线程" class="headerlink" title="内核线程和用户线程"></a>内核线程和用户线程</h1><p><strong>内核线程</strong>的建立和销毁都是由操作系统负责、通过系统调用完成。</p>
<p><strong>用户线程</strong>是指不需要内核支持而在用户程序中实现的线程，其不依赖于操作系统的核心。用户线程利用线程库提供创建、同步、调度和管理线程的函数来控制用户线程。速度快，不需要用户态/内核态切换，操作系统不知道多线程的存在。</p>
<p>用户线程的优点：</p>
<ul>
<li>可以在不支持线程的操作系统中实现。</li>
<li>创建和销毁线程、线程切换等线程管理的代价比内核线程少得多。</li>
<li>允许每个进程定制自己的调度算法，组织管理比较灵活。</li>
<li>线程能够利用的表空间和堆栈空间比内核线程多。</li>
</ul>
<p>用户线程的缺点：</p>
<ul>
<li>同一进程中只能同时有一个线程在运行，因为操作系统内核不知道用户线程的存在，此时处理器时间片分配是以进程为基本单位的，如果一个线程阻塞会导致整个进程挂起。</li>
<li>页面失效也会产生类似的问题。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网络与通信：传输层]]></title>
      <url>https://rogerfang.github.io/2017/01/19/%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
      <content type="html"><![CDATA[<p>传输层主要功能为两台主机上的应用程序提供端到端的通信，通过端口号识别两台主机上相对应程序之间进行通信。</p>
<blockquote>
<p>网络层为主机之间提供逻辑通信，而传输层为应用程序之间提供端到端的逻辑通信。</p>
</blockquote>
<p>传输层最重要的两种协议：面向连接的TCP（传输控制协议，Transmission Control Protocol）和无连接的UDP（用户数据报协议，User Datagram Protocol）。所传输的数据单元分别称为TCP报文段（segment）和UDP用户数据报。</p>
<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>用户数据报协议只在IP的数据报服务商增加了很少的功能，就是<strong>复用和分用</strong>以及<strong>差错检测</strong>的功能。<br>UDP的主要特点：</p>
<ol>
<li><strong>UDP是无连接的</strong>，即发送数据之前不需要建立连接，因此减少了开销和发送数据之前的时延。</li>
<li><strong>UDP使用尽最大努力交付</strong>，即不保证可靠交付，因此主机不需要维持复杂的连接状态表。</li>
<li><strong>UDP是面向报文的</strong>。UDP对应用层交下来的报文，既不合并也不拆分，在添加首部后就交给网络层。如果UDP数据报太长，网络层会在传送时进行<strong>分片</strong>。</li>
<li><strong>UDP没有拥塞控制</strong>，因此网络出现的拥塞不会使源主机的发送速率下降。</li>
<li><strong>UDP支持一对一、一对多、多对一和多对多的交互通信</strong>。</li>
<li><strong>UDP的首部开销小</strong>，只有8个字节，TCP有20个字节。</li>
</ol>
<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>传输控制协议TCP的主要特点：</p>
<ol>
<li><strong>TCP是面向连接的</strong>。应用程序使用TCP协议之前需要建立TCP连接，数据传输完毕后需要释放已建立的TCP连接。</li>
<li><strong>每条TCP连接只能有两个端点</strong>。</li>
<li><strong>TCP提供可靠交付的服务</strong>。也就是，通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达。</li>
<li><strong>TCP提供全双工通信</strong>。TCP允许通信双方的应用进程在任何时候都能发送数据。</li>
<li><strong>面向字节流</strong>。采用TCP协议进行数据传输是不会造成网络层分片的，因为TCP会对报文进行分段处理，接收方的TCP协议会对其进行还原。</li>
</ol>
<h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h2><p>TCP连接的断点叫做<strong>套接字</strong>（Socket）或插口，端口号拼接到IP地址即构成了套接字。</p>
<blockquote>
<p>每一条TCP连接被通信的两端的两个断点所确定。</p>
</blockquote>
<p>TCP连接是由协议所提供的一种抽象。</p>
<h2 id="TCP运输连接管理"><a href="#TCP运输连接管理" class="headerlink" title="TCP运输连接管理"></a>TCP运输连接管理</h2><p>TCP是面向连接的协议，运输连接分为3个过程：<strong>连接建立</strong>、<strong>数据传送</strong>和<strong>连接释放</strong>。<br>常见网络状态及其描述</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CLOSED</td>
<td>表示初始状态，TCP进程都处于关闭状态</td>
</tr>
<tr>
<td>LISTEN</td>
<td>表示服务器端的某个SOCKET处于监听状态，可以接受连接</td>
</tr>
<tr>
<td>SYN_SENT</td>
<td>表示客户端已发送了<code>SYN</code>报文</td>
</tr>
<tr>
<td>SYN_RCVD</td>
<td>表示服务端接收到了<code>SYN</code>报文</td>
</tr>
<tr>
<td>ESTABLISHED</td>
<td>表示TCP连接成功建立</td>
</tr>
<tr>
<td>FIN_WAIT_1</td>
<td>表示主动关闭连接，主动发送<code>FIN</code>报文</td>
</tr>
<tr>
<td>FIN_WAIT_2</td>
<td>表示被动关闭方同意关闭连接，主动关闭连接方收到被动关闭方返回的<code>ACK</code>后，进入该状态</td>
</tr>
<tr>
<td>TIME_WAIT</td>
<td>表示收到对方的<code>FIN</code>报文并发送了<code>ACK</code>报文，就等 2MSL 后即可回到 CLOSED 状态了。如果 FIN_WAIT_1 状态下，收到对方同时带<code>FIN</code>标志和<code>ACK</code>标志的报文时，可以直接进入 TIME_WAIT 状态，而无须经过 FIN_WAIT_2 状态。</td>
</tr>
<tr>
<td>CLOSING</td>
<td>表示双方都在关闭连接，双方同时发送<code>FIN</code>报文</td>
</tr>
<tr>
<td>CLOSE_WAIT</td>
<td>表示被动关闭方等待关闭，</td>
</tr>
<tr>
<td>LAST_ACK</td>
<td>表示被动关闭方发送<code>FIN</code>报文后，最后等待对方的<code>ACK</code>报文。当收到<code>ACK</code>后进入CLOSED状态。</td>
</tr>
</tbody>
</table>
<h3 id="TCP三次握手（连接建立）"><a href="#TCP三次握手（连接建立）" class="headerlink" title="TCP三次握手（连接建立）"></a>TCP三次握手（连接建立）</h3><p>采用<strong>三次握手</strong>来建立一次连接。<br><img src="/images/network/tcp-3-handshake.png" alt=""></p>
<ol>
<li><strong>第一次握手</strong><br> 建立连接时，客户端发送<code>SYN</code>包给服务器，并进入<code>SYN_SEND</code>状态，等待服务器的确认。</li>
<li><strong>第二次握手</strong><br> 服务器收到<code>SYN</code>包后，必须确认客户端，所以发送<code>ACK</code>包，同时服务器还必须发送<code>SYN</code>包等待客户端的确认，此时服务器进入到<code>SYN_RCVD</code>状态。</li>
<li><strong>第三次握手</strong><br> 客户端收到<code>SYN</code>+<code>ACK</code>包之后，向服务器发送确认包<code>ACK</code>，该包发送完毕，此时客户端与服务器进入<code>ESTABLISHED</code>状态，两者可以进行数据交换，完成三次握手。</li>
</ol>
<h3 id="TCP四次挥手（连接释放）"><a href="#TCP四次挥手（连接释放）" class="headerlink" title="TCP四次挥手（连接释放）"></a>TCP四次挥手（连接释放）</h3><p>由于TCP连接是全双工的，因此每个方向上都必须<strong>单独进行关闭</strong>，当一方完成数据发送任务后就能发送一个<code>FIN</code>来表示终止这个方向的连接，<strong>收到一个<code>FIN</code>意味着这个方向不再有数据传送但另一方向仍能继续发送数据，直到另一方向也发送<code>FIN</code>报文</strong>。<br><img src="/images/network/tcp-4-handshake.png" alt=""></p>
<ol>
<li><strong>第一次挥手</strong><br> 客户端主动向服务端发出连接释放请求<code>FIN</code>，并停止发送数据，进入<code>FIN_WAIT_1</code>状态，等待服务端确认。</li>
<li><strong>第二次挥手</strong><br> 服务端收到连接释放请求报文后，发出确认释放连接的报文<code>ACK</code>，然后服务端进入<code>CLOSE_WAIT</code>关闭等待状态。<br> 此时TCP连接处于半关闭状态，客户端已经不向服务端发送数据，但是服务端仍可以向客户端发送数据。</li>
<li><strong>第三次挥手</strong><br> 客户端收到服务器的确认信息后，就进入了<code>FIN_WAIT_2</code>状态，等待服务端发出连接释放请求报文。如果服务端没有数据需要传输，服务端会发出释放连接的请求<code>FIN</code>，服务端进入到<code>LAST_ACK</code>状态。</li>
<li><strong>第四次挥手</strong><br> 客户端收到服务端的连接释放请求后，必须对此发出确认，客户端进入到<code>TIME_WAIT</code>状态。在这段时间内TCP连接并没有释放，必须等待2MSL（最长报文段寿命）时间后，客户端才进入到<code>CLOSED</code>状态。服务端收到客户端的确认应答后，就进入了<code>CLOSED</code>状态。<br> <strong>直到客户端和服务端都进入<code>CLOSED</code>状态后，连接就完全释放了。</strong></li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><strong>为什么在 TCP 协议里，建立连接是三次握手，而关闭连接却是四次挥手?</strong><br> 因为当处于 LISTEN 状态的服务器端收到来自客户端的 SYN 报文(客户端希望新建一个TCP连接)时，<strong>它可以把 ACK (确认应答)和 SYN (同步序号)放在同一个报文里来发送给客户端</strong>。<br> 但在关闭 TCP 连接时，当收到对方的 FIN 报文时，对方仅仅表示对方已经没有数据发送给你了，<strong>但是你自己可能还有数据需要发送给对方</strong>，则等你发送完剩余的数据给对方之后，再发送 FIN 报文给对方来表示你数据已经发送完毕，并请求关闭连接，所以通常情况下，这里的 ACK 报文和 FIN 报文都是分开发送的。</li>
<li><p><strong>三次握手中，为什么需要客户端还发送一次确认？</strong></p>
<blockquote>
<p><strong>这主要是为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误连接。</strong></p>
</blockquote>
<p> 假设客户端发送连接请求在某些网络节点滞留了，客户端重新发起一次连接请求正确建立连接，但是如果这个滞留的连接请求（已失效的连接请求）在成功建立的连接释放后的某个时间才到达服务端，假设没有第三次握手，那么这次失效的连接请求又会建立一个新连接。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网络与通信：网络层]]></title>
      <url>https://rogerfang.github.io/2017/01/19/%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1%EF%BC%9A%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
      <content type="html"><![CDATA[<p>网络层向上只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。</p>
<p>网络层把运输层产生的<strong>报文段</strong>或<strong>用户数据报</strong>封装成<strong>分组</strong>或<strong>包</strong>进行传送，在TCP/IP体系中，由于网络层使用IP协议，因此分组也叫做<strong>IP数据报</strong>，简称<strong>数据报</strong>。</p>
<blockquote>
<p>无论在哪一层上传送的数据单元，习惯上可以笼统地用“<strong>分组</strong>”来表示。</p>
</blockquote>
<h1 id="网际协议IP"><a href="#网际协议IP" class="headerlink" title="网际协议IP"></a>网际协议IP</h1><p>网络层中与IP协议配套使用的还有4个协议：</p>
<ul>
<li>网际组管理协议 <strong>IGMP</strong>(Internet Group Management Protocol)</li>
<li>网际控制报文协议 <strong>ICMP</strong>(Internet Control Message Protocol)</li>
<li>地址解析协议 <strong>ARP</strong>(Address Resolution Protocol)</li>
<li>逆地址解析协议 <strong>RARP</strong>(Reverse Address Resolution Protocol)</li>
</ul>
<h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>整个因特网就是单一的、抽象的网络。IP地址就是给因特网上的每一个主机（或路由器）的每一个接口分配一个在全世界范围是唯一的32位标识符。</p>
<p>IP地址的编址方法经过了3个历史阶段：</p>
<ol>
<li><strong>分类的IP地址</strong>。最基本的编址方法，1981.</li>
<li><strong>子网的划分</strong>。改进，1985.</li>
<li><strong>构成超网</strong>。无分类编址方法（无分类域间路由选择，CIDR），1993。</li>
</ol>
<h3 id="分类的IP地址"><a href="#分类的IP地址" class="headerlink" title="分类的IP地址"></a>分类的IP地址</h3><p>IP地址定义为<code>{&lt;网络号&gt;, &lt;主机号&gt;}</code>。A、B、C类地址都是单播地址（一对一通信），D类地址是多播地址（一对多通信），E类地址保留为以后用。</p>
<blockquote>
<p>分类地址已经成为历史，目前广泛使用的是无分类IP地址。</p>
</blockquote>
<p>A、B、C的网络号字段分别为1,2,3字节长，而在网络号字段的前面有1~3位的<strong>类别位</strong>，其数值分别规定为0, 10和110。</p>
<p><img src="/images/network/ip-address-class.png" alt=""></p>
<h3 id="IP地址与硬件地址"><a href="#IP地址与硬件地址" class="headerlink" title="IP地址与硬件地址"></a>IP地址与硬件地址</h3><p><img src="/images/network/ip-address-mac.png" alt=""><br>物理地址是数据链路层和物理层使用的地址，而IP地址是网络层和以上各层使用的地址，是一种逻辑地址。</p>
<h1 id="ARP和RARP"><a href="#ARP和RARP" class="headerlink" title="ARP和RARP"></a>ARP和RARP</h1><h2 id="ARP"><a href="#ARP" class="headerlink" title="ARP"></a>ARP</h2><p>地址解析协议<strong>ARP</strong>：根据IP地址找出相应的物理地址。</p>
<p> ARP 是一种地址解析协议，是一个位于 TCP/IP 协议栈中低层的协议，主要是负责将 IP 地址解析为对应的 MAC 地址。<strong>ARP 协议只适用于局域网</strong>。另外，当发送主机和目的主机不在同一个局域网中时，即便知道目的主机的 MAC 地址，两者也不能直接通信，必须经过路由转发才可以。所以此时，发送主机通过 ARP 协议获得的将不是目的主机的真实 MAC 地址，而是一台可以通往局域网外的路由器的 MAC 地址。于是此后发送主机发往目的主机的所有帧，都将发往该路由器，通过它向外发送。这种情况称为 <strong>ARP 代理</strong>。<br>ARP的具体过程：</p>
<ol>
<li>首先，每台主机在自己的ARP缓冲区中建立一个ARP列表，用于存储IP地址与MAC地址的对应关系。</li>
<li>然后，当源主机要发送IP数据报到目标主机时，先检查自己的ARP列表，是否存在该IP地址对应的MAC地址。<br> 2.1 如果存在，则将IP数据报发送到该MAC地址，结束。<br> 2.2 如果不存在，执行步骤3。</li>
<li>向本网段上广播发送一个ARP请求分组，在本网段上的所有主机上运行的ARP进程都收到此ARP请求分组。当目标主机检测到IP地址和自己一致时，目标主机就会发送一个ARP相应分组。同时目标主机将源主机的IP地址和MAX地址添加到自己的ARP列表中。最后，源主机收到这个ARP响应分组后，将目标主机的IP地址和MAC地址添加到自己的ARP列表中，并利用此信息传输数据。</li>
</ol>
<h2 id="RARP"><a href="#RARP" class="headerlink" title="RARP"></a>RARP</h2><p>逆地址解析协议<strong>RARP</strong>：根据物理地址找出相应的IP地址。</p>
<blockquote>
<p>逆地址解析协议RARP在过去曾起到重要作用，但现在的<strong>DHCP</strong>协议已经包含了RARP协议的功能。</p>
</blockquote>
<p>RARP 的基本工作原理如下：</p>
<ol>
<li>发送端发送一个本地的 RARP 广播包，在此广播包中声明自己的 MAC 地址，并且请求任何收到此请求的 RARP 服务器分配一个IP地址。</li>
<li>本地网段上的 RARP 服务器收到此请求后，检查其 RARP 列表，查找该 MAC 地址对应的 IP 地址。如果存在，RARP 服务器就给源主机发送一个响应数据包，并将此 IP 地址提供给对方主机使用；如果不存在，RARP 服务器对此不做任何响应。</li>
<li>源端在收到从 RARP 服务器来的响应信息后，利用得到的 IP 地址进行通信；如果一直没有收到 RARP 服务器的响应信息，则表示初始化失败。</li>
</ol>
<h1 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h1><p>在网络层使用网际控制报文协议ICMP（Internet Control Message Protocol），ICMP允许主机或路由器报告差错情况和提供有关异常情况的报告。<br>IP 协议是不可靠协议，不能保证 IP 数据报能够成功的到达目的主机，无法进行差错控制，而 ICMP 协议能够协助 IP 协议完成这些功能。</p>
<blockquote>
<p>ICMP报文作为IP数据报的数据一起发送。</p>
</blockquote>
<p>ICMP报文的种类有两种：ICMP差错报告报文和ICMP询问报文。</p>
<h2 id="ICMP差错报告报文"><a href="#ICMP差错报告报文" class="headerlink" title="ICMP差错报告报文"></a>ICMP差错报告报文</h2><p>ICMP差错报告报文共有5种类型：</p>
<ol>
<li><strong>终点不可达</strong><br> 当路由器或主机不能交付数据报时就向源点发送终点不可达报文。</li>
<li><strong>源点抑制</strong><br> 当路由器或主机由于阻塞而丢弃数据报时，就向源点发送源点抑制报文，使源点直到应当把数据报的发送速率放慢。。</li>
<li><strong>超时</strong><br> IP 数据包中有一个字段 TTL（Time to live，生存周期），它的值随着每经过一个路由器就会减 1，直到减到 0 时该 IP 数据包被丢弃。<br> 当路由器收到生存时间为0的数据报时，除了丢弃数据报外，还要向源点发送超时报文。<br> 当终点在预先设定的时间内不能收到一个数据报的全部数据报片时就丢弃该数据报，就把已收到的数据报片丢弃，并向源点发送超时报文。</li>
<li><strong>参数问题</strong><br> 当路由器或主机收到的数据报的首部中的字段的值不正确时，就丢弃该数据报，并向源点发送参数问题报文。</li>
<li><strong>改变路由（重定向）</strong><br> 路由器把改变路由报文发送给主机，让主机直到下次应该讲数据报发送给另外的路由器。</li>
</ol>
<h2 id="ICMP询问报文"><a href="#ICMP询问报文" class="headerlink" title="ICMP询问报文"></a>ICMP询问报文</h2><p>ICMP询问报文由两种：</p>
<ol>
<li><strong>回送请求和回答</strong><br> ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。可以用来测试目的主机是否可达以及了解其有关状态。</li>
<li><strong>时间戳请求和回答</strong><br> ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间。可以用来进行时钟同步和测量时间。</li>
</ol>
<h2 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h2><p>ICMP的一个重要应用是分组网间探测PING（Packet InterNet Groper），用来测试主机之间的连通性。PING使用<strong>ICMP回送请求和回送回答报文</strong>。</p>
<blockquote>
<p>PING是应用层直接使用网络层ICMP的例子，没有通过传输层的TCP和UDP。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网络与通信：网络模型]]></title>
      <url>https://rogerfang.github.io/2017/01/19/%E7%BD%91%E7%BB%9C%E4%B8%8E%E9%80%9A%E4%BF%A1%EF%BC%9A%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h1><p>OSI（Open System Interconnection，开放系统互连）七层网络模型称为开放式网络互连参考模型。它是国际标准组织制定的一个指导信息互连、互通和协作的网络规范。</p>
<p>从逻辑上可以将其划分为七层模型：应用层、表示层、会话层、传输层、网络层、数据链路层和物理层。其中上3层称为高层，用于定义应用程序之间的通信和人机界面；下4层称为底层，用于定于数据如何进行端到端的传输，物理规范以及数据与光电信号间的转换。<br><img src="/images/network/osi-7-layer.png" alt=""></p>
<p>每一层的功能：</p>
<ol>
<li><strong>应用层</strong><br> 应用层一般指应用程序，该层主要负责确定通信对象，并保证有足够的资源用于通信。<br> 常见的应用层协议有：HTTP/FTP/SNMP等。</li>
<li><strong>表示层</strong><br> 表示层一般负责数据的编码及转化，确保应用层能够正常工作。<br> 该层是界面与二进制代码间互相转化的地方，同时该层负责进行数据的压缩、解压、加密、解密等。</li>
<li><strong>会话层</strong><br> 会话层主要负责在网络中的两个节点间建立、维护、控制会话，区分不同的会话，以及提供单工（Simplex）、半双工（Half duplex）、全双工（Full duplex）3种通信模式的服务。</li>
<li><strong>传输层</strong><br> 传输层是OSI模型中最重要的一层，主要负责分割、组合数据，实现端到端的逻辑。<br> 数据在上3层是整体的，到了这一层开始分割，分割后的数据成为<strong>段</strong>（Segment）。<br> 三次握手、面向连接或非面向连接的服务、流量控制等都发生在这一层。<br> 常见的传输层协议有：TCP/UDP/SPX等。</li>
<li><strong>网络层</strong><br> 网络层是将网络地址翻译为物理地址，并决定数据从发送方路由到接收方。主要负责管理网络地址、定位设备、决定路由，<strong>路由器</strong>工作在该层。<br> 上层的数据<strong>段</strong>在这一层被分割，封装后叫做<strong>包</strong>（Packet），分为2种：用户数据包（Data packets）和路由更新包（Route update packets）。<br> 常见的网络层协议有：IP/RIP/OSPF等。</li>
<li><strong>数据链路层</strong><br> 数据链路层控制物理层与网络层之间的通信。主要负责物理传输的准备，包括物理地址寻址、CRC校验、错误通知、网络拓扑、流量控制、重发等。<br> MAC地址和<strong>交换机</strong>工作在这一层。<br> 上层传下来的的<strong>包</strong>在这一层被分割封装后叫做<strong>帧</strong>（Frame）。<br> 常见的数据链路层协议有：SDLC/STP/HDLC/帧中继等。</li>
<li><strong>物理层</strong><br> 物理层是实实在在的物理链路。它为上层协议提供了一个传输数据的物理媒体，如双绞线、同轴电缆。</li>
</ol>
<h1 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h1><p>TCP/IP是最基本的Internet协议，由网络层的IP与传输层的TCP构成。现在常说的TCP/IP并不一定指这两个具体的协议，而是指的TCP/IP协议族。</p>
<p>TCP/IP模型按层次分为4层：应用层、传输层、网际层和网络接口层。</p>
<ol>
<li>应用层<br> 应用层直接为用户的应用程序提供服务。</li>
<li>传输层<br> 传输层提供网络连接中的两台计算机间的数据传输。</li>
<li>网际层<br> 网络层是将网络地址翻译为物理地址，并决定数据从发送方路由到接收方。</li>
<li>网络接口层<br> 网络接口层负责处理网络连接的硬件部分。</li>
</ol>
<p><img src="/images/network/tcp-ip-4-layer.png" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Executor框架]]></title>
      <url>https://rogerfang.github.io/2017/01/17/Executor%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p>Java的线程既是<strong>工作单元</strong>，也是<strong>执行机制</strong>。从JDK 5开始，把工作单元与执行机制分离开来。工作单元包括<code>Runnable</code>和<code>Callable</code>，而执行机制由<code>Executor</code>框架提供。</p>
<h1 id="Executor框架"><a href="#Executor框架" class="headerlink" title="Executor框架"></a>Executor框架</h1><h2 id="Executor框架的两级调度模型"><a href="#Executor框架的两级调度模型" class="headerlink" title="Executor框架的两级调度模型"></a>Executor框架的两级调度模型</h2><blockquote>
<p>对于Sun JDK来说，它的Windows版和Linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条<strong>轻量级进程</strong>(LWP)中。<br>参见：<a href="https://rogerfang.github.io/2017/01/06/Java%E4%B8%8E%E7%BA%BF%E7%A8%8B/">Java与线程</a></p>
</blockquote>
<p>Executor框架的两级调度模型可以描述为：在上层，Java多线程程序通常把应用分解为若干个任务，然后使用<strong>用户级的调度器</strong>（Executor框架）将这些任务映射为固定数量的线程；在底层，操作系统内核将这些线程映射到硬件处理器上。<br><img src="../images/javase/executor-two-level-scheduling-model.png" alt=""></p>
<h2 id="Executor框架的结构"><a href="#Executor框架的结构" class="headerlink" title="Executor框架的结构"></a>Executor框架的结构</h2><p>Executor框架主要由3部分组成：</p>
<ol>
<li><strong>任务</strong><br> 被执行的任务需要实现的接口： <code>Runnable</code>或者<code>Callable</code></li>
<li><strong>任务的执行</strong><br> 包括任务执行机制的核心接口<code>Executor</code>，以及继承自<code>Executor</code>的<code>ExecutorService</code>接口。<br> Executor框架有两个关键类实现了<code>ExecutorService</code>接口：<code>ThreadPoolExecutor</code>和<code>ScheduledThreadPoolExecutor</code>。</li>
<li><strong>异步计算的结果</strong><br> 包括接口<code>Future</code>和其实现类<code>FutureTask</code>。</li>
</ol>
<p>Executor框架的类与接口<br><img src="/images/javase/executor-framework-interface-class.png" alt=""></p>
<p>Executor框架的使用示意图<br><img src="/images/javase/executor-framework-use.png" alt=""></p>
<h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p><code>ThreadPoolExecutor</code>通常使用<code>Executors</code>工厂类来创建，可以创建以下3种类型：</p>
<ol>
<li>FixedThreadPool<br> <code>Executors.newFixedThreadPool(int)</code>适用于为了满足资源管理的需求，而需要限制当前线程数量的应用场景，适用于负载比较重的服务器。<br> 工作队列<code>workQueue</code>使用的是<code>LinkedBlockingQueue</code>，容量为<code>Integer.MAX_VALUE</code>。</li>
<li>SingleThreadExecutor<br> <code>Executors.newSingleThreadExecutor()</code>适用于需要保证顺序地执行各个任务；并且在任意时间点，不会有多个线程是活动的应用场景。<br> 工作队列<code>workQueue</code>使用的是<code>LinkedBlockingQueue</code>。容量为<code>Integer.MAX_VALUE</code>。</li>
<li>CachedThreadPool<br> <code>Executors.newCachedThreadPool()</code>适用于执行很多的短期异步任务的小程序，或者是负载较轻的服务器。<code>corePoolSize</code>为0，<code>maximumPoolSize</code>被设置为<code>Integer.MAX_VALUE</code>，即无界的。<br> 作队列<code>workQueue</code>使用的是<code>SynchronousQueue</code>。</li>
</ol>
<p>FixedThreadPool和SingleThreadExecutor使用无界队列<code>LinkedBlockingQueue</code>作为线程池的工作队列。CachedThreadPool使用没有容量的<code>SynchronousQueue</code>作为线程池的工作队列，但是CachedThreadPool的<code>maximumPoolSize</code>是无界的。这意味着，<strong>如果主线程提交任务的速度高于<code>maximumPool</code>中处理任务的速度时，CachedThreadPool会不断创建线程</strong>。极端情况下，CachedThreadPool会因为创建过多线程而耗尽CPU和内存资源。</p>
<h3 id="ScheduledThreadPoolExecutor"><a href="#ScheduledThreadPoolExecutor" class="headerlink" title="ScheduledThreadPoolExecutor"></a>ScheduledThreadPoolExecutor</h3><p><code>ScheduledThreadPoolExecutor</code>可以在给定的延迟后运行命令或者定期执行命令，使用<code>Executors</code>工厂类来创建，由2种类型：</p>
<ol>
<li>ScheduledThreadPoolExecutor<br> 包含若干个线程的<code>ScheduledThreadPoolExecutor</code>。</li>
<li>SingleScheduledThreadPoolExecutor<br> 只包含一个线程的<code>ScheduledThreadPoolExecutor</code>。</li>
</ol>
<p><code>ScheduledThreadPoolExecutor</code>会把调度任务（ScheduledFutureTask）放到<code>DelayQueue</code>中。</p>
<h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p><code>Future</code>接口和其实现类<code>FutureTask</code>代表了异步计算的结果。<br>FutureTask实现了两个接口，Runnable和Future，所以它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt;</span></div><div class="line"></div><div class="line"><span class="title">public</span> <span class="title">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt;</div></pre></td></tr></table></figure>
<p><code>FutureTask</code>除了实现了<code>Future</code>接口外，还实现了<code>Runnable</code>接口，因此<code>FutureTask</code>可以交给<code>Executor</code>执行，也可以由调用线程直接执行（<code>FutureTask.run()</code>）。</p>
<h3 id="FutureTask的状态"><a href="#FutureTask的状态" class="headerlink" title="FutureTask的状态"></a>FutureTask的状态</h3><p>FutureTask可以处于以下3种状态：</p>
<ol>
<li>未启动<br> <code>FutureTask.run()</code>被创建但是还没有被执行之前，FutureTask处于未启动状态。</li>
<li>已启动<br> <code>FutureTask.run()</code>方法被执行的过程中，FutureTask处于已启动状态。</li>
<li>完成<br> <code>FutureTask.run()</code>执行完后正常结束，或被取消（<code>Future.cancel(...)</code>），或执行时抛出异常而结束，FutureTask处于完成状态。</li>
</ol>
<p><img src="/images/javase/futuretask-get-cancel-state.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTaskTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">        ExecutorService es = Executors.newCachedThreadPool();</div><div class="line"></div><div class="line">        Task task = <span class="keyword">new</span> Task();</div><div class="line">        Future&lt;String&gt; future = es.submit(task);</div><div class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;String&gt;(task);</div><div class="line">        <span class="comment">// 将FutureTask交给线程池执行</span></div><div class="line">        es.submit(futureTask);</div><div class="line">        <span class="comment">// FutureTask直接交给Thread执行</span></div><div class="line">        <span class="comment">// new Thread(futureTask).start();</span></div><div class="line"></div><div class="line">        System.out.println(future.get());</div><div class="line">        System.out.println(futureTask.get());</div><div class="line"></div><div class="line">        es.shutdown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            Thread.sleep(<span class="number">2000</span>);</div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</div><div class="line">                sum += i;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="string">"sum="</span>+sum;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[线程池]]></title>
      <url>https://rogerfang.github.io/2017/01/17/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      <content type="html"><![CDATA[<p>线程池带来的好处：</p>
<ol>
<li><strong>降低资源消耗</strong><br> 通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li><strong>提高响应速度</strong><br> 当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>
<li><strong>提高线程的可管理性</strong><br> 线程是稀缺资源，使用线程池可以统一分配、调优和监控。</li>
</ol>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>当提交一个新任务到线程池时，线程池的主要处理流程<br><img src="/images/javase/thread-pool-process.png" alt=""></p>
<ol>
<li>判断<strong>核心线程池</strong>里的线程是否都在执行任务。<br> 如果不是，则创建一个新的工作线程来执行任务；<br> 如果核心线程池的线程都在执行任务，则进入下个流程。</li>
<li>判断<strong>工作队列</strong>是否已满。<br> 如果没有，则将新提交的任务存储在这个工作队列；<br> 如果已满，则进入下个流程。</li>
<li>判断线程池的线程是否都处于工作状态。<br> 如果不是，则创建一个新的工作线程来执行任务；<br> 如果是的，则交给饱和策略来处理这个任务。</li>
</ol>
<p><code>ThreadPoolExecutor</code>执行<code>execute()</code>方法的示意图<br><img src="/images/javase/thread-pool-executor-process.png" alt=""><br>ThreadPoolExecutor执行<code>execute()</code>分4种情况：</p>
<ol>
<li>如果当前运行的线程少于<code>corePoolSize</code>，则创建新的线程来执行任务。（该步骤需要获取全局锁）</li>
<li>如果运行的线程等于或多于<code>corePoolSize</code>，则将任务加入到<code>BlockingQueue</code>。</li>
<li>如果无法将任务加入到<code>BlockingQueue</code>（队列已满），则创建新的线程来执行任务。（该步骤需要获取全局锁）</li>
<li>如果创建新线程将使当前运行的线程超出<code>maximumPoolSize</code>，任务将被拒绝，并调用<code>RejectedExecutionHandler</code>的<code>rejectedExecution()</code>方法。</li>
</ol>
<h1 id="线程池的使用"><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h1><p><img src="/images/javase/threaed-pool-executor.png" alt=""></p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * ThreadPoolExecutor构造方法</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                          <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                          <span class="keyword">long</span> keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                          ThreadFactory threadFactory,</div><div class="line">                          RejectedExecutionHandler handler)&#123;...&#125;</div></pre></td></tr></table></figure>
<p>不过在java doc中，并不提倡我们直接使用ThreadPoolExecutor，而是使用Executors类中提供的几个静态方法来创建线程池：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Executors.newCachedThreadPool();        <span class="comment">//创建一个线程池，缓冲池容量大小为Integer.MAX_VALUE</span></div><div class="line">Executors.newSingleThreadExecutor();   <span class="comment">//创建容量为1的线程池</span></div><div class="line">Executors.newFixedThreadPool(<span class="keyword">int</span>);    <span class="comment">//创建固定容量大小的线程池</span></div></pre></td></tr></table></figure></p>
<h2 id="corePoolSize（核心线程池的大小）"><a href="#corePoolSize（核心线程池的大小）" class="headerlink" title="corePoolSize（核心线程池的大小）"></a>corePoolSize（核心线程池的大小）</h2><p>corePoolSize，线程池的基本大小。当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于corePoolSize就不会再创建。</p>
<p>调用<code>prestartAllCoreThreads()</code>线程池会提前创建并启动所有基本线程。</p>
<h2 id="workQueue（任务队列）"><a href="#workQueue（任务队列）" class="headerlink" title="workQueue（任务队列）"></a>workQueue（任务队列）</h2><p>workQueue任务队列：用于保存等待执行的阻塞队列。<br>有以下几种选择：</p>
<ol>
<li>ArrayBlockingQueue<br> <code>ArrayBlockingQueue</code>是数组实现的线程安全的有界的阻塞队列，FIFO。</li>
<li>LinkedBlockingQueue<br> <code>LinkedBlockingQueue</code>是单向链表实现的阻塞队列，FIFO。</li>
<li>SynchronousQueue<br> <code>SynchronousQueue</code>是一个不存元素的阻塞队列。每一个插入操作必须等待另一个线程调用移除操作，否则一直处于阻塞状态。吞吐量高于<code>LinkedBlockingQueue</code>和<code>ArrayBlockingQueue</code>。</li>
<li>PriorityBlockingQueue<br> <code>PriorityBlockingQueue</code>是一个具有优先级的无界阻塞队列。</li>
</ol>
<h2 id="maximumPoolSize（线程池最大数量）"><a href="#maximumPoolSize（线程池最大数量）" class="headerlink" title="maximumPoolSize（线程池最大数量）"></a>maximumPoolSize（线程池最大数量）</h2><p>maximumPoolSize是线程池允许创建的最大线程数。如果任务队列满了，并且已创建的线程数小于maximumPoolSize，则线程池会创建新的线程执行任务。</p>
<p>如果使用了无界阻塞队列，则该参数就没有效果。</p>
<h2 id="ThreadFactory"><a href="#ThreadFactory" class="headerlink" title="ThreadFactory"></a>ThreadFactory</h2><p>ThreadFactory用于设置创建线程的工厂，可以通过线程工厂来给每个创建出来的线程设置更有意义的名字。</p>
<blockquote>
<p>Guava框架提供的<code>ThreadFactoryBuilder</code>可以快速给线程池里的线程设置有意义的名字。</p>
</blockquote>
<h2 id="RejectedExecutionHandler（饱和策略）"><a href="#RejectedExecutionHandler（饱和策略）" class="headerlink" title="RejectedExecutionHandler（饱和策略）"></a>RejectedExecutionHandler（饱和策略）</h2><p>RejectedExecutionHandler饱和策略：当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。默认情况下是<code>AbortPolicy</code>。<br>Java线程池框架提供了4种策略：</p>
<ul>
<li>AbortPolicy：直接抛出异常。</li>
<li>CallerRunsPolicy：只用调用者所在线程来运行任务。</li>
<li>DiscardPolicy：不处理，直接丢弃掉。</li>
<li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</li>
</ul>
<h2 id="keepAliveTime（线程活动保持时间）"><a href="#keepAliveTime（线程活动保持时间）" class="headerlink" title="keepAliveTime（线程活动保持时间）"></a>keepAliveTime（线程活动保持时间）</h2><p>线程池的工作线程空闲后，保持存活的时间。<br>任务多且任务执行时间较短，可以将该参数设置大点，提高线程的存活率。</p>
<h2 id="TimeUnit（线程活动保持时间的单位）"><a href="#TimeUnit（线程活动保持时间的单位）" class="headerlink" title="TimeUnit（线程活动保持时间的单位）"></a>TimeUnit（线程活动保持时间的单位）</h2><p>可选单位有:DAYS、HOURS、MINUTES、MILLISECONDS、MICROSECONDS、NANOSECONDS。</p>
<h1 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h1><p>可以使用两个方法向线程池提交任务：<code>execute()</code>和<code>submit()</code>。</p>
<h2 id="execute"><a href="#execute" class="headerlink" title="execute()"></a>execute()</h2><p><code>execute()</code>方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功。</p>
<h2 id="submit"><a href="#submit" class="headerlink" title="submit()"></a>submit()</h2><p><code>submit()</code>方法用于提交需要返回值的任务。线程池会返回一个<code>Future</code>类型的对象，通过该对象可以判断任务是否执行成功，并通过Future的<code>get()</code>方法获取返回值，<code>get()</code>方法会阻塞当前线程直到任务完成，<code>get(long timeout, TimeUnit unit)</code>方法会阻塞当前线程一段时间后立即返回，这时任务肯能没有执行完。</p>
<blockquote>
<p>submit()方法实际上将任务构造成了<code>FutureTask</code>然后调用execute()方法执行。</p>
</blockquote>
<h1 id="关闭线程池"><a href="#关闭线程池" class="headerlink" title="关闭线程池"></a>关闭线程池</h1><p>可以调用线程池的<code>shutdown()</code>或者<code>shutdownNow()</code>方法来关闭线程池。<br>原理：遍历线程池中的工作线程，然后逐个调用线程的<code>interrupt()</code>来中断线程，所以<strong>无法响应中断的任务可能无法终止</strong>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JUC集合框架(2): ConcurrentHashMap]]></title>
      <url>https://rogerfang.github.io/2017/01/16/JUC%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-2-ConcurrentHashMap/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span></div></pre></td></tr></table></figure>
<p><code>ConcurrentSkipHashMap</code>相当于线程安全的<code>HashMap</code>，它继承于<code>AbstractMap</code>类，并实现了<code>ConcurrentMap</code>接口。</p>
<p><strong>ConcurrentHashMap不允许key或value为null值</strong>。</p>
<h1 id="ConcurrentHashMap、HashMap和HashTable"><a href="#ConcurrentHashMap、HashMap和HashTable" class="headerlink" title="ConcurrentHashMap、HashMap和HashTable"></a>ConcurrentHashMap、HashMap和HashTable</h1><p>为什么要使用ConcurrentHashMap，而不是HashMap或者HashTable？</p>
<ol>
<li><p>线程不安全的HashMap<br> 在多线程环境下，使用HashMap进行put操作会导致HashMap中的Entry链表形成环形数据结构，从而使得在进行get等操作时引起死循环。</p>
</li>
<li><p>效率低下的HashTable<br> HashTable使用synchronized来保证线程安全，但是在线程竞争激烈的情况下效率低下。因为HashTable会对整个表进行加锁来实现同步，而JDK 1.8中的ConcurrentHashMap则使用更细粒度的锁来实现同步（对表中的某一列进行加锁）。</p>
</li>
</ol>
<h1 id="原理和结构"><a href="#原理和结构" class="headerlink" title="原理和结构"></a>原理和结构</h1><h2 id="JDK-1-8之前"><a href="#JDK-1-8之前" class="headerlink" title="JDK 1.8之前"></a>JDK 1.8之前</h2><p>JDK 1.8 之前的<code>ConcurrentHashMap</code>是通过<strong>锁分段</strong>来实现的，只有在同一个分段内才存在竞态关系。由<strong>Segment</strong>数组结构和<strong>HashEntry</strong>数组结构组成的。<br>一个ConcurrentHashMap里包含一个Segment数组，一个Segment里包含一个HashEntry数组。<br><img src="/images/juc/juc-concurrenthashmap-java7.png" alt=""></p>
<p><code>Segment</code>是一个可重入锁（ReentrantLock），在ConcurrentHashMap里扮演锁的角色。<code>HashEntry</code>用于存储键值，每个HashEntry是一个链表结构的元素。</p>
<p>每个Segment守护者一个HashEntry数组里面的元素，当对HashEntry数组里的数据进行修改时，必须首先获得与它对应的Segment锁。<br>Segment的结构和<code>HashMap</code>的结构类似，是一种数组和链表的结构。</p>
<h2 id="JDK-1-8"><a href="#JDK-1-8" class="headerlink" title="JDK 1.8"></a>JDK 1.8</h2><p>JDK 1.8中，<code>ConcurrentHashMap</code>的实现已经抛弃了Segment分段锁机制，大量的利用了volatile，final，CAS等lock-free技术来减少锁竞争对于性能的影响。<br><strong>CAS</strong>+<strong>Synchronized</strong>来保证并发更新的安全，底层依然采用<strong>数组+链表+红黑树</strong>的存储结构。但是为了做到并发，又增加了很多辅助的类，例如TreeBin，Traverser等对象内部类。</p>
<p>synchronized关键字锁住 table 中本次所操作对象的<strong>链表头</strong>。</p>
<p><img src="/images/juc/juc-concurrenthashmap-java8.png" alt=""></p>
<p>现在的实现中并没有用segment，而是延用 hashMap中单桶，定位到链表后，直接上锁，而后对链表就行操作，同样是将锁细化。</p>
<blockquote>
<p>Segment虽保留，但已经简化属性，仅仅是为了兼容旧版本。</p>
</blockquote>
<h1 id="JDK-1-8实现"><a href="#JDK-1-8实现" class="headerlink" title="JDK 1.8实现"></a>JDK 1.8实现</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 桶，大小是2的整数次幂</span></div><div class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</div><div class="line"><span class="comment">// hash表初始化或扩容时的一个控制位标识量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</div><div class="line"></div><div class="line"><span class="comment">// 一个过渡的table表，只在扩容的时候会用到</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</div></pre></td></tr></table></figure>
<h3 id="sizeCtl"><a href="#sizeCtl" class="headerlink" title="sizeCtl"></a>sizeCtl</h3><p><code>sizeCtl</code>属性是个控制标识位：</p>
<ul>
<li>0，默认初始值</li>
<li>负数，表示正在进行初始化或扩容操作控制标识符<ul>
<li>-1，表示正在初始化。</li>
<li>-N，表示有N-1个线程正在进行扩容操作。</li>
</ul>
</li>
<li>正数<ul>
<li>如果table未初始化，表示table需要初始化的大小；</li>
<li>如果table初始化完成，表示下一次扩容的扩容阈值，默认是table大小的0.75倍。实际容量&gt;=sizeCtl，则扩容。</li>
</ul>
</li>
</ul>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Node 是最核心的内部类，包装了key-value键值对。它和HashMap中的定义很相似，但是value和next属性设置为volatile，不允许调用<code>setValue()</code>方法直接改变Node的value域，增加了<code>find()</code>方法辅助<code>map.get()</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">    <span class="keyword">final</span> K key;</div><div class="line">    <span class="keyword">volatile</span> V val;</div><div class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</div><div class="line"></div><div class="line">    Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.hash = hash;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.val = val;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Virtualized support for map.get(); overridden in subclasses.</div><div class="line">     */</div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                K ek;</div><div class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</div><div class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h3><p>当链表长度过长的时候，会转换为TreeNode。<br>但是与HashMap不相同的是，它并不是直接转换为红黑树，而是把这些结点包装成<code>TreeNode</code>放在<code>TreeBin</code>对象中，由<code>TreeBin</code>完成对红黑树的包装。</p>
<p>而且<code>TreeNode</code>在ConcurrentHashMap集成自<code>Node</code>类，而并非HashMap中的集成自<code>LinkedHashMap.Entry&lt;K,V&gt;</code>类，也就是说TreeNode带有next指针，这样做的目的是方便基于TreeBin的访问。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Nodes for use in TreeBins</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></div><div class="line">    TreeNode&lt;K,V&gt; left;</div><div class="line">    TreeNode&lt;K,V&gt; right;</div><div class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></div><div class="line">    <span class="keyword">boolean</span> red;</div><div class="line"></div><div class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next,</div><div class="line">             TreeNode&lt;K,V&gt; parent) &#123;</div><div class="line">        <span class="keyword">super</span>(hash, key, val, next);</div><div class="line">        <span class="keyword">this</span>.parent = parent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> findTreeNode(h, k, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the TreeNode (or null if not found) for the given key</div><div class="line">     * starting at given root.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">findTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</div><div class="line">            TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</div><div class="line">            <span class="keyword">do</span>  &#123;</div><div class="line">                <span class="keyword">int</span> ph, dir; K pk; TreeNode&lt;K,V&gt; q;</div><div class="line">                TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;</div><div class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</div><div class="line">                    p = pl;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</div><div class="line">                    p = pr;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</div><div class="line">                    <span class="keyword">return</span> p;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</div><div class="line">                    p = pr;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</div><div class="line">                    p = pl;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</div><div class="line">                          (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</div><div class="line">                         (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</div><div class="line">                    p = (dir &lt; <span class="number">0</span>) ? pl : pr;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.findTreeNode(h, k, kc)) != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> q;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    p = pl;</div><div class="line">            &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="TreeBin"><a href="#TreeBin" class="headerlink" title="TreeBin"></a>TreeBin</h3><p>这个类并不负责包装用户的key、value信息，而是包装的很多TreeNode节点。它代替了TreeNode的根节点，也就是说在实际的ConcurrentHashMap“数组”中，存放的是TreeBin对象，而不是TreeNode对象，这是与HashMap的区别。另外这个类还带有了读写锁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBin</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    TreeNode&lt;K,V&gt; root;</div><div class="line">    <span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</div><div class="line">    <span class="keyword">volatile</span> Thread waiter;</div><div class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> lockState;</div><div class="line">    <span class="comment">// values for lockState</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WRITER = <span class="number">1</span>; <span class="comment">// set while holding write lock</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WAITER = <span class="number">2</span>; <span class="comment">// set when waiting for write lock</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READER = <span class="number">4</span>; <span class="comment">// increment value for setting read lock</span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Tie-breaking utility for ordering insertions when equal</div><div class="line">     * hashCodes and non-comparable. We don't require a total</div><div class="line">     * order, just a consistent insertion rule to maintain</div><div class="line">     * equivalence across rebalancings. Tie-breaking further than</div><div class="line">     * necessary simplifies testing a bit.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tieBreakOrder</span><span class="params">(Object a, Object b)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> d;</div><div class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span> || b == <span class="keyword">null</span> ||</div><div class="line">            (d = a.getClass().getName().</div><div class="line">             compareTo(b.getClass().getName())) == <span class="number">0</span>)</div><div class="line">            d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ?</div><div class="line">                 -<span class="number">1</span> : <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> d;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates bin with initial set of nodes headed by b.</div><div class="line">     */</div><div class="line">    TreeBin(TreeNode&lt;K,V&gt; b) &#123;</div><div class="line">        <span class="keyword">super</span>(TREEBIN, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">this</span>.first = b;</div><div class="line">        TreeNode&lt;K,V&gt; r = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="keyword">null</span>; x = next) &#123;</div><div class="line">            next = (TreeNode&lt;K,V&gt;)x.next;</div><div class="line">            x.left = x.right = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</div><div class="line">                x.parent = <span class="keyword">null</span>;</div><div class="line">                x.red = <span class="keyword">false</span>;</div><div class="line">                r = x;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                K k = x.key;</div><div class="line">                <span class="keyword">int</span> h = x.hash;</div><div class="line">                Class&lt;?&gt; kc = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;</div><div class="line">                    <span class="keyword">int</span> dir, ph;</div><div class="line">                    K pk = p.key;</div><div class="line">                    <span class="keyword">if</span> ((ph = p.hash) &gt; h)</div><div class="line">                        dir = -<span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</div><div class="line">                        dir = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</div><div class="line">                              (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</div><div class="line">                             (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</div><div class="line">                        dir = tieBreakOrder(k, pk);</div><div class="line">                        TreeNode&lt;K,V&gt; xp = p;</div><div class="line">                    <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</div><div class="line">                        x.parent = xp;</div><div class="line">                        <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</div><div class="line">                            xp.left = x;</div><div class="line">                        <span class="keyword">else</span></div><div class="line">                            xp.right = x;</div><div class="line">                        r = balanceInsertion(r, x);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.root = r;</div><div class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="ForwardingNode"><a href="#ForwardingNode" class="headerlink" title="ForwardingNode"></a>ForwardingNode</h3><p>并不是我们传统的包含key-value的节点，只是一个标志节点，hash值为-1，并且指向nextTable，提供find方法而已。</p>
<p>只有table发生扩容的时候，ForwardingNode才会发挥作用，作为一个占位符放在table中表示当前节点为null或则已经被移动。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * A node inserted at head of bins during transfer operations.</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</div><div class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</div><div class="line">        <span class="keyword">super</span>(MOVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">this</span>.nextTable = tab;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</div><div class="line">        <span class="comment">// loop to avoid arbitrarily deep recursion on forwarding nodes</span></div><div class="line">        outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;</div><div class="line">            Node&lt;K,V&gt; e; <span class="keyword">int</span> n;</div><div class="line">            <span class="keyword">if</span> (k == <span class="keyword">null</span> || tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||</div><div class="line">                (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">int</span> eh; K ek;</div><div class="line">                <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;</div><div class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">                <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</div><div class="line">                        tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</div><div class="line">                        <span class="keyword">continue</span> outer;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span></div><div class="line">                        <span class="keyword">return</span> e.find(h, k);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Unsafe和CAS"><a href="#Unsafe和CAS" class="headerlink" title="Unsafe和CAS"></a>Unsafe和CAS</h2><p>在ConcurrentHashMap中，随处可以看到U, 大量使用了U.compareAndSwapXXX的方法，这个方法是<strong>利用一个CAS算法实现无锁化的修改值的操作</strong>，它可以大大降低锁带来的性能消耗。</p>
<p>算法的基本思想就是：不断地去比较当前内存中的变量值与你指定的一个变量值是否相等，如果相等，则接受你指定的修改的值，否则拒绝你的操作。因为当前线程中的值已经不是最新的值，你的修改很可能会覆盖掉其他线程修改的结果。</p>
<h3 id="unsafe静态块"><a href="#unsafe静态块" class="headerlink" title="unsafe静态块"></a>unsafe静态块</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Unsafe mechanics</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe U;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SIZECTL;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TRANSFERINDEX;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> BASECOUNT;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> CELLSBUSY;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> CELLVALUE;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ABASE;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ASHIFT;</div><div class="line"></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        U = sun.misc.Unsafe.getUnsafe();</div><div class="line">        Class&lt;?&gt; k = ConcurrentHashMap.class;</div><div class="line">        SIZECTL = U.objectFieldOffset</div><div class="line">            (k.getDeclaredField(<span class="string">"sizeCtl"</span>));</div><div class="line">        TRANSFERINDEX = U.objectFieldOffset</div><div class="line">            (k.getDeclaredField(<span class="string">"transferIndex"</span>));</div><div class="line">        BASECOUNT = U.objectFieldOffset</div><div class="line">            (k.getDeclaredField(<span class="string">"baseCount"</span>));</div><div class="line">        CELLSBUSY = U.objectFieldOffset</div><div class="line">            (k.getDeclaredField(<span class="string">"cellsBusy"</span>));</div><div class="line">        Class&lt;?&gt; ck = CounterCell.class;</div><div class="line">        CELLVALUE = U.objectFieldOffset</div><div class="line">            (ck.getDeclaredField(<span class="string">"value"</span>));</div><div class="line">        Class&lt;?&gt; ak = Node[].class;</div><div class="line">        ABASE = U.arrayBaseOffset(ak);</div><div class="line">        <span class="keyword">int</span> scale = U.arrayIndexScale(ak);</div><div class="line">        <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"data type scale not a power of two"</span>);</div><div class="line">        ASHIFT = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三个原子操作"><a href="#三个原子操作" class="headerlink" title="三个原子操作"></a>三个原子操作</h3><p>ConcurrentHashMap定义了三个原子操作，用于对指定位置的节点进行操作。正是这些原子操作保证了ConcurrentHashMap的线程安全。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获得位置i上的Node节点</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 利用CAS设置位置i上的Node节点。</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</span></span></div><div class="line">                                    Node&lt;K,V&gt; c, Node&lt;K,V&gt; v) &#123;</div><div class="line">    <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * volatile写，设置节点位置的值。在加锁的情况下使用</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">setTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i, Node&lt;K,V&gt; v)</span> </span>&#123;</div><div class="line">    U.putObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, v);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p><code>ConcurrentHashMap</code>的构造方法仅仅是设置了一些参数而已。</p>
<p>而整个table的初始化是在向ConcurrentHashMap中<strong>插入元素</strong>的时候发生的。如调用<code>put()</code>、<code>computeIfAbsent()</code>、<code>compute()</code>、<code>merge()</code>等方法的时候，调用时机是检查<code>table==null</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</div><div class="line">               MAXIMUM_CAPACITY :</div><div class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</div><div class="line">    <span class="keyword">this</span>.sizeCtl = cap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.sizeCtl = DEFAULT_CAPACITY;</div><div class="line">    putAll(m);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></div><div class="line">                         <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel) &#123;</div><div class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></div><div class="line">        initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></div><div class="line">    <span class="keyword">long</span> size = (<span class="keyword">long</span>)(<span class="number">1.0</span> + (<span class="keyword">long</span>)initialCapacity / loadFactor);</div><div class="line">    <span class="keyword">int</span> cap = (size &gt;= (<span class="keyword">long</span>)MAXIMUM_CAPACITY) ?</div><div class="line">        MAXIMUM_CAPACITY : tableSizeFor((<span class="keyword">int</span>)size);</div><div class="line">    <span class="keyword">this</span>.sizeCtl = cap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="初始化initTable"><a href="#初始化initTable" class="headerlink" title="初始化initTable"></a>初始化initTable</h2><p>初始化方法主要应用了关键属性<code>sizeCtl</code>，如果这个值〈0，表示其他线程正在进行初始化，就放弃这个操作。</p>
<p>在这也可以看出ConcurrentHashMap的<strong>初始化只能由一个线程完成</strong>。如果获得了初始化权限，就用CAS方法将sizeCtl置为-1，防止其他线程进入。初始化数组后，将sizeCtl的值改为0.75*n。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</div><div class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</div><div class="line">        	<span class="comment">// 有其他线程正在进行初始化操作，把线程挂起。</span></div><div class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123; <span class="comment">//利用CAS方法把sizectl的值置为-1，表示正在进行初始化。</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</div><div class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</div><div class="line">                    table = tab = nt;</div><div class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>); <span class="comment">//相当于0.75*n 设置一个扩容的阈值。</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                sizeCtl = sc;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tab;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="扩容transfer"><a href="#扩容transfer" class="headerlink" title="扩容transfer"></a>扩容transfer</h2><p>transfer扩容操作：<br>1)单线程构建两倍容量的nextTable；<br>2)允许多线程复制原table元素到nextTable。</p>
<p>节点从table移动到nextTable，大体思想是遍历、复制的过程:</p>
<ol>
<li>首先根据运算得到需要遍历的次数i，然后利用tabAt方法获得i位置的元素f，初始化一个forwardNode实例fwd。</li>
<li>如果f == null，则在table中的i位置放入fwd，这个过程是采用Unsafe.compareAndSwapObjectf方法实现的，很巧妙的实现了节点的并发移动。</li>
<li>如果f是链表的头节点，节点上锁（synchronized），就构造一个反序链表，把他们分别放在nextTable的i和i+n的位置上，移动完成，采用Unsafe.putObjectVolatile方法给table原位置赋值fwd。</li>
<li>如果f是TreeBin节点，节点上锁（synchronized），也做一个反序处理，并判断是否需要untreeify，把处理的结果分别放在nextTable的i和i+n的位置上，移动完成，同样采用Unsafe.putObjectVolatile方法给table原位置赋值fwd。</li>
</ol>
<p>遍历过所有的节点以后就完成了复制工作，把table指向nextTable，并更新sizeCtl为新数组大小的0.75倍 ，扩容完成。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Moves and/or copies the nodes in each bin to new table.</div><div class="line"> * 将table中每一个bin（桶位）的Node移动或复制到nextTable</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = tab.length, stride;</div><div class="line">    <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</div><div class="line">        stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></div><div class="line">    <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>]; <span class="comment">//构造一个nextTable对象 它的容量是原来的两倍</span></div><div class="line">            nextTab = nt;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></div><div class="line">            sizeCtl = Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        nextTable = nextTab;</div><div class="line">        transferIndex = n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> nextn = nextTab.length;</div><div class="line">    ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab); <span class="comment">// 构造一个连节点指针，用于标志位。</span></div><div class="line">    <span class="keyword">boolean</span> advance = <span class="keyword">true</span>; <span class="comment">//并发扩容的关键属性。如果等于true，说明这个节点已经处理过。</span></div><div class="line">    <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</div><div class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</div><div class="line">        <span class="comment">//这个while循环体的作用就是在控制i-- ，通过i--可以依次遍历原hash表中的节点</span></div><div class="line">        <span class="keyword">while</span> (advance) &#123;</div><div class="line">            <span class="keyword">int</span> nextIndex, nextBound;</div><div class="line">            <span class="keyword">if</span> (--i &gt;= bound || finishing)</div><div class="line">                advance = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</div><div class="line">                i = -<span class="number">1</span>;</div><div class="line">                advance = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</div><div class="line">                     (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</div><div class="line">                      nextBound = (nextIndex &gt; stride ?</div><div class="line">                                   nextIndex - stride : <span class="number">0</span>))) &#123;</div><div class="line">                bound = nextBound;</div><div class="line">                i = nextIndex - <span class="number">1</span>;</div><div class="line">                advance = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</div><div class="line">            <span class="keyword">int</span> sc;</div><div class="line">            <span class="keyword">if</span> (finishing) &#123; <span class="comment">// 如果所有的节点都已经完成复制工作，就把nextTable赋值给table，清空临时对象nextTable</span></div><div class="line">                nextTable = <span class="keyword">null</span>;</div><div class="line">                table = nextTab;</div><div class="line">                sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 利用CAS方法更新这个扩容阈值，在这里面sizectl值减一，说明新加入一个线程参与到扩容操作</span></div><div class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</div><div class="line">                <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                finishing = advance = <span class="keyword">true</span>;</div><div class="line">                i = n; <span class="comment">// recheck before commit</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果遍历到的节点为空 则放入ForwardingNode连接点指针</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</div><div class="line">            advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</div><div class="line">		<span class="comment">// 如果遍历到ForwardingNode节点，说明这个点已经被处理过了，直接跳过。这里是控制并发扩容的核心</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</div><div class="line">            advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        	<span class="comment">// 节点上锁</span></div><div class="line">            <span class="keyword">synchronized</span> (f) &#123;</div><div class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</div><div class="line">                    Node&lt;K,V&gt; ln, hn;</div><div class="line">                    <span class="comment">// 如果fh&gt;=0 证明这是一个Node节点</span></div><div class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</div><div class="line">                        <span class="keyword">int</span> runBit = fh &amp; n;</div><div class="line">                        <span class="comment">// 以下的部分在完成的工作是构造两个链表：一个是原链表，另一个是原链表的反序排列</span></div><div class="line">                        Node&lt;K,V&gt; lastRun = f;</div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</div><div class="line">                            <span class="keyword">int</span> b = p.hash &amp; n;</div><div class="line">                            <span class="keyword">if</span> (b != runBit) &#123;</div><div class="line">                                runBit = b;</div><div class="line">                                lastRun = p;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</div><div class="line">                            ln = lastRun;</div><div class="line">                            hn = <span class="keyword">null</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">else</span> &#123;</div><div class="line">                            hn = lastRun;</div><div class="line">                            ln = <span class="keyword">null</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</div><div class="line">                            <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</div><div class="line">                            <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</div><div class="line">                                ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 在nextTable的i位置上插入一个链表</span></div><div class="line">                        setTabAt(nextTab, i, ln);</div><div class="line">                        <span class="comment">// 在nextTable的i+n的位置上插入另一个链表</span></div><div class="line">                        setTabAt(nextTab, i + n, hn);</div><div class="line">                        <span class="comment">// 在table的i位置上插入forwardNode节点，表示已经处理过该节点</span></div><div class="line">                        setTabAt(tab, i, fwd);</div><div class="line">                        <span class="comment">// 设置advance为true，返回到上面的while循环中，就可以执行i--操作</span></div><div class="line">                        advance = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 对TreeBin对象进行处理，与上面的过程类似</span></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</div><div class="line">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</div><div class="line">                        TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                        TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                        <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</div><div class="line">                        <span class="comment">// 构造正序和反序两个链表</span></div><div class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                            <span class="keyword">int</span> h = e.hash;</div><div class="line">                            TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</div><div class="line">                                (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                            <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</div><div class="line">                                <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</div><div class="line">                                    lo = p;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    loTail.next = p;</div><div class="line">                                loTail = p;</div><div class="line">                                ++lc;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</div><div class="line">                                    hi = p;</div><div class="line">                                <span class="keyword">else</span></div><div class="line">                                    hiTail.next = p;</div><div class="line">                                hiTail = p;</div><div class="line">                                ++hc;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 如果扩容后已经不再需要tree的结构，反向转换为链表结构</span></div><div class="line">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</div><div class="line">                            (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</div><div class="line">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</div><div class="line">                            (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</div><div class="line">                        <span class="comment">// 在nextTable的i位置上插入一个链表</span></div><div class="line">                        setTabAt(nextTab, i, ln);</div><div class="line">                        <span class="comment">// 在nextTable的i+n的位置上插入另一个链表</span></div><div class="line">                        setTabAt(nextTab, i + n, hn);</div><div class="line">                        <span class="comment">// 在table的i位置上插入forwardNode节点，表示已经处理过该节点</span></div><div class="line">                        setTabAt(tab, i, fwd);</div><div class="line">                        <span class="comment">// 设置advance为true，返回到上面的while循环中，就可以执行i--操作</span></div><div class="line">                        advance = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://www.importnew.com/22007.html" target="_blank" rel="external">http://www.importnew.com/22007.html</a><br><a href="http://www.jianshu.com/p/c0642afe03e0" target="_blank" rel="external">http://www.jianshu.com/p/c0642afe03e0</a><br><a href="http://www.cnblogs.com/huaizuo/p/5413069.html" target="_blank" rel="external">http://www.cnblogs.com/huaizuo/p/5413069.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JUC集合框架(1): 概述]]></title>
      <url>https://rogerfang.github.io/2017/01/16/JUC%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-1-%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>JUC包中集合类可以分为3部分：List和Set、Map以及Queue。</p>
<h1 id="List和Set"><a href="#List和Set" class="headerlink" title="List和Set"></a>List和Set</h1><p>JUC集合包中List和Set的实现类有：</p>
<ul>
<li>CopyOnWriteArrayList<br>  <code>CopyOnWriteArrayList</code>相当于线程安全的<code>ArrayList</code>，它实现了<code>List</code>接口。</li>
<li>CopyOnWriteArraySet<br>  <code>CopyOnWriteArraySet</code>相当于线程安全的<code>HashSet</code>，它继承于<code>AbstractSet</code>类。它是基于<code>CopyOnWriteArrayList</code>实现的。</li>
<li>ConcurrentSkipListSet<br>  <code>ConcurrentSkipListSet</code>相当于线程安全的<code>TreeSet</code>，它继承于<code>AbstractSet</code>类，并实现了<code>NavigableSet</code>接口。它是基于<code>ConcurrentSkipListMap</code>实现的。</li>
</ul>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>JUC集合包中Map的实现类有：</p>
<ul>
<li>ConcurrentSkipHashMap<br>  <code>ConcurrentSkipHashMap</code>相当于线程安全的<code>HashMap</code>，它继承于<code>AbstractMap</code>类，并实现了<code>ConcurrentMap</code>接口。</li>
<li>ConcurrentSkipListMap<br>  <code>ConcurrentSkipListMap</code>相当于线程安全的<code>TreeMap</code>，它继承于<code>AbstractMap</code>类，并实现了<code>ConcurrentNavigableMap</code>接口。通过<strong>跳表</strong>实现的。</li>
</ul>
<h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><p>JUC集合包中Queue的实现类有:</p>
<ul>
<li>ArrayBlockingQueue<br>  <code>ArrayBlockingQueue</code>是<strong>数组</strong>实现的线程安全的有界的阻塞队列，FIFO。</li>
<li>LinkedBlockingQueue<br>  <code>LinkedBlockingQueue</code>是<strong>单向链表</strong>实现的阻塞队列，FIFO。</li>
<li>LinkedBlockingDeque<br>  <code>LinkedBlockingDeque</code>是<strong>双向链表</strong>实现的阻塞队列，FIFO/LIFO</li>
<li>ConcurrentLinkedQueue<br>  <code>ConcurrentLinkedQueue</code>是<strong>单向链表</strong>实现的无界队列，FIFO。</li>
<li>ConcurrentLinkedDeque。<br>  <code>ConcurrentLinkedDeque</code>是<strong>双向链表</strong>实现的无界队列，FIFO/LIFO。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: 并发工具类-Exchanger]]></title>
      <url>https://rogerfang.github.io/2017/01/15/Lock-%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-Exchanger/</url>
      <content type="html"><![CDATA[<p>Exchanger是一个用于线程间协作的工具类，可以进行<strong>线程间的数据交换</strong>。<br>它提供一个<strong>同步点</strong>，在这个同步点，两个线程可以交换彼此的数据。这两个线程通过<code>exchange(V x)</code>方法交换数据，如果第一个线程先执行<code>exchange(V x)</code>方法，它会一直等待第二个线程也执行<code>exchange(V x)</code>方法，当两个线程同时到达同步点时，这两个线程就可以交换数据。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: 并发工具类-Semaphore]]></title>
      <url>https://rogerfang.github.io/2017/01/15/Lock-%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-Semaphore/</url>
      <content type="html"><![CDATA[<p>Semaphore（信号量）是用来控制同时访问特定资源的线程数量，它通过协调各个线程，以保证合理的使用公共资源。</p>
<p>信号量维护了一个信号量许可集。线程可以通过调用acquire()来获取信号量的许可；当信号量中有可用的许可时，线程能获取该许可；否则线程必须等待，直到有可用的许可为止。 线程可以通过release()来释放它所持有的信号量许可。</p>
<p>Semaphore是通过自定义同步器以实现<strong>共享锁</strong>来完成<code>acquire()</code>和<code>release()</code>操作的，并支持公平/非公平锁。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: 并发工具类-CyclicBarrier]]></title>
      <url>https://rogerfang.github.io/2017/01/15/Lock-%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-CyclicBarrier/</url>
      <content type="html"><![CDATA[<p>CyclicBarrier可以让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，所有被屏障拦截的线程才会继续运行。</p>
<h1 id="CountDownLatch和CyclicBarrier的区别"><a href="#CountDownLatch和CyclicBarrier的区别" class="headerlink" title="CountDownLatch和CyclicBarrier的区别"></a>CountDownLatch和CyclicBarrier的区别</h1><ol>
<li>CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许一组线程相互等待。</li>
<li>CountDownLatch的计数器无法被重置，只能使用一次；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier，能处理更为复杂的业务场景。</li>
<li>CountDownLatch通过自定义同步器（共享锁）实现的；而CyclicBarrier是通过重入锁ReentrantLock（排他锁）和Condition来实现的。</li>
</ol>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>CyclicBarrier是通过重入锁ReentrantLock和Condition实现的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** The lock for guarding barrier entry */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"><span class="comment">/** Condition to wait on until tripped */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition trip = lock.newCondition();</div></pre></td></tr></table></figure></p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(parties, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (parties &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    <span class="comment">// parties表示“必须同时到达barrier的线程个数”</span></div><div class="line">    <span class="keyword">this</span>.parties = parties;</div><div class="line">    <span class="comment">// count表示“处在等待状态的线程个数”</span></div><div class="line">    <span class="keyword">this</span>.count = parties;</div><div class="line">    <span class="comment">// barrierCommand表示“parties个线程到达barrier时，会优先执行的动作”</span></div><div class="line">    <span class="keyword">this</span>.barrierCommand = barrierAction;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="await"><a href="#await" class="headerlink" title="await()"></a>await()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> dowait(<span class="keyword">false</span>, <span class="number">0L</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (TimeoutException toe) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(toe); <span class="comment">// cannot happen</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Main barrier code, covering the various policies.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dowait</span><span class="params">(<span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></div><div class="line">    <span class="keyword">throws</span> InterruptedException, BrokenBarrierException,</div><div class="line">           TimeoutException &#123;</div><div class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">    <span class="comment">// 获取“排他锁(lock)”</span></div><div class="line">    lock.lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">    	<span class="comment">// 保存当前的generation</span></div><div class="line">        <span class="keyword">final</span> Generation g = generation;</div><div class="line"></div><div class="line">		<span class="comment">// 如果当前generation损坏，则抛出异常</span></div><div class="line">        <span class="keyword">if</span> (g.broken)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BrokenBarrierException();</div><div class="line"></div><div class="line">		<span class="comment">// 如果当前线程被中断，则通过breakBarrier()终止CyclicBarrier，唤醒CyclicBarrier中所有等待线程。</span></div><div class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</div><div class="line">            breakBarrier();</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> index = --count;</div><div class="line">        <span class="comment">// // 如果index=0，则意味着“有parties个线程到达barrier”。</span></div><div class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;  <span class="comment">// tripped</span></div><div class="line">            <span class="keyword">boolean</span> ranAction = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">final</span> Runnable command = barrierCommand;</div><div class="line">                <span class="keyword">if</span> (command != <span class="keyword">null</span>)</div><div class="line">                    command.run();</div><div class="line">                ranAction = <span class="keyword">true</span>;</div><div class="line">                <span class="comment">// 唤醒所有等待线程，并更新generation。</span></div><div class="line">                nextGeneration();</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!ranAction)</div><div class="line">                    breakBarrier();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// loop until tripped, broken, interrupted, or timed out</span></div><div class="line">        <span class="comment">// 当前线程一直阻塞，直到“有parties个线程到达barrier” 或 “当前线程被中断” 或 “超时”这3者之一发生，</span></div><div class="line">        <span class="comment">// 当前线程才继续执行。</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (!timed)</div><div class="line">                    trip.await();</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nanos &gt; <span class="number">0L</span>)</div><div class="line">                    nanos = trip.awaitNanos(nanos);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</div><div class="line">                <span class="keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;</div><div class="line">                    breakBarrier();</div><div class="line">                    <span class="keyword">throw</span> ie;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// We're about to finish waiting even if we had not</span></div><div class="line">                    <span class="comment">// been interrupted, so this interrupt is deemed to</span></div><div class="line">                    <span class="comment">// "belong" to subsequent execution.</span></div><div class="line">                    Thread.currentThread().interrupt();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 如果“当前generation已经损坏”，则抛出异常。</span></div><div class="line">            <span class="keyword">if</span> (g.broken)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BrokenBarrierException();</div><div class="line"></div><div class="line">			<span class="comment">// 如果“generation已经换代”，则返回index。</span></div><div class="line">            <span class="keyword">if</span> (g != generation)</div><div class="line">                <span class="keyword">return</span> index;</div><div class="line"></div><div class="line">			<span class="comment">// 如果是“超时等待”，并且时间已到，则通过breakBarrier()终止CyclicBarrier，唤醒CyclicBarrier中所有等待线程。</span></div><div class="line">            <span class="keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="number">0L</span>) &#123;</div><div class="line">                breakBarrier();</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在CyclicBarrier中，同一批的线程属于同一代，即同一个Generation；CyclicBarrier中通过generation对象，记录属于哪一代。<br>当有parties个线程到达barrier，generation就会被更新换代。</p>
<hr>
<p>感谢：<br><a href="http://www.cnblogs.com/skywang12345/p/3533995.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3533995.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: 并发工具类-CountDownLatch]]></title>
      <url>https://rogerfang.github.io/2017/01/15/Lock-%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB-CountDownLatch/</url>
      <content type="html"><![CDATA[<p>在JDK并发包提供了几个常用的并发工具类：CountDownLatch、CyclicBarrier、Semaphore提供了一种<strong>并发流程控制</strong>的手段，而Exchanger工具类提供了在<strong>线程间交换数据</strong>的一种手段。</p>
<p><strong>CountDownLatch允许一个或多个线程等待其他线程完成操作。</strong></p>
<h1 id="CountDownLatch和CyclicBarrier的区别"><a href="#CountDownLatch和CyclicBarrier的区别" class="headerlink" title="CountDownLatch和CyclicBarrier的区别"></a>CountDownLatch和CyclicBarrier的区别</h1><ol>
<li>CountDownLatch的作用是允许1或N个线程等待其他线程完成执行；而CyclicBarrier则是允许一组线程相互等待。</li>
<li>CountDownLatch的计数器无法被重置，只能使用一次；CyclicBarrier的计数器可以被重置后使用，因此它被称为是循环的barrier，能处理更为复杂的业务场景。</li>
<li>CountDownLatch通过自定义同步器（共享锁）实现的；而CyclicBarrier是通过重入锁ReentrantLock（排他锁）和Condition来实现的。</li>
</ol>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>CountDownLatch是通过自定义同步器以实现<strong>共享锁</strong>来完成<code>await()</code>和<code>countDown()</code>操作的。</p>
<p>CountDownLatch的await方法可以在多个线程中调用，当CountDownLatch的计数器为0后，调用await的方法都会依次返回。 也就是说可以多个线程同时在等待await方法返回，所以获取的是一个共享锁。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4982264981922014374L</span>;</div><div class="line"></div><div class="line">    Sync(<span class="keyword">int</span> count) &#123;</div><div class="line">        setState(count);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getState();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">     * 尝试获取共享锁。</div><div class="line">     * 如果"锁计数器=0"，即锁是可获取状态，则返回1；否则，锁是不可获取状态，则返回-1。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">     * 释放共享锁，将“锁计数器”的值减1</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">        <span class="comment">// Decrement count; signal when transition to zero</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> c = getState();</div><div class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">int</span> nextc = c-<span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (compareAndSetState(c, nextc))</div><div class="line">                <span class="keyword">return</span> nextc == <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>构造方法接收一个int类型的参数作为计数器，并初始化自定义的同步器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &lt; 0"</span>);</div><div class="line">    <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="await"><a href="#await" class="headerlink" title="await()"></a>await()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    sync.acquireSharedInterruptibly(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>acquireSharedInterruptibly()</code>的作用是获取共享锁。<br>如果当前线程是中断状态，则抛出异常<code>InterruptedException</code>。否则，调用<code>tryAcquireShared(arg)</code>尝试获取共享锁；尝试成功则返回，否则就调用<code>doAcquireSharedInterruptibly()</code>。<code>doAcquireSharedInterruptibly()</code>会使当前线程一直等待，直到当前线程获取到共享锁(或被中断)才返回。</p>
<h2 id="countDown"><a href="#countDown" class="headerlink" title="countDown()"></a>countDown()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync.releaseShared(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>releaseShared()</code>目的是让当前线程释放锁，首先会通过<code>tryReleaseShared()</code>去尝试释放共享锁。尝试成功，则直接返回；尝试失败，则通过<code>doReleaseShared()</code>去释放共享锁。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: Condition]]></title>
      <url>https://rogerfang.github.io/2017/01/15/Lock-Condition/</url>
      <content type="html"><![CDATA[<p>任意一个Java对象，都拥有一组监视器方法（定义在java.lang.Object上），主要包括<code>wait()</code>、<code>wait(long timeout)</code>、<code>notify()</code>、<code>notifyAll()</code>，这些方法与<code>synchronized</code>关键字配合，可以实现<strong>等待/通知机制</strong>。</p>
<p>Condition的作用是对锁进行更精确的控制，也提供了类似Object的监视器方法。<br>Condition中的<code>await()</code>方法相当于Object的<code>wait()</code>方法，Condition中的<code>signal()</code>方法相当于Object的<code>notify()</code>方法，Condition中的<code>signalAll()</code>相当于Object的<code>notifyAll()</code>方法。</p>
<blockquote>
<p>不同的是，Object中的监视器方法是和”同步锁”(synchronized关键字)配合使用的；而Condition是需要与”排他锁”/“共享锁”配合使用的。</p>
</blockquote>
<h1 id="Condition实现分析"><a href="#Condition实现分析" class="headerlink" title="Condition实现分析"></a>Condition实现分析</h1><p>ConditionObject是队列同步器AbstractQueuedSynchronizer的内部类，实现了Condition接口。因为Condition的操作需要获取相关联的锁，所以作为同步器的内部类也较为合理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionObject</span> <span class="keyword">implements</span> <span class="title">Condition</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></div></pre></td></tr></table></figure></p>
<p>Condition的实现主要包括：等待队列、等待、通知。</p>
<h2 id="等待队列"><a href="#等待队列" class="headerlink" title="等待队列"></a>等待队列</h2><p>等待队列是一个FIFO的队列，在队列中的每个节点都包含了一个线程引用，</p>
<blockquote>
<p>等待队列的节点复用了同步器中同步队列的节点定义<code>AbstractQueuedSynchronizer.Node</code>。</p>
</blockquote>
<p>一个Condition包含一个等待队列，Condition拥有首节点（firstWaiter）和尾节点（lastWaiter）。<br>尾节点的更新并没有像同步队列中使用CAS保证，原因在于调用<code>await()</code>方法的线程必定是获取了锁的线程，也就是说该过程是由锁来保证线程安全的。</p>
<blockquote>
<p>在Object监视器模型上，一个对象拥有一个同步队列和一个等待队列；而并发包中的Lock拥有一个同步队列和多个等待队列。</p>
</blockquote>
<h2 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h2><p>调用Condition的<code>await()</code>方法会使当前线程进入等待队列并释放锁，同时线程状态会变为等待状态。从队列的角度看，相当于同步队列的首节点（获取了锁的节点）移动到Condition的等待队列中（通过<code>addConditionWaiter()</code>方法把当前线程构造成一个新的节点）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Thread.interrupted())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</div><div class="line">        <span class="comment">// 当前线程加入到等待队列</span></div><div class="line">        Node node = addConditionWaiter();</div><div class="line">        <span class="comment">// 释放同步状态(锁)</span></div><div class="line">        <span class="keyword">int</span> savedState = fullyRelease(node);</div><div class="line">        <span class="keyword">int</span> interruptMode = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 循环处理被唤醒的过程</span></div><div class="line">        <span class="keyword">while</span> (!isOnSyncQueue(node)) &#123;</div><div class="line">            LockSupport.park(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="number">0</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)</div><div class="line">            interruptMode = REINTERRUPT;</div><div class="line">        <span class="keyword">if</span> (node.nextWaiter != <span class="keyword">null</span>) <span class="comment">// clean up if cancelled</span></div><div class="line">            unlinkCancelledWaiters();</div><div class="line">        <span class="keyword">if</span> (interruptMode != <span class="number">0</span>)</div><div class="line">            reportInterruptAfterWait(interruptMode);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>当等待队列中的节点被<strong>唤醒</strong>，则唤醒的节点尝试获取同步状态。如果不是通过其他线程调用<code>signal()</code>方法唤醒，而是对等待线程进行中断，则会抛出异常<code>InterruptedException</code>。</p>
<h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>调用Condition的<code>signal()</code>方法会唤醒等待队列中等待时间最长的节点（首节点），在唤醒节点之前，会将节点移到同步队列中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="comment">// 前置条件必须是获取了锁，在此进行检查</span></div><div class="line">    <span class="keyword">if</span> (!isHeldExclusively())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">    Node first = firstWaiter;</div><div class="line">    <span class="keyword">if</span> (first != <span class="keyword">null</span>)</div><div class="line">        doSignal(first);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>唤醒的过程</strong>：</p>
<ol>
<li>调用该方法的前置条件是当前线程必须获取了锁</li>
<li>接着获取等待队列的首节点，调用同步器的<code>enq(Node node)</code>方法将其移动到同步队列中</li>
<li>最后使用 LockSupport 唤醒节点中的线程。</li>
<li>被唤醒的额线程将从<code>await()</code>方法中的while循环中退出，进而调用同步器的<code>acquireQueued()</code>方法加入到获取同步状态的竞争中。</li>
<li>成功获取同步状态之后，被唤醒的线程将从先前调用的<code>await()</code>方法返回，此时已经成功获取锁。</li>
</ol>
<blockquote>
<p>Condition的<code>signalAll()</code>方法，相当于对等待队列中的每个节点均执行一次<code>signal()</code>方法，效果就是将等待队列中的所有节点全部移动到同步队列中，并唤醒每个节点的线程。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: LockSupport]]></title>
      <url>https://rogerfang.github.io/2017/01/15/Lock-LockSupport/</url>
      <content type="html"><![CDATA[<p>LockSupport工具类是用来创建锁Lock和其他同步类的基本线程阻塞原语。通过<code>park()</code>和<code>unpark()</code>方法来阻塞和唤醒线程。</p>
<p>LockSupport中的私有成员变量<code>UNSAFE</code>和<code>parkBlockerOffset</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> parkBlockerOffset;</div></pre></td></tr></table></figure></p>
<p><strong>UNSAFE</strong>：全名sun.misc.Unsafe用于可以直接操控内存，被JDK广泛用于自己的包中，如java.nio和java.util.concurrent。是JDK内部用的工具类。它通过暴露一些Java意义上说“不安全”的功能给Java层代码，来让JDK能够更多的使用Java代码来实现一些原本是平台相关的、需要使用native语言（例如C或C++）才可以实现的功能。该类不应该在JDK核心类库之外使用。</p>
<p><strong>parkBlockerOffset</strong>：parkBlocker在内存中的偏移量，而parkBlocker是Thread类中的一个成员，用于记录线程被阻塞时是被谁阻塞的（可以用于线程监控和分析工具来定位原因）。</p>
<blockquote>
<p>通过偏移量来获取和更改对象：这个parkBlocker就是在线程处于阻塞的情况下才会被赋值。线程都已经阻塞了，如果不通过这种内存的方法，而是直接调用线程内的方法，线程是不会回应调用的。</p>
</blockquote>
<hr>
<p>相关：<br><a href="https://my.oschina.net/readjava/blog/282882" target="_blank" rel="external">https://my.oschina.net/readjava/blog/282882</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: 读写锁ReentrantReadWriteLock]]></title>
      <url>https://rogerfang.github.io/2017/01/15/Lock-%E8%AF%BB%E5%86%99%E9%94%81ReentrantReadWriteLock/</url>
      <content type="html"><![CDATA[<p>之前提到的ReentrantLock是<strong>排他锁</strong>，也就是同一时刻只允许一个线程进行访问。而<strong>读写锁</strong>在同一时刻可以允许多个读线程进行访问，但是在写线程访问时，所有的读线程和写线程均会被阻塞。</p>
<blockquote>
<p>读写锁维护了一对锁，一个读锁和一个写锁，通过<strong>分离读锁和写锁</strong>，使得并发性相比一般的排他锁有了很大的提升。</p>
</blockquote>
<p>读写锁保证<strong>写操作对读操作的可见性</strong>以及并发性的提升，还简化了读写交互场景的编程方式。<br>在没有读写锁支持的时候（JDK 1.5之前），如果需要完成写操作对读操作的可见性，就要使用Java的<strong>等待/通知机制</strong>，当开始写操作时，后续的所有读操作进入等待状态，当写操作完成后并进行通知，所有等待的读操作才能继续执行（写操作之间依靠synchronized关键字进行同步），这样才能保证读操作读取到正确的数据，不会出现脏读。</p>
<h1 id="读写锁ReentrantReadWriteLock的特性"><a href="#读写锁ReentrantReadWriteLock的特性" class="headerlink" title="读写锁ReentrantReadWriteLock的特性"></a>读写锁ReentrantReadWriteLock的特性</h1><p>Java并发包提供读写锁的实现是ReentrantReadWriteLock，它的特性如下：</p>
<ul>
<li>公平性选择<br>  支持非公平（默认的）和公平的锁获取方式。</li>
<li>重进入<br>  该锁支持重进入：读线程在获取了读锁后，能够再次获取读锁。写线程在获取了写锁之后能够再次获取写锁和读锁。</li>
<li>锁降级<br>  遵循获取写锁、获取读锁再释放写锁的顺序。写锁降级为读锁。</li>
</ul>
<h1 id="读写锁ReentrantReadWriteLock实现分析"><a href="#读写锁ReentrantReadWriteLock实现分析" class="headerlink" title="读写锁ReentrantReadWriteLock实现分析"></a>读写锁ReentrantReadWriteLock实现分析</h1><h2 id="读写状态的设计"><a href="#读写状态的设计" class="headerlink" title="读写状态的设计"></a>读写状态的设计</h2><p>读写锁同样依赖于自定义同步器来实现同步功能，而读写状态就是其同步器的同步状态。<br>读写锁需要在同步状态（一个整型变量）上维护多种状态，需要“按位切割使用”这个变量，将变量切分成两个部分，高16位表示读，低16位表示写。</p>
<p><strong>读写状态的确定：位运算。</strong><br>假设当前同步状态为<code>S</code>，写状态等于<code>S &amp; 0x0000FFFF</code>（将高16位抹去），读状态等于<code>S &gt;&gt;&gt; 16</code>（无符号补0右移16位）。写状态增加1，等于<code>S + 1</code>；读状态增加1，等于<code>S + (1&lt;&lt;16)</code>。</p>
<h2 id="写锁的获取与释放"><a href="#写锁的获取与释放" class="headerlink" title="写锁的获取与释放"></a>写锁的获取与释放</h2><p>写锁是一个支持<strong>重进入</strong>的<strong>排他锁</strong>。<br>如果当前线程已经获取了写锁，则增加写状态。如果当前线程在获取写锁时，读锁已经被获取或者该线程不是已经获取写锁的线程，则当前线程进入等待状态。</p>
<blockquote>
<p>如果读锁存在，则写锁不能被获取，原因：读写锁要确保写锁的操作对于读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知当前写线程的操作。</p>
</blockquote>
<p>写锁的释放与ReentrantLock的释放过程类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放。</p>
<h2 id="读锁的获取与释放"><a href="#读锁的获取与释放" class="headerlink" title="读锁的获取与释放"></a>读锁的获取与释放</h2><p>读锁是一个支持<strong>重进入</strong>的<strong>共享锁</strong>。<br>在没有其他写线程访问时，读锁总会被成功地获取，而所做的也只是（线程安全地，依靠CAS保证）增加读状态。</p>
<h2 id="锁降级"><a href="#锁降级" class="headerlink" title="锁降级"></a>锁降级</h2><p>锁降级指的是<strong>写锁</strong>降级为<strong>读锁</strong>。</p>
<blockquote>
<p>整个过程是：1)把持住当前拥有的写锁，2)再获取读锁，3)然后释放先前拥有的写锁。</p>
</blockquote>
<p><strong>锁降级中读锁获取的必要性</strong>：主要是为了保证数据的可见性。如果当前线程不获取读锁而是直接释放写锁，假设刺客另一个线程T获取了写锁并进行了修改数据，那么当前线程无法感知线程T对数据的更新。如果当前线程遵循锁降级的步骤，则线程T会被阻塞，直到当前线程使用数据并释放读锁之后，线程T才能获取写锁进行数据更新。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: 重入锁ReentrantLock]]></title>
      <url>https://rogerfang.github.io/2017/01/15/Lock-%E9%87%8D%E5%85%A5%E9%94%81ReentrantLock/</url>
      <content type="html"><![CDATA[<p>重入锁ReentrantLock，表示该锁能够支持一个线程对资源的重复加锁。此外，还支持获取锁时的公平和非公平性选择，默认为非公平性的。</p>
<blockquote>
<p>synchronized关键字隐式的支持重进入。</p>
</blockquote>
<h1 id="实现重进入"><a href="#实现重进入" class="headerlink" title="实现重进入"></a>实现重进入</h1><p>重进入是指任意线程在获取到锁之后能够再次获取该锁而不会被锁所阻塞。<br>该特性要解决两个问题：</p>
<ol>
<li>线程再次获取锁<br> 锁需要去识别获取锁的线程是否为当前占据锁的线程。如果是，则再次成功获取。</li>
<li>锁的最终释放<br> 线程重复n次获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。锁的最终释放要求，对于获取时进行计数自增，对于释放时进行计数自减。</li>
</ol>
<blockquote>
<p>ReentrantLock通过组合自定义的同步器来实现锁的获取与释放。</p>
</blockquote>
<h2 id="获取同步状态"><a href="#获取同步状态" class="headerlink" title="获取同步状态"></a>获取同步状态</h2><p>以非公平性实现为例。</p>
<p>该方法增加了<strong>再次获取同步状态</strong>的处理逻辑：通过判断当前线程是否为获取锁的线程来决定获取操作是否成功，如果是获取锁的线程再次请求，则将同步状态值进行增加并返回true，表示获取同步状态成功。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Performs non-fair tryLock.  tryAcquire is implemented in</div><div class="line"> * subclasses, but both need nonfair try for trylock method.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">    <span class="keyword">int</span> c = getState();</div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">            setExclusiveOwnerThread(current);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">        <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">        setState(nextc);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="释放同步状态"><a href="#释放同步状态" class="headerlink" title="释放同步状态"></a>释放同步状态</h2><p>如果该锁被获取了n次，那么前<code>(n-1)</code>次<code>tryRelease(int releases)</code>方法必须返回false，而只有同步状态完全释放了，才能返回true。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> c = getState() - releases;</div><div class="line">        <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">        <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">            free = <span class="keyword">true</span>;</div><div class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        setState(c);</div><div class="line">        <span class="keyword">return</span> free;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h1 id="获取锁的公平性问题"><a href="#获取锁的公平性问题" class="headerlink" title="获取锁的公平性问题"></a>获取锁的公平性问题</h1><p>锁获取的公平性问题：公平的获取锁，就是在绝对时间上，先对锁进行获取的请求一定先被满足，也可以说<strong>锁获取是顺序的</strong>（FIFO）。反之，是不公平的。</p>
<p>ReentrantLock中分别实现了<code>FairSync</code>和<code>NonFairSync</code>两种哦同步器实现，对于实现公平性和非公平性的主要区别在于：在获取同步状态的时候公平性同步器实现中判断条件多了<code>hasQueuedPredecessors()</code>方法，即加入了同步队列中当前节点是否有前驱节点的判断，如果有前驱节点则表示有线程比当前线程更早地请求获取锁，因此需要等待前驱线程获取并释放锁后才能继续获取锁。</p>
<p><strong>公平性锁和非公平性锁对比</strong>：</p>
<ol>
<li>公平性锁保证了锁的获取按照FIFO原则，而代价是进行大量的线程切换。</li>
<li>非公平性锁虽然可能造成线程“饥饿”，但是极少的线程切换，保证了其更大的吞吐量。</li>
</ol>
<blockquote>
<p>考虑到刚释放锁的线程再次获取同步状态的几率非常大，非公平性锁会出现同一线程连续获取锁的情况；而公平锁保证每次都是同步队列中的第一个节点获取到锁，因而存在大量的线程切换。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Performs lock.  Try immediate barge, backing up to normal</div><div class="line">     * acquire on failure.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">            setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">        <span class="keyword">else</span></div><div class="line">            acquire(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">        acquire(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>非公平锁</strong>的lock方法的处理方式是: 在lock的时候先直接cas修改一次state变量（尝试获取锁），成功就返回，不成功再排队，从而达到不排队直接抢占的目的。<br>而对于<strong>公平锁</strong>：则是老老实实的开始就走AQS的流程排队获取锁。如果前面有人调用过其lock方法，则排在队列中前面，也就更有机会更早的获取锁，从而达到“公平”的目的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: 队列同步器AbstractQueuedSynchronizer]]></title>
      <url>https://rogerfang.github.io/2017/01/07/Lock-%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><strong>队列同步器</strong>（AbstractQueuedSynchronizer，AQS），是用来构建<strong>锁</strong>或其他<strong>同步组件</strong>的基础框架，它使用了一个int成员变量表示<strong>同步状态</strong>，通过内置的<strong>FIFO队列</strong>来完成资源获取线程的排队工作。</p>
<p>队列同步器是实现锁（也可以是任意同步组件）的关键，<strong>在锁的实现中聚合同步器，利用同步器实现锁的语义</strong>。可以这样理解：</p>
<blockquote>
<p>锁是面向使用者的，它定义了使用者与锁交互的接口，隐藏了实现细节；同步器面向的是锁的实现者，它简化了锁的实现方式，屏蔽了同<em>步状态管理</em>、<em>线程的排队</em>、<em>等待与唤醒</em>等底层操作。</p>
</blockquote>
<p>队列同步器的设计是<strong>基于模板方法模式</strong>的，使用时需要继承同步器并重写指定的方法，随后将同步器组合在自定义的同步组件中，并调用同步器提供的模板方法，这些模板方法会调用重写的方法。</p>
<blockquote>
<p>队列同步器的模板方法基本上分为3类：独占式获取和释放同步状态、共享式获取和释放同步状态、查询同步队列中的线程情况。</p>
</blockquote>
<p>AQS的功能可以分为两类：<strong>独占</strong>功能和<strong>共享</strong>功能，它的所有子类中，要么实现并使用了它独占功能的API，要么使用了共享锁的功能，而不会同时使用两套API，即便是它最有名的子类ReentrantReadWriteLock，也是通过两个内部类：读锁和写锁，分别实现的两套API来实现的。s</p>
<h1 id="队列同步器的实现分析"><a href="#队列同步器的实现分析" class="headerlink" title="队列同步器的实现分析"></a>队列同步器的实现分析</h1><h2 id="节点的waitStatus"><a href="#节点的waitStatus" class="headerlink" title="节点的waitStatus"></a>节点的waitStatus</h2><ul>
<li><strong>CANCELLED</strong>：因为超时或者中断，结点会被设置为取消状态，被取消状态的结点不应该去竞争锁，只能保持取消状态不变，不能转换为其他状态。处于这种状态的结点会被踢出队列，被GC回收；</li>
<li><strong>SIGNAL</strong>：表示这个结点的继任结点被阻塞了，到时需要通知它；</li>
<li><strong>CONDITION</strong>：表示这个结点在条件队列中，因为等待某个条件而被阻塞；</li>
<li><strong>PROPAGATE</strong>：使用在共享模式头结点有可能处于这种状态，表示锁的下一次获取可以无条件传播；</li>
<li><strong>0</strong>：None of the above，新结点会处于这种状态。</li>
</ul>
<h2 id="同步队列"><a href="#同步队列" class="headerlink" title="同步队列"></a>同步队列</h2><p><strong>队列同步器依赖内部的同步队列（一个FIFO的双向队列）来完成同步状态的管理</strong>。</p>
<p>当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构造成为一个节点（Node），并将其加入同步队列，同时会阻塞当前线程；当同步状态释放时，会把首节点中的线程唤醒，使其再次尝试获取同步状态。</p>
<blockquote>
<p>同步队列中的<strong>节点</strong>用来保存获取同步状态失败的<strong>线程引用</strong>、<strong>等待状态</strong>以及<strong>前驱节点和后继节点</strong>。</p>
</blockquote>
<p>同步队列遵循FIFO，首节点是获取同步状态成功的节点，首节点的线程在释放同步状态时，将会唤醒后继节点，而后继节点在获取同步状态成功时会将自己设置为首节点。</p>
<h2 id="独占式同步状态获取和释放"><a href="#独占式同步状态获取和释放" class="headerlink" title="独占式同步状态获取和释放"></a>独占式同步状态获取和释放</h2><p>通过调用<code>acquire(int arg)</code>方法<strong>独占式</strong>（同一时刻只有一个线程成功获取同步状态）地获取同步状态，该方法对<strong>中断不敏感</strong>，也就是由于线程获取同步状态失败后进入同步队列中，后续对线程进行中断操作时，线程不会从同步队列中移出。</p>
<h3 id="acquire"><a href="#acquire" class="headerlink" title="acquire"></a>acquire</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Acquires in exclusive mode, ignoring interrupts.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">        selfInterrupt();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码主要逻辑：</p>
<ol>
<li><strong>同步状态获取</strong><br> 首先调用<strong>自定义同步器实现</strong>的<code>tryAcquire(int arg)</code>方法，<em>该方法保证线程安全的获取同步状态</em>。</li>
<li><strong>节点构造</strong><br> 如果同步状态获取失败，则构造同步节点，独占式的节点。</li>
<li><strong>加入同步队列</strong><br> 节点构造完成后，通过<code>addWaiter(Node noe)</code>方法加入到同步队列的尾部。</li>
<li><strong>在同步队列中自旋</strong><br> 最后调用<code>acquireQueued(Node node, int arg)</code>方法，使得该节点以“死循环”的方式获取同步状态。</li>
</ol>
<h3 id="addWaiter"><a href="#addWaiter" class="headerlink" title="addWaiter"></a>addWaiter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates and enqueues node for current thread and given mode.</div><div class="line"> */<span class="function">k</span></div><div class="line"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> &#123;</div><div class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</div><div class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></div><div class="line">    <span class="comment">// 快速尝试在尾部添加</span></div><div class="line">    Node pred = tail;</div><div class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</div><div class="line">        node.prev = pred;</div><div class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</div><div class="line">            pred.next = node;</div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    enq(node);</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同步器提供了一个基于<strong>CAS</strong>的设置尾节点的方法：<code>compareAndSetTail(Node expect, Node update)</code>。注意，此时可能发生竞争，如果有另外一个线程在两个if之间抢先更新的队列的尾节点，CAS操作将会失败，这时会调用enq方法，继续试图将node放入队列。</p>
<blockquote>
<p>如果使用线程不安全的<code>LinkedList</code>来维护节点之间的关系，那么并发的时候，LinkedList将难以保证Node的正确添加。</p>
</blockquote>
<h3 id="enq"><a href="#enq" class="headerlink" title="enq"></a>enq</h3><p><code>enq(Node noe)</code>方法中，同步器通过“<strong>死循环</strong>”来保证节点的正确添加，在死循环中只有通过CAS将节点设置为尾节点之后，当前线程才能从该方法返回，否则当前线程不断尝试。</p>
<blockquote>
<p><code>enq</code>方法将并发添加节点的请求通过CAS变得串行化了。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Inserts node into queue, initializing if necessary.</div><div class="line"> * 由于这里存在多线程并发问题，使用死循环保证node能够添加到链表中，因此enq本身是线程安全的</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Node t = tail;</div><div class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></div><div class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</div><div class="line">                tail = head;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            node.prev = t;</div><div class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</div><div class="line">                t.next = node;</div><div class="line">                <span class="keyword">return</span> t;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="acquireQueued"><a href="#acquireQueued" class="headerlink" title="acquireQueued"></a>acquireQueued</h3><p>节点进入同步队列后，接下来的任务就是监视队列，等待获取资源。</p>
<p>进入到一个自旋的过程，每个节点（线程）都在自省地观察，当条件满足，获取到了同步状态，就可以从自旋过程中退出，否则依旧留在这个自旋过程中（并会阻塞节点的线程）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">                setHead(node);</div><div class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                failed = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">return</span> interrupted;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                parkAndCheckInterrupt())</div><div class="line">                interrupted = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (failed)</div><div class="line">            cancelAcquire(node);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="shouldParkAfterFailedAcquire"><a href="#shouldParkAfterFailedAcquire" class="headerlink" title="shouldParkAfterFailedAcquire"></a>shouldParkAfterFailedAcquire</h3><p>在<code>acquireQueued()</code>自旋中，获取资源失败时，需要调用<code>shouldParkAfterFailedAcquire()</code>方法检测一下是否需要暂停休息一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ws = pred.waitStatus;</div><div class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * This node has already set status asking a release</div><div class="line">         * to signal it, so it can safely park.</div><div class="line">         */</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * Predecessor was cancelled. Skip over predecessors and</div><div class="line">         * indicate retry.</div><div class="line">         */</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            node.prev = pred = pred.prev;</div><div class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</div><div class="line">        pred.next = node;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</div><div class="line">         * need a signal, but don't park yet.  Caller will need to</div><div class="line">         * retry to make sure it cannot acquire before parking.</div><div class="line">         */</div><div class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>独占模式下所有不使用Condition的同步器，节点的waitStatus只可能有CANCELLED、SIGNAL和0三中状态。</p>
</blockquote>
<p><code>shouldParkAfterFailedAcquire()</code>就是靠前驱节点判断当前线程是否应该被阻塞。<br>首先检测下node的前驱节点pred，如果pred状态已经被置为SIGNAL，直接返回true。否则，从node的前驱继续往前找，直到找到一个waitStatus<strong>小于等于0</strong>的节点，设置该点为node的前驱（注意：此时node与这个节点之间的节点从等待队列中被“摘下”，等待被回收了）并返回false。返回之后，上层的acquireQueued方法继续自旋，再次进入shouldParkAfterFailedAcquire方法之后，如果发现node前驱不是取消状态且waitStatus不等于SIGNAL，调用CAS函数进行注册（注意：这个操作可能失败，因此不能直接返回true，而是返回false由上层的自旋再次调用shouldParkAfterFailedAcquire直到确认注册成功）。</p>
<h3 id="parkAndCheckInterrupt"><a href="#parkAndCheckInterrupt" class="headerlink" title="parkAndCheckInterrupt"></a>parkAndCheckInterrupt</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Convenience method to park and then check if interrupted</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</div><div class="line">    LockSupport.park(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> Thread.interrupted();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="release"><a href="#release" class="headerlink" title="release"></a>release</h3><p>当线程获取同步状态并执行了相应逻辑之后，就需要释放同步状态。</p>
<p>该方法会唤醒头结点的后继节点线程，<code>unparkSuccessor(Node node)</code>方法使用LockSupport来唤醒处于等待状态的线程。独占模式下，waitStatus！=0与waitStatus==-1等价（这里waitStatus不会为CANCELLED，因为已经获取资源了）。</p>
<p>被唤醒的线程将继续在acquireQueued的死循环中进行锁竞争，直到成功获取锁。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">        Node h = head;</div><div class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">            unparkSuccessor(h);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="unparkSuccessor"><a href="#unparkSuccessor" class="headerlink" title="unparkSuccessor"></a>unparkSuccessor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Wakes up node's successor, if one exists.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * If status is negative (i.e., possibly needing signal) try</div><div class="line">     * to clear in anticipation of signalling.  It is OK if this</div><div class="line">     * fails or if status is changed by waiting thread.</div><div class="line">     */</div><div class="line">    <span class="keyword">int</span> ws = node.waitStatus;</div><div class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</div><div class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Thread to unpark is held in successor, which is normally</div><div class="line">     * just the next node.  But if cancelled or apparently null,</div><div class="line">     * traverse backwards from tail to find the actual</div><div class="line">     * non-cancelled successor.</div><div class="line">     */</div><div class="line">    Node s = node.next;</div><div class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</div><div class="line">        s = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</div><div class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</div><div class="line">                s = t;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</div><div class="line">        LockSupport.unpark(s.thread);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="共享式同步状态获取和释放"><a href="#共享式同步状态获取和释放" class="headerlink" title="共享式同步状态获取和释放"></a>共享式同步状态获取和释放</h2><blockquote>
<p>共享式获取与独占式获取最主要的区别在于同一个时刻能否有多个线程同时获取到同步状态。</p>
</blockquote>
<p>以文件读写为例，写操作要求对资源的独占式访问，而读操作可以是共享式访问。</p>
<h3 id="acquireShared"><a href="#acquireShared" class="headerlink" title="acquireShared"></a>acquireShared</h3><p>通过调用队列同步器的<code>acquireShared(int arg)</code>方法可以共享式地获取同步状态。</p>
<p><code>tryAcquireShared()</code><strong>的返回值表示剩余资源个数，负值表示获取失败，0表示获取成功但已无剩余资源。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</div><div class="line">        doAcquireShared(arg);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="doAcquireShared"><a href="#doAcquireShared" class="headerlink" title="doAcquireShared"></a>doAcquireShared</h3><p>在<code>doAcquireShared(int arg)</code>方法中将共享式节点加入到同步队列中，并进入<strong>自旋</strong>的过程。</p>
<p><code>doAcquireShared</code>方法与<code>acquireQueued</code>方法相似，不同的地方在于：<strong>共享模式下成功获取资源并将head指向自己之后，要检查并试图唤醒之后的等待线程</strong>。因为共享资源可能剩余，可以被后面的等待线程获取。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">	<span class="comment">// 将当前线程包装为一个共享类型的节点</span></div><div class="line">    <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</div><div class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">            <span class="keyword">if</span> (p == head) &#123;</div><div class="line">            	<span class="comment">// 如果新建节点的前一个节点，就是Head，说明当前节点是AQS队列中等待获取锁的第一个节点。</span></div><div class="line">				<span class="comment">// 按照FIFO的原则，可以直接尝试获取锁。</span></div><div class="line">                <span class="keyword">int</span> r = tryAcquireShared(arg);</div><div class="line">                <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</div><div class="line">                	<span class="comment">// 成功获取锁，需要将当前节点设置为AQS队列中的第一个节点。</span></div><div class="line">                    setHeadAndPropagate(node, r);</div><div class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                    <span class="keyword">if</span> (interrupted)</div><div class="line">                        selfInterrupt();</div><div class="line">                    failed = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                parkAndCheckInterrupt())</div><div class="line">                interrupted = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (failed)</div><div class="line">            cancelAcquire(node);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="setHeadAndPropagate"><a href="#setHeadAndPropagate" class="headerlink" title="setHeadAndPropagate"></a>setHeadAndPropagate</h3><p><code>setHeadAndPropagate(Node node, int propagate)</code>方法首先是更换了头结点，然后获取当前节点的后继节点，如果同样是“shared”类型的，再做一次“releaseShared”操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Sets head of queue, and checks if successor may be waiting</div><div class="line"> * in shared mode, if so propagating if either propagate &gt; 0 or</div><div class="line"> * PROPAGATE status was set.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> node the node</div><div class="line"> * <span class="doctag">@param</span> propagate the return value from a tryAcquireShared</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHeadAndPropagate</span><span class="params">(Node node, <span class="keyword">int</span> propagate)</span> </span>&#123;</div><div class="line">    Node h = head; <span class="comment">// Record old head for check below</span></div><div class="line">    setHead(node);</div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Try to signal next queued node if:</div><div class="line">     *   Propagation was indicated by caller,</div><div class="line">     *     or was recorded (as h.waitStatus either before</div><div class="line">     *     or after setHead) by a previous operation</div><div class="line">     *     (note: this uses sign-check of waitStatus because</div><div class="line">     *      PROPAGATE status may transition to SIGNAL.)</div><div class="line">     * and</div><div class="line">     *   The next node is waiting in shared mode,</div><div class="line">     *     or we don't know, because it appears null</div><div class="line">     *</div><div class="line">     * The conservatism in both of these checks may cause</div><div class="line">     * unnecessary wake-ups, but only when there are multiple</div><div class="line">     * racing acquires/releases, so most need signals now or soon</div><div class="line">     * anyway.</div><div class="line">     * 尝试唤醒后继节点：</div><div class="line">     *		propagate &gt; 0说明许可还有能够继续被线程acquire;</div><div class="line">     * 		或者 之前的head被设置为PROPAGATE(PROPAGATE可以被转换为SIGNAL)说明需要往后传递;</div><div class="line">     * 		或者为null</div><div class="line">     * 并且 后继节点是共享模式或者为null。</div><div class="line">     */</div><div class="line">    <span class="keyword">if</span> (propagate &gt; <span class="number">0</span> || h == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span> ||</div><div class="line">        (h = head) == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span>) &#123;</div><div class="line">        Node s = node.next;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isShared())</div><div class="line">        	<span class="comment">// 唤醒后继节点</span></div><div class="line">            doReleaseShared();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>s.isShared()</code>的判断主要是考虑到<strong>读写锁</strong>的情况，在读写锁的使用过程中，申请写锁（独占模式）和申请读锁（共享模式）的线程可能同时存在，这个判断发现后继线程是共享模式的时唤醒它。</p>
<h3 id="releaseShared"><a href="#releaseShared" class="headerlink" title="releaseShared"></a>releaseShared</h3><p>通过调用<code>releaseShared(int arg)</code>方法可以释放同步状态，在释放同步状态之后，将会唤醒后续处于等待状态的节点。</p>
<blockquote>
<p>对于能够支持多个线程同时访问的并发组件（如Semaphore），它和独占式的主要区别在于<code>tryReleasedShared(int arg)</code>方法必须确保同步状态线程安全释放，一般是通过循环和CAS来保证的，因为释放同步状态的操作会同时来自多个线程。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</div><div class="line">        doReleaseShared();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="doReleaseShared"><a href="#doReleaseShared" class="headerlink" title="doReleaseShared"></a>doReleaseShared</h3><p><code>doReleaseShared()</code>是一个自旋过程。首先获取head节点h，然后检查它的waitStatus是否为SIGNAL，如果是的话，调用CAS将h的waitStatus设置为0，并调用unparkSuccessor唤醒下一个等待线程。<strong>注意</strong>，这里调用CAS方法而不是直接赋值，是<strong>因为在共享模式下，这里可能发生竞争</strong>。doReleaseShared方法可能由head节点在使用完共享资源后主动调用；也可能由刚刚“上位”的等待线程调用，在上位之后，原来的head线程已被踢出队列。</p>
<ul>
<li><p>第一种情况，只有刚刚释放资源的head线程调用，这时候没有竞争，waitStatus是SIGNAL，就去唤醒下个线程，是0，就重置为PROPAGATE。</p>
</li>
<li><p>第二种情况，刚刚释放完资源的<strong>旧head</strong>，和刚刚上位的<strong>新head</strong>同时调用<code>doReleaseShared()</code>方法，这时候最新的head调用该方法时获取的头节点都是自己，若干被踢出的旧head调用该方法时获取的头节点可能是旧head，也可能是新head。这些被踢出的旧head线程也在根据自己获取的head（不管新旧）的状态进行CAS操作和unparkSuccessor操作，<strong>幸运的是</strong>，这些操作不会造成错误，只是多了一些唤醒而已（这些唤醒可能导致一个线程获得资源，也可能是一个“虚晃”）。</p>
</li>
</ul>
<p>我们可以发现，不管head引用怎样更迭，最终新head的waitStatus都会被顺利处理。注意，可能有多个旧head同时参与这个过程，都不影响正确性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Release action for shared mode -- signals successor and ensures</div><div class="line"> * propagation. (Note: For exclusive mode, release just amounts</div><div class="line"> * to calling unparkSuccessor of head if it needs signal.)</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Node h = head;</div><div class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</div><div class="line">            <span class="keyword">int</span> ws = h.waitStatus;</div><div class="line">            <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</div><div class="line">                <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</div><div class="line">                    <span class="keyword">continue</span>;            <span class="comment">// loop to recheck cases</span></div><div class="line">                unparkSuccessor(h);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</div><div class="line">                     !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))</div><div class="line">                <span class="keyword">continue</span>;                <span class="comment">// loop on failed CAS</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (h == head)                   <span class="comment">// loop if head changed</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="独占式超时获取同步状态"><a href="#独占式超时获取同步状态" class="headerlink" title="独占式超时获取同步状态"></a>独占式超时获取同步状态</h2><p>通过调用同步器的<code>doAcquireNanos(int arg, long nanosTimeout)</code>方法可以超时获取同步状态，即在指定的时间段内获取同步状态，如果获取到了则返回true，否则返回false。</p>
<blockquote>
<p>该方法提供了传统Java同步操作（如synchronized关键字）所不具备的特性。</p>
</blockquote>
<p><code>doAcquireNanos(int arg)</code>方法在自旋过程中，当节点的前驱节点为头节点时尝试获取同步状态，如果获取成功则从该方法返回，这个过程和独占式同步获取的过程类似。但是在同步状态获取失败的处理上有所不同，如果当前线程获取同步状态失败，则判断是否超时，如果没有超时，重新计算超时间隔，然后使当前线程等待。</p>
<p>共享式超时获取同步状态的过程与之类似<code>doAcquireSharedNanos(int arg, long nanosTimeout)</code>。</p>
<hr>
<p>感谢：<br><a href="http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer" target="_blank" rel="external">http://www.infoq.com/cn/articles/jdk1.8-abstractqueuedsynchronizer</a><br><a href="http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer" target="_blank" rel="external">http://www.infoq.com/cn/articles/java8-abstractqueuedsynchronizer</a><br><a href="http://www.jianzhaoyang.com/go2sea/p/5618628.html" target="_blank" rel="external">http://www.jianzhaoyang.com/go2sea/p/5618628.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lock: 概述]]></title>
      <url>https://rogerfang.github.io/2017/01/07/Lock-%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>锁是用来控制多个线程访问共享资源的方式，一般来说，一个锁能够防止多个线程同时访问 共享资源（但是有些锁可以允许多个线程并发的访问共享资源，如读写锁）。</p>
<h1 id="Lock与synchronized"><a href="#Lock与synchronized" class="headerlink" title="Lock与synchronized"></a>Lock与synchronized</h1><p>Lock接口出现之前，Java程序是靠<code>synchronized</code>关键字实现锁功能的，而Java SE 5之后，并发包中新增了Lock接口（及其相关实现类），它们提供了与<code>synchronized</code>关键字类似的同步功能。</p>
<p>Lock与synchronized关键字比较：Lock使用时需要显示地获取和释放锁，而synchronized块是隐式地获取和释放锁，但是Lock却拥有了锁获取和释放的可操作性、可中断的获取锁以及超时获取锁等多种synchronized关键字不具备的同步特性。</p>
<p>Lock接口提供的synchronized关键字不具备的主要特性：</p>
<ol>
<li>尝试非阻塞地获取锁<br> 当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有锁。</li>
<li>能被中断地获取锁<br> 与synchronized不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会抛出，同时锁会被释放。</li>
<li>超时获取锁<br> 在指定的截止时间之前获取锁，如果截止时间到了仍旧无法获取锁，则返回。</li>
</ol>
<h1 id="Java中的原子操作"><a href="#Java中的原子操作" class="headerlink" title="Java中的原子操作"></a>Java中的原子操作</h1><p>在Java中通过锁和循环CAS来实现原子操作。</p>
<p>JVM中的CAS操作利用了处理器提供的CMPXCHG指令实现的。<strong>自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止</strong>。</p>
<p>锁机制保证了只有获得锁的线程才能够操作锁定的内存区域。<strong>JVM中实现锁的方式基本上（除了偏向锁）都用了循环CAS，即当一个线程想进入同步块的时候使用循环CAS的方式来获取锁，当它退出同步块的时候使用循环CAS释放锁</strong>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[线程: 启动和终止]]></title>
      <url>https://rogerfang.github.io/2017/01/07/%E7%BA%BF%E7%A8%8B-%E5%90%AF%E5%8A%A8%E5%92%8C%E7%BB%88%E6%AD%A2/</url>
      <content type="html"><![CDATA[<h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1><p>Java 中创建有两种方法：继承 Thread 类、实现 Runnable 接口，在程序开发中只要是多线程，肯定永远以实现 Runnable 接口为主。</p>
<p>实现 Runnable 接口相比继承 Thread 类有如下优势：</p>
<ul>
<li>可以避免由于 Java 的单继承特性而带来的局限；</li>
<li>增强程序的健壮性，代码能够被多个线程共享，代码与数据是独立的；</li>
<li>适合多个相同程序代码的线程区处理同一资源的情况。</li>
</ul>
<p>继承Thread类相当于是多个线程分别完成自己的任务；实现Runable接口，相当于是多个线程共同完成一个任务。</p>
<h1 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h1><p>线程对象在初始化完成之后，调用<code>start()</code>方法就可以启动这个线程。</p>
<p>线程<code>start()</code>方法的含义是：当前线程（即parent线程）同步告知Java虚拟机，只要线程规划器空闲，应立即启动调用<code>start()</code>方法的线程。</p>
<h1 id="理解中断Interrupted"><a href="#理解中断Interrupted" class="headerlink" title="理解中断Interrupted"></a>理解中断Interrupted</h1><p>中断可以理解为线程的一个<strong>标识位属性</strong>。它表示一个运行中的线程是否被其他线程进行了中断操作。</p>
<blockquote>
<p>Java中断机制是一种协作机制，也就是说通过中断并不能直接终止另一个线程，而需要被中断的线程自己处理中断。</p>
</blockquote>
<ul>
<li>其他线程通过调用该线程的<code>interrupt()</code>方法对其进行中断操作。</li>
<li>线程通过检查自身是否被中断来进行响应，线程通过方法<code>isInterrupted()</code>来进行判断是否被中断。</li>
<li>静态方法<code>Thread.interrupted()</code>对当前线程的中断标识位进行复位。</li>
</ul>
<h1 id="过期的suspend-、resume-和stop"><a href="#过期的suspend-、resume-和stop" class="headerlink" title="过期的suspend()、resume()和stop()"></a>过期的suspend()、resume()和stop()</h1><p>不建议使用的原因主要有：以<code>suspend()</code>为例，在调用后，线程不会释放已经占有的资源（比如锁），而是占有着资源进入睡眠状态，这样容易引发死锁问题。</p>
<h1 id="安全地终止"><a href="#安全地终止" class="headerlink" title="安全地终止"></a>安全地终止</h1><p>中断操作时一种简便的线程交互方式，可以用来取消或停止任务。</p>
<p>除了中断以外，还可以利用一个boolean变量来控制是否需要停止任务并终止该线程。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMM: final域的内存语义]]></title>
      <url>https://rogerfang.github.io/2017/01/07/JMM-final%E5%9F%9F%E7%9A%84%E5%86%85%E5%AD%98%E8%AF%AD%E4%B9%89/</url>
      <content type="html"><![CDATA[<p>与volatile和锁相比，对final域的读写更像是普通变量的访问。</p>
<h1 id="final域的重排序规则"><a href="#final域的重排序规则" class="headerlink" title="final域的重排序规则"></a>final域的重排序规则</h1><p>对于final域编译器和处理器需要遵守两个重排序规则：</p>
<ol>
<li>在<strong>构造函数</strong>内对一个final域的写入，与随后把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</li>
<li>初次读一个包含final域的对象的引用，与随后初次读这个final域，这两个操作之间不能重排序。</li>
</ol>
<h1 id="写final域的重排序规则"><a href="#写final域的重排序规则" class="headerlink" title="写final域的重排序规则"></a>写final域的重排序规则</h1><p>写final域的重排序规则禁止把final域的写重排序到构造函数之外。</p>
<ol>
<li>JMM禁止<strong>编译器</strong>把final域的写重排序到构造函数之外。</li>
<li>编译器会在final域的写之后，构造函数return之前，插入一个<code>StoreStore</code>内存屏障，禁止<strong>处理器</strong>把final域的写重排序到构造函数之外。</li>
</ol>
<blockquote>
<p>写final域的重排序规则可以确保：在对象引用为任意线程可见之前，对象的final域已经被正确初始化过了，<strong>而普通变量不具有这个保障</strong>。</p>
</blockquote>
<h1 id="读final域的重排序规则"><a href="#读final域的重排序规则" class="headerlink" title="读final域的重排序规则"></a>读final域的重排序规则</h1><p>读final域的重排序规则是，在一个线程中，初次读对象引用与初次读该对象的final域，编译器会在读final域之前插入一个<code>LoadLoad</code>内存屏障，JMM禁止处理器重排序这两个操作。</p>
<blockquote>
<p>读final域的重排序规则可以确保：在读一个对象的final域之前，一定会读包含这个final域对象的引用，<strong>而普通变量不具有这个保障</strong>。</p>
</blockquote>
<h1 id="final域为引用类型"><a href="#final域为引用类型" class="headerlink" title="final域为引用类型"></a>final域为引用类型</h1><p>前面说的final域是基本类型，对于引用类型，写final域的重排序规则对编译器和处理器增加了如下约束：</p>
<blockquote>
<p>在构造函数内，对一个final引用的对象的域进行写操作，与随后在构造函数外把这个被构造对象的引用赋值给一个引用变量，这两个操作之间不能重排序。</p>
</blockquote>
<h1 id="final语义增强"><a href="#final语义增强" class="headerlink" title="final语义增强"></a>final语义增强</h1><p>在旧的Java内存模型中，一个最严重的缺陷就是线程可能看到final域的值会改变。例如，一个线程看到一个还未初始化之前的默认值，过一段时间再去读这个final域，就会发现被某个线程初始化之后的值。</p>
<p>JSR-133增强了final的语义，可以提供初始化安全保证：只要对象是正确构造的（被构造对象的引用在构造函数中没有逸出），那么不需要使用同步（如lock和volatile）就可以保证任意线程都能看到final域被初始化后的值。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMM: 锁的内存语义]]></title>
      <url>https://rogerfang.github.io/2017/01/07/JMM-%E9%94%81%E7%9A%84%E5%86%85%E5%AD%98%E8%AF%AD%E4%B9%89/</url>
      <content type="html"><![CDATA[<p>锁是Java并发编程中最重要的同步机制，锁除了可以让临界区互斥执行外，还可以让释放锁的线程向获取同一个锁的线程发送消息。</p>
<h1 id="锁释放-获取内存语义"><a href="#锁释放-获取内存语义" class="headerlink" title="锁释放-获取内存语义"></a>锁释放-获取内存语义</h1><p>锁的<strong>释放</strong>内存语义：线程释放锁时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存中。</p>
<p>锁的<strong>获取</strong>内存语义：线程获取锁时，JMM会把线程对应的本地内存置为无效。从而使得被监视器（Monitor）保护的临界区代码必须从主内存中读取共享变量。</p>
<blockquote>
<p>对比锁释放-获取的内存语义与volatile写-读的内存语义，可以看出：锁释放和volatile写具有相同的内存语义，锁获取和volatile读具有相同的内存语义。</p>
</blockquote>
<h1 id="锁内存语义的实现"><a href="#锁内存语义的实现" class="headerlink" title="锁内存语义的实现"></a>锁内存语义的实现</h1><p>锁的内存语义实现依赖两种方式：</p>
<ol>
<li>利用<strong>volatile变量</strong>的写-读所具有的内存语义。</li>
<li>利用java的<strong>CAS</strong>所附带的volatile读和volatile写的内存语义。</li>
</ol>
<h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>Java中的<code>compareAndSet()</code>方法调用简称为CAS，JDK文档对该方法的说明如下：如果当前状态值等于预期值，则以原子方式将同步状态设置为给定的更新值。</p>
<blockquote>
<p>此操作具有volatile读和写的内存语义。</p>
</blockquote>
<h2 id="CAS如何具有volatile的读-写内存语义？"><a href="#CAS如何具有volatile的读-写内存语义？" class="headerlink" title="CAS如何具有volatile的读-写内存语义？"></a>CAS如何具有volatile的读-写内存语义？</h2><ol>
<li>和volatile内存语义实现类似，<strong>编译器</strong>不会对CAS和CAS前后的任意内存操作进行重排序。</li>
<li><strong>处理器</strong>对CAS的支持<br> CAS操作底层是进行<strong>本地方法调用</strong>，本地方法的实现（以Windows和Intel X86处理器为例）会根据当前处理器的类型来决定是否为<code>cmpxchg</code>指令添加<strong>lock前缀</strong>。如果程序运行在多处理器上，就为<code>cmpxchg</code>指令加上lock前缀；反之，如果程序运行在单处理器上，就省略lock前缀。<br> intel对lock前缀的说明：<ol>
<li>确保对内存的读-改-写操作原子性执行。Intel使用<strong>缓存锁定</strong>（Cache Locking）来保证指令执行的原子性。</li>
<li>禁止该指令，与之前和之后的读和写指令重排序。</li>
<li>把写缓冲区的所有数据刷新到内存中。</li>
</ol>
</li>
</ol>
<h1 id="concurrent包的实现"><a href="#concurrent包的实现" class="headerlink" title="concurrent包的实现"></a>concurrent包的实现</h1><p>volatile变量的读/写和CAS可以实现线程之间的通信，这是整个concurrent包得以实现的基石。</p>
<p>cocurrent包一个通用的实现模式：</p>
<ol>
<li>首先，声明共享变量为volatile；</li>
<li>然后，使用CAS的原子条件更新来实现线程之间的同步；</li>
<li>同时，配合以volatile的读/写和CAS所具有的的内存语义来实现线程间的通信。</li>
</ol>
<p>concurrent包的实现<br><img src="../images/jmm/concurrent-realization-mechanism.png" alt=""></p>
<p>AQS（Java的同步器框架AbstractQueuedSychronized），非阻塞数据结构和原子变量类（java.util.concurrent.atomic包），这些concurrent包中的基础类都是使用这种模式来实现的，而concurrent包中的高层类又是依赖于这些基础类实现的。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMM: volatile的内存语义]]></title>
      <url>https://rogerfang.github.io/2017/01/07/JMM-volatile%E7%9A%84%E5%86%85%E5%AD%98%E8%AF%AD%E4%B9%89/</url>
      <content type="html"><![CDATA[<p>volatile关键字可以保证变量的可见性，也就是新值能立即同步到主内存，以及使用前立即从主内存刷新。</p>
<p><strong>可见性</strong>：对一个volatile变量的读，总是能看到（任意线程）对这个volatile变量最后的写入。<br><strong>原子性</strong>：对任意单个volatile变量的读/写具有原子性，但是对于复合操作如volatile++这种复合操作不具有原子性。</p>
<h1 id="volatile写-读内存语义"><a href="#volatile写-读内存语义" class="headerlink" title="volatile写-读内存语义"></a>volatile写-读内存语义</h1><p>volatile<strong>写</strong>内存语义：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量值刷新到主内存。</p>
<p>volatile<strong>读</strong>内存语义：当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效，然后从主内存中读取共享变量。</p>
<h1 id="volatile内存语义的实现"><a href="#volatile内存语义的实现" class="headerlink" title="volatile内存语义的实现"></a>volatile内存语义的实现</h1><h2 id="编译器重排序序规则"><a href="#编译器重排序序规则" class="headerlink" title="编译器重排序序规则"></a>编译器重排序序规则</h2><p>JMM针对<strong>编译器</strong>指定的volatile重排序规则表。<br><img src="/images/jmm/volatile-reorder-rules.png" alt=""><br>从表中可以看出：</p>
<ol>
<li>当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。<br> 这个规则确保volatile写之前的操作不会被编译器重排序到volatile写之后。</li>
<li>当第一个操作时volatile读时，不管第二个操作是什么，都不能重排序。<br> 这个规则确保volatile读之后的操作不会被编译器重排序到volatile读之前。</li>
<li>当第一个操作时volatile写时，第二个操作是volatile读时，不能重排序。</li>
</ol>
<h2 id="处理器内存屏障"><a href="#处理器内存屏障" class="headerlink" title="处理器内存屏障"></a>处理器内存屏障</h2><p>为了实现volatile内存语义，编译器在生成字节码时，会在指令序列中插入<strong>内存屏障</strong>来禁止特定类型的<strong>处理器</strong>重排序。</p>
<h1 id="增强的volatile内存语义"><a href="#增强的volatile内存语义" class="headerlink" title="增强的volatile内存语义"></a>增强的volatile内存语义</h1><p>JSR-133之前的JMM虽然不允许volatile变量之间的重排序，但是<strong>允许volatile变量和普通变量重排序</strong>。<br><img src="../images/jmm/advanced-volatile-memory-semantic.png" alt=""><br>在旧的JMM中，当1和2之间没有数据依赖关系时，1和2之间就可能被重排序（3和4类似），这样就会导致：读线程B执行4时，不一定能看到写线程A在执行1时对共享变量的修改。</p>
<p>也就是说，在旧的Java内存模型中，volatile的写-读没有<strong>锁</strong>的释放-获取所具有的的内存语义，为了提供一种比锁更轻量级的线程通信机制，JSR-133决定增强volatile的内存语义：</p>
<blockquote>
<p>严格限制编译器和处理器对<strong>volatile变量</strong>与<strong>普通变量</strong>的重排序，<em>确保volatile的写-读和锁的释放-获取具有相同的内存语义</em>。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMM: 顺序一致性]]></title>
      <url>https://rogerfang.github.io/2017/01/07/JMM-%E9%A1%BA%E5%BA%8F%E4%B8%80%E8%87%B4%E6%80%A7/</url>
      <content type="html"><![CDATA[<blockquote>
<p>顺序一致性内存模型是一个<strong>理论参考模型</strong>。</p>
</blockquote>
<h1 id="数据竞争与顺序一致性"><a href="#数据竞争与顺序一致性" class="headerlink" title="数据竞争与顺序一致性"></a>数据竞争与顺序一致性</h1><p>当程序未正确同步时，就会存在数据竞争。</p>
<p>Java内存模型规范对数据竞争的定义：在一个线程中写一个变量，在另一个线程读同一个变量，而且写和读没有通过同步来排序。</p>
<p>如果程序是正确同步的，程序的执行将具有顺序一致性。即程序的执行结果与该程序在顺序一致性内存模型中的执行结果相同。</p>
<blockquote>
<p>这里的同步是指广义上的同步，包括常用同步原语（synchronized、volatile和final）的正确使用，还有Lock锁的正确使用。</p>
</blockquote>
<h1 id="顺序一致性内存模型"><a href="#顺序一致性内存模型" class="headerlink" title="顺序一致性内存模型"></a>顺序一致性内存模型</h1><p>顺序一致性内存模型的两大特性：</p>
<ul>
<li>一个线程中的所有操作必须按照程序的顺序来执行。</li>
<li>（不管程序是否同步）所有线程都只能看到一个单一的操作执行顺序（一个一致的整体执行顺序）。每个操作都必须原子执行且立刻对所有线程可见。</li>
</ul>
<blockquote>
<p>在任意时间点最多只有<strong>一个线程</strong>可以连接到内存。</p>
</blockquote>
<p>未同步的程序在顺序一致性模型中整体执行顺序是未知的（<strong>执行结果未知</strong>），但是所有线程能看到一个一致的整体执行顺序。</p>
<p>JMM不保证每个操作都对任意线程可见，未同步的程序在JMM中不但整体的执行顺序是无序的，而且所有线程看到的操作执行顺序也可能不一致。</p>
<h1 id="同步程序的顺序一致性效果"><a href="#同步程序的顺序一致性效果" class="headerlink" title="同步程序的顺序一致性效果"></a>同步程序的顺序一致性效果</h1><p>一个正确同步的程序，JMM保证程序的执行结果和顺序一致性模型中的执行结果相同。</p>
<p>JMM在具体实现上的基本方针为：在不改变（正确同步）程序执行结果的前提下，尽可能地为编译器和处理器打开优化之门（例如临界区的代码可以重排序）。</p>
<h1 id="最小安全性"><a href="#最小安全性" class="headerlink" title="最小安全性"></a>最小安全性</h1><p>对于<strong>未同步</strong>或<strong>未正确同步</strong>的多线程程序，JMM只提供最小安全性：线程执行时读取到的值，要么是之前某个线程写入的值，要么是默认值，JMM保证线程读操作读取到的值不是无中生有的。</p>
<h1 id="JMM与顺序一致性内存模型比较"><a href="#JMM与顺序一致性内存模型比较" class="headerlink" title="JMM与顺序一致性内存模型比较"></a>JMM与顺序一致性内存模型比较</h1><p>未同步的程序在JMM和顺序一致性模型中都表现出整体上执行顺序是无序的，其执行结果也无法预知。</p>
<p>未同步的程序在这两个模型中执行的差异：</p>
<ol>
<li>顺序一致性模型保证单线程内的操作会按程序的顺序执行，而JMM不保证单线程内的操作会按程序的顺序执行（比如正确同步的多线程程序在临界区内的重排序）。</li>
<li>顺序一致性模型保证所有线程只能看到<strong>一致</strong>的操作执行顺序，而JMM不保证所有线程能看到一致的操作执行顺序。这一点前面也已经讲过，这里就不再赘述。</li>
<li>JMM不保证对64位的long型和double型变量的读/写操作具有原子性，而顺序一致性模型保证对所有的内存读/写操作都具有原子性。</li>
</ol>
<p>第3个差异与处理器总线的工作机制密切相关。在计算机中，数据通过总线在处理器和内存之间传递。<strong>每次处理器和内存之间的数据传递都是通过一系列步骤来完成的</strong>，这一系列步骤称之为<strong>总线事务</strong>（bus transaction）。总线事务包括读事务（read transaction）和写事务（write transaction）。读事务从内存传送数据到处理器，写事务从处理器传送数据到内存，每个事务会读/写内存中一个或多个物理上连续的字。这里的关键是，总线会同步试图并发使用总线的事务。在一个处理器执行总线事务期间，总线会禁止其它所有的处理器和I/O设备执行内存的读/写。<br><img src="/images/jmm/bus-transaction.png" alt=""></p>
<p>总线的工作机制可以把所有处理器对内存的访问以<strong>串行化</strong>的方式来执行。在任意时刻，最多只能有一个处理器可以访问内存。这个特性保证了单个总线事务中的内存读/写操作具有<strong>原子性</strong>。</p>
<p>在不同平台上的处理器可能把一个64位的long/double类型的变量的写操作拆分为两个32位的写操作来执行，而这两个32位的写操作可能会被分配到不同的总线事务中执行，此时写操作就不具备原子性。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java与线程]]></title>
      <url>https://rogerfang.github.io/2017/01/06/Java%E4%B8%8E%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>并发不一定依赖多线程（例如PHP的多进程并发），但是在Java里面讨论并发大多数和线程离不开。</p>
<blockquote>
<p>线程是比进程更轻量级的调用执行单位，是CPU调度的基本单位。</p>
</blockquote>
<p>线程的引入，可以把一个进程的资源分配和执行调度分开，各个线程共享资源，又可以独立调度。</p>
<h1 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h1><p>实现线程主要有3种方式：使用内核线程实现、使用用户线程实现和使用用户线程加轻量级进程混合实现。</p>
<h2 id="使用内核线程实现"><a href="#使用内核线程实现" class="headerlink" title="使用内核线程实现"></a>使用内核线程实现</h2><p>内核线程就是直接使用操作系统内核支持的线程，这种线程由内核完成线程切换，内核听过操纵调度器堆线程进行调度，并负责将线程的任务映射到各个处理器上。</p>
<p>程序一般不会直接去使用内核线程，而是使用内核线程的一种高级接口——轻量级进程（Light Weight Process, LWP），轻量级进程就是通常意义上所讲的线程。</p>
<blockquote>
<p>每个轻量级进程都由一个内核线程支持。</p>
</blockquote>
<p>基于内核线程实现的，系统调用代价相对较高，需要在用户态和内核态之间切换，一个系统支持轻量级进程的数量是有限的。</p>
<h2 id="使用用户线程实现"><a href="#使用用户线程实现" class="headerlink" title="使用用户线程实现"></a>使用用户线程实现</h2><p>用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知线程存在的实现。<br>支持更大规模的线程数量，但是没有系统内核的支援，所有的线程操作都需要用户程序自己处理（一般都比较复杂）。</p>
<h2 id="使用混合实现"><a href="#使用混合实现" class="headerlink" title="使用混合实现"></a>使用混合实现</h2><p>使用户线程加轻量级进程的混合实现方式，用户线程还是完全建立在用户空间，而操作系统提供支持的轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调用功能以及处理器映射。</p>
<h2 id="Java线程的实现"><a href="#Java线程的实现" class="headerlink" title="Java线程的实现"></a>Java线程的实现</h2><p>对于Sun JDK来说，它的Windows版和Linux版都是使用一对一的线程模型实现的，一条Java线程就映射到一条轻量级进程中。</p>
<h1 id="Java线程调度"><a href="#Java线程调度" class="headerlink" title="Java线程调度"></a>Java线程调度</h1><p>线程调度是指系统为线程分配处理器使用权的过程，主要调度方式有两种，分别是协同式线程调度和抢占式线程调度。</p>
<ul>
<li>协同式线程调度，线程的执行时间由线程本身控制，线程把自己的工作执行完了后，要主动通知系统切换到另一个线程上。</li>
<li>抢占式线程调度，每个线程将由系统分配执行时间。</li>
</ul>
<blockquote>
<p>Java使用的是线程调度方式抢占式调度。</p>
</blockquote>
<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><p>Java语言定义了5种线程状态，在任意时间点，一个线程只能有且只有其中的一种状态。</p>
<ul>
<li>新建（New）：创建后尚未启动的线程。</li>
<li>运行（Runable）：线程可能正在执行，也有可能等待CPU为它分配时间。</li>
<li>无限期等待（Waiting）：该状态下的线程不会被分配CPU执行时间，要等待被其他线程显示地唤醒。</li>
<li>限期等待（Timed Waiting）：该状态下的线程也不会被分配CPU执行时间，不过无须等待被其他线程显示地唤醒，在一定时间之后会由系统自动唤醒。</li>
<li>阻塞（Blocked）：阻塞状态下的线程在等待获取到一个排他锁，这个事件将在另外一个线程放弃这个锁的时候产生。</li>
<li>结束（Terminated）：已终止的线程状态。</li>
</ul>
<p>阻塞状态是线程阻塞在进入synchronized关键字修饰的方法或代码块时的状态，但是阻塞在<strong>java.concurrent包</strong>中Lock接口的线程状态却是<strong>等待状态</strong>，因为java.concurrent包中Lock接口对于阻塞的实现均使用了LockSupport类中的相关方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JMM: Java内存模型]]></title>
      <url>https://rogerfang.github.io/2017/01/06/JMM-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="硬件效率与一致性"><a href="#硬件效率与一致性" class="headerlink" title="硬件效率与一致性"></a>硬件效率与一致性</h1><p>一般来说，“<strong>让计算机并发执行若干个运算任务</strong>”（多任务处理）可以“<strong>更充分地利用计算机处理器的效能</strong>”。但是其中一个重要的<strong>复杂性</strong>（问题）来源是：绝大多数的运算任务不可能只靠处理器的计算就能完成，<em>处理器还需要和内存交互</em>，如读取运算数据、存储原酸结果等，这些I/O操作很难消除。</p>
<p>由于计算机的存储设备与处理器的运算速度有几个数量级的差距，所以每个处理器增加自己的高速缓存（Cache）来作为内存与处理器之间的缓冲。将运算需要的数据复制到缓存中，让运算能快速进行，运算结束后再从缓存同步到内存中，这样处理器就无须等待缓慢的内存读写了。</p>
<p>基于告诉缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是也引入了一个新问题：<strong>缓存一致性</strong>（Cache Coherence）。当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致缓存数据不一致。</p>
<p>“<strong>内存模型</strong>”：可以理解为对特定的内存或高速缓存进行读写访问的过程抽象。</p>
<p>处理器、高速缓存、主内存间的交互关系<br><img src="/images/jmm/cpu-cache-memory-process.png" alt=""></p>
<h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><p><strong>Java内存模型</strong>（Java Memory Model，JMM）：用来屏蔽掉硬件和操作系统的内存访问差异，以实现各平台达到一致的内存访问效果。</p>
<blockquote>
<p>Java<strong>线程通信</strong>由Java内存模型控制，JMM决定一个线程对共享变量的写入何时对另一个线程可见，也就是提供<strong>内存可见性</strong>保证。</p>
</blockquote>
<p>JMM的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量的这些底层细节。</p>
<blockquote>
<p>此处的变量指的是线程共享的变量，包括了实例字段、静态字段和构成数组对象的元素。</p>
</blockquote>
<p>JMM是一个语言及的内存模型，处理器内存模型是硬件级的内存模型。</p>
<h2 id="主内存与工作内存"><a href="#主内存与工作内存" class="headerlink" title="主内存与工作内存"></a>主内存与工作内存</h2><p>Java内存模型规定所有的变量都存储在主内存（虚拟机内存的一部分，可以和硬件中的主内存类比）中。<br>每条线程都有自己的工作内存（Working Memory，或者叫<strong>本地内存</strong>，可以和硬件中的高速缓存类比，本地内存只是JMM的一个抽象概念，并不真实存在）。</p>
<p>线程A与线程B之间如要通信的话，必须要经历下面2个步骤：</p>
<ol>
<li>首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。</li>
<li>然后，线程B到主内存中去读取线程A之前已更新过的共享变量。</li>
</ol>
<p>线程、工作内存、主内存间的交互关系<br><img src="/images/jmm/jmm-thread-memory-process.png" alt=""></p>
<h2 id="内存间的交互操作"><a href="#内存间的交互操作" class="headerlink" title="内存间的交互操作"></a>内存间的交互操作</h2><p>关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，JMM中定义了以下8种操作完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的（对于long、double类型的变量来说，在某些平台上有例外）。</p>
<ol>
<li><p>lock(锁定)<br> 作用于主内存的变量，把一个变量标识为线程独占状态。</p>
</li>
<li><p>unlock(解锁)<br> 作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后才能被其他线程锁定。</p>
</li>
<li><p>read(读取)<br> 作用于主内存的变量，把一个变量的值从主内存中传输到线程的工作内存中，以便load动作使用。</p>
</li>
<li><p>load(载入)<br> 作用于工作内存的变量，把read操作从主内存中得到变量值放入工作内存的<strong>变量副本</strong>中。</p>
</li>
<li><p>use(使用)<br> 作用于工作内存的变量，把工作内存中的一个变量的值传递给<strong>工作引擎</strong>。</p>
</li>
<li><p>assign(赋值)<br> 作用于工作内存的变量，把一个从执行引擎接收到的值赋给工作内存的变量。</p>
</li>
<li><p>store(存储)<br> 作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便write操作使用。</p>
</li>
<li><p>write(写入)<br> 作用于主内存的变量，把store操作从工作内存中得到的变量放入主内存的变量中。</p>
</li>
</ol>
<p><strong>JMM还规定了上述8种操作必须满足如下规则</strong>：</p>
<ul>
<li>不允许read和load、store和write操作之一单独出现<br>  即不允许一个共享变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。</li>
<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中。</li>
<li>一个新的共享变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。</li>
<li>一个共享变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li>
<li>如果对一个共享变量执行lock操作，那将会清空工作内存中变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。</li>
<li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定的变量。</li>
<li>对一个变量执行unlock操作之前，必须先把变量同步回主内存中。</li>
</ul>
<h2 id="JMM的特征"><a href="#JMM的特征" class="headerlink" title="JMM的特征"></a>JMM的特征</h2><p>Java内存模型是围绕着在并发过程中如何处理<strong>原子性</strong>、<strong>可见性</strong>和<strong>有序性</strong>这3个特征来建立的。</p>
<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>原子性是指一个操作不能被打断，要么全部执行完毕，要么不执行。</p>
<p>JMM直接保证的原子性变量操作包括read、load、assign、use、store和write。大致可以认为基本数据类型的访问读写是具备原子性的（例外就是long和double的非原子协定）。</p>
<p>如果需要一个更大范围的原子性保证，JMM还提供了lock和unlock操作来满足这种需求，尽管虚拟机未把lock和unlock操作直接开放给用户使用，但是却提供了更高层次的字节码指令<code>monitorenter</code>和<code>monitorexit</code>来隐式地使用这两个操作，这两个字节码指令反映到Java代码中就是同步快——<code>synchronized</code>关键字，因此同步块之间的操作也具备原子性。</p>
<h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>可见性是指一个线程对共享变量做了修改之后，其他的线程立即能够看到（感知到）该变量这种修改（变化）。</p>
<p>Java内存模型是通过将在工作内存中的变量修改后的值同步到主内存，在读取变量前从主内存刷新最新值到工作内存中，这种依赖主内存的方式来实现可见性的。</p>
<p>可见性的实现：volatile、synchronized、final关键字还有Lock。</p>
<ul>
<li>普通变量和volatile变量都是如此，区别是volatile的特殊规则保证了新值能立即同步到主内存，以及使用前立即从主内存刷新。</li>
<li>synchronized同步块的可见性是由<code>unlock</code>操作的规则获得的。</li>
<li><code>final</code>关键字的可见性是指被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把“this”引用传递出去，那么其他线程就能看见final字段的值。</li>
<li>使用Lock接口的实现锁，和synchronized由相同的语义。</li>
</ul>
<h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>在本线程内观察，操作都是有序的；如果在一个线程中观察另外一个线程，所有的操作都是无序的。前半句是指“线程内表现为串行语义（WithIn Thread As-if-Serial Semantics）”,后半句是指“指令重排”现象和“工作内存和主内存同步延迟”现象。</p>
<p>Java提供了两个关键字volatile和synchronized来保证多线程之间操作的有序性,volatile关键字本身通过加入内存屏障来禁止指令的重排序，而synchronized关键字通过一个变量在同一时间只允许有一个线程对其进行加锁的规则来实现，在单线程程序中，不会发生“指令重排”和“工作内存和主内存同步延迟”现象，只在多线程程序中出现。</p>
<h1 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h1><p>在执行程序时，为了提高性能（例如，在不改变程序语义的前提下，减少寄存器、缓存的读写次数），编译器和处理器通常会对指令进行重排序。</p>
<p>重排序分为3种类型：</p>
<ol>
<li><p>编译器优化的重排序<br> 编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p>
</li>
<li><p>指令集并行的重排序<br> 现代处理器采用了指令级并行技术（Instruction-Level Parallelism，ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</p>
</li>
<li><p>内存系统的重排序<br> 由于处理器使用缓存和读/写缓冲区，这使得加载和存储执行看上去可能是在乱序执行。</p>
</li>
</ol>
<p>从源码到最终执行的指令序列<br><img src="/images/jmm/instruction-reordering.png" alt=""></p>
<blockquote>
<p>这些重排序可能会导致多线程程序出现内存可见性问题。</p>
</blockquote>
<p>对于<strong>编译器</strong>重排序，JMM的编译器重排序规则会禁止特定类型的编译器重排序。<br>对于<strong>处理器</strong>重排序，JMM的处理器重排序规则会要求Java编译器在生成指令序列时，插入特定类型的<strong>内存屏障</strong>（Memory Barriers）指令，通过内存屏障来禁止特定类型的重排序。</p>
<blockquote>
<p>JMM确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p>
</blockquote>
<h2 id="数据依赖性"><a href="#数据依赖性" class="headerlink" title="数据依赖性"></a>数据依赖性</h2><p>如果两个操作访问同一个变量，且这两个操作中有一个为写操作，此时这两个操作之间就存在<strong>数据依赖性</strong>。</p>
<p>数据依赖性包括3种情况：写后读、写后写、读后写。只要重排序这两个操作，程序执行的结果就会改变。</p>
<blockquote>
<p>编译器和处理器在重排序时，会遵守数据依赖性，仅针对<strong>单个处理器</strong>中执行的指令序列和<strong>单个线程</strong>中执行的操作。</p>
</blockquote>
<h2 id="as-if-serial语义"><a href="#as-if-serial语义" class="headerlink" title="as-if-serial语义"></a>as-if-serial语义</h2><p>as-if-serial语义：不管怎么重排序（编译器和处理器），<strong>单线程</strong>程序的执行结果不能被改变。</p>
<h1 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h1><p>在JMM中，如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须要存在happens-before关系，这里的两个操作既可以是一个线程内的，也可以是在不同线程之间的。</p>
<p>与程序员密切相关的happens-before规则：</p>
<ul>
<li>程序顺序规则：一个线程中的每个操作，happens-before于该线程中的任意后续操作。</li>
<li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li>
<li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li>
<li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li>
</ul>
<blockquote>
<p>两个操作之间具有happens-before关系，并不意味着前一个操作必须要在后一个操作之前执行！<br>happens-before仅仅要求前一个操作（执行的结果）对后一个操作<strong>可见</strong>。</p>
</blockquote>
<p><strong>happens-before与JMM的关系图</strong>：<br><img src="/images/jmm/jmm-happens-before.png" alt=""><br>一个happens-before规则对应于一个或多个编译器和处理器重排序规则。happens-before规则避免Java程序员为了理解JMM提供的内存可见性保证去学习复杂的重排序规则，及其实现方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM: 垃圾收集器]]></title>
      <url>https://rogerfang.github.io/2017/01/05/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>垃圾收集算法是内存回收的方法论，垃圾收集器是内存回收的具体实现。</p>
<p>HotSpot虚拟机的垃圾收集器如图所示，图中展示了7种分别作用于新生代和老年代的收集器，如果两个收集器之间存在连线，就说明可以搭配使用。<br><img src="/images/jvm/jvm-gc.png" alt=""></p>
<h1 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h1><ul>
<li>并行（Parallel）：并行就是同时执行。<br>  多条垃圾收集线程并行工作，但用户线程仍处于等待状态。</li>
<li>并发（Concurrent）：多个操作可以在重叠的时间段内就那些。<br>  用户线程与垃圾收集线程同时执行，但不一定是并行执行，可能会交替执行。</li>
</ul>
<blockquote>
<p>并行是指物理上同时执行，并发是指能够让多个任务在逻辑上交织执行的程序设计。</p>
</blockquote>
<h1 id="Minor-GC和Full-GC"><a href="#Minor-GC和Full-GC" class="headerlink" title="Minor GC和Full GC"></a>Minor GC和Full GC</h1><ul>
<li>新生代GC（Minor GC）：指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</li>
<li>老年代GC（Major GC）：指发生在老年代的GC。Major GC的速度一般会比Minor GC慢10倍以上。</li>
<li>老年代GC（Major GC/Full GC）：指发生在新生代和老年代的GC，由于出现了Major GC，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行Major GC的策略选择过程），所以Major GC和Full GC区别不大。</li>
</ul>
<h1 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h1><p>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即<br><code>吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）。</code></p>
<h1 id="Serial收集器-新生代"><a href="#Serial收集器-新生代" class="headerlink" title="Serial收集器(新生代)"></a>Serial收集器(新生代)</h1><p>Serial收集器是一个<strong>单线程</strong>的收集器，但它的“单线程”的意义并不仅仅说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。</p>
<blockquote>
<p>Stop The World</p>
</blockquote>
<p><strong>应用场景</strong>：Serial收集器是虚拟机运行在Client模式下的默认新生代收集器。</p>
<h1 id="ParNew收集器（新生代）"><a href="#ParNew收集器（新生代）" class="headerlink" title="ParNew收集器（新生代）"></a>ParNew收集器（新生代）</h1><p>ParNew收集器是Serial收集器的<strong>多线程</strong>版本。</p>
<p>除了使用多条线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一样。</p>
<p><strong>应用场景</strong>：ParNew收集器是许多运行在Server模式下的虚拟机中首选的新生代收集器。</p>
<h1 id="Parallel-Scavenge收集器（新生代）"><a href="#Parallel-Scavenge收集器（新生代）" class="headerlink" title="Parallel Scavenge收集器（新生代）"></a>Parallel Scavenge收集器（新生代）</h1><p>Parallel Scavenge收集器，也是新生代使用复制算法的收集器，又是并行的多线程收集器。<br>但是Parallel Scavenge收集器和其他收集器的关注点不同，它的目标是达到一个可控制的吞吐量（Throughput），所以也经常称为“<strong>吞吐量优先</strong>”收集器。</p>
<h1 id="Serial-Old收集器（老年代）"><a href="#Serial-Old收集器（老年代）" class="headerlink" title="Serial Old收集器（老年代）"></a>Serial Old收集器（老年代）</h1><p>Serial Old收集器是Serial收集器的老年代版本，同样也是一个单线程收集器，使用“<strong>标记-整理</strong>”算法。</p>
<p><strong>应用场景</strong>：Serial Old收集器主要是给虚拟机在Client模式下使用。在Server模式下的用途：一个是与Parallel Scavenge收集器搭配使用，另一个是作为CMS收集器的后备预案。</p>
<h1 id="Parallel-Old收集器（老年代）"><a href="#Parallel-Old收集器（老年代）" class="headerlink" title="Parallel Old收集器（老年代）"></a>Parallel Old收集器（老年代）</h1><p>Parallel Old收集器是Parallel Scavenge收集器的老年代版本，使用<strong>多线程</strong>和“<strong>标记-整理</strong>”算法。</p>
<p>直到Parallel Old收集器出现，“吞吐量优先”收集器才有了名副其实的应用组合，与Parallel Scavenge收集器一起使用。</p>
<h1 id="CMS收集器（老年代）"><a href="#CMS收集器（老年代）" class="headerlink" title="CMS收集器（老年代）"></a>CMS收集器（老年代）</h1><p>CMS（Concurrent Mark Sweep）收集器是一种以<strong>获取最短回收停顿时间</strong>为目标的收集器，基于“<strong>标记-清除</strong>”算法。</p>
<p>目前只有<em>Serial收集器</em>和<em>ParNew收集器</em>能与CMS收集器配合工作。<br>在JDK 1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾收集器——CMS收集器，这款收集器是HotSpot虚拟机中第一款真正意义上的<strong>并发收集器</strong>，它第一次实现了让垃圾收集线程与用户线程同时工作。</p>
<p>CMS的运作过程分为4个步骤：</p>
<ol>
<li><p>初始标记（CMS initial mark）</p>
<blockquote>
<p>Stop The World</p>
</blockquote>
<p> 初始标记仅仅是标记一下GC Roots能直接关联到的对象，速度很快。</p>
</li>
<li>并发标记（CMS concurrent mark）<br> 并发标记就是进行GC Roots Tracing的过程。</li>
<li><p>重新标记（CMS remark）</p>
<blockquote>
<p>Stop The World</p>
</blockquote>
<p> 重新标记是为了修正并发标记期间因用户程序继续运作而导致目标标记产生表动的那一部分对象的标记记录。</p>
</li>
<li><p>并发清除（CMS concurrent sweep）</p>
</li>
</ol>
<p>由于整个过程中耗时最长的并发标记和并发清除过程收集器线程都是和用户线程一起执行工作的，所以，从总体上说，CMS收集器的内存回收过程是与用户线程一起<strong>并发执行</strong>的。</p>
<h1 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h1><p>G1（Garbage-First）是一款面向服务端应用的垃圾收集器，采用“<strong>标记-整理</strong>”算法。HotSpot开发团队赋予它的使命是未来可以替换掉JDK 1.5中发布的CMS收集器。与其他GC收集器相比，G1具备如下特点。</p>
<ul>
<li><p>并行与并发<br>  G1能充分利用多CPU、多核环境下的硬件优势，使用多个CPU来缩短Stop-The-World停顿的时间，部分其他收集器原本需要停顿Java线程执行的GC动作，G1收集器仍然可以通过并发的方式让Java程序继续执行。</p>
</li>
<li><p>分代收集<br>  与其他收集器一样，分代概念在G1中依然得以保留。虽然G1可以不需要其他收集器配合就<strong>能独立管理整个GC堆</strong>，但它能够采用不同的方式去处理新创建的对象和已经存活了一段时间、熬过多次GC的旧对象以获取更好的收集效果。</p>
</li>
<li><p>空间整合<br>  与CMS的“标记—清理”算法不同，G1从整体来看是基于“<strong>标记—整理</strong>”算法实现的收集器，从局部（两个Region之间）上来看是基于“<strong>复制</strong>”算法实现的，但无论如何，这两种算法都意味着G1<strong>运作期间不会产生内存空间碎片</strong>，收集后能提供规整的可用内存。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。</p>
</li>
<li><p>可预测的停顿<br>  这是G1相对于CMS的另一大优势，降低停顿时间是G1和CMS共同的关注点，但G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p>
</li>
</ul>
<p>G1收集器的运作大致可划分为以下几个步骤：</p>
<ol>
<li><p>初始标记（Initial Marking）<br> 初始标记阶段仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS（Next Top at Mark Start）的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象，这阶段需要停顿线程，但耗时很短。</p>
</li>
<li><p>并发标记（Concurrent Marking）<br> 并发标记阶段是从GC Root开始对堆中对象进行可达性分析，找出存活的对象，这阶段耗时较长，但可与用户程序并发执行。</p>
</li>
<li><p>最终标记（Final Marking）<br> 最终标记阶段是为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程Remembered Set Logs里面，最终标记阶段需要把Remembered Set Logs的数据合并到Remembered Set中，这阶段需要停顿线程，但是可并行执行。</p>
</li>
<li><p>筛选回收（Live Data Counting and Evacuation）<br> 筛选回收阶段首先对各个Region的回收价值和成本进行排序，根据用户所期望的GC停顿时间来制定回收计划，这个阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分Region，时间是用户可控制的，而且停顿用户线程将大幅提高收集效率。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM: 垃圾回收机制]]></title>
      <url>https://rogerfang.github.io/2017/01/05/JVM-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>垃圾回收可以有效的防止内存泄露，有效的使用空闲的内存。<strong>Java堆</strong>和<strong>方法区</strong>的内存分配和回收是动态的，因而垃圾收集器所关注的也是这部分内存。</p>
<p>垃圾收集机制要考虑的两件事情：<br>（1）发现无用对象（如何判断对象是否还“存活”）；<br>（2）回收被无用对象占用的内存空间，使该空间可被程序再次使用（垃圾收集算法）。</p>
<h1 id="对象“存活”？"><a href="#对象“存活”？" class="headerlink" title="对象“存活”？"></a>对象“存活”？</h1><p>垃圾回收的第一件事情就是要确定堆内存中有哪些对象还“存活”，哪些已“死去”。</p>
<h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>引用计数（Reference Counting）是垃圾收集器中的早期策略。在这种方法中，堆中每个对象实例都有一个引用计数。</p>
<p>当一个对象被创建时，且将该对象实例分配给一个变量，该变量计数设置为1。当任何其它变量被赋值为这个对象的引用时，计数加1；但当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的引用计数器减1。任何引用计数器为0的对象实例可以被当作垃圾收集。当一个对象实例被垃圾收集时，它引用的任何对象实例的引用计数器减1。</p>
<ul>
<li><p>优点<br>　　引用计数算法实现简单，判定效率高。</p>
</li>
<li><p>缺点<br>　　Java虚拟机中没有选用该算法，因为无法检测出<strong>循环引用</strong>。（如父对象有一个对子对象的引用，子对象反过来引用父对象。这样，他们的引用计数永远不可能为0）</p>
</li>
</ul>
<h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><p>可达性分析（Reachablility Analysis）算法的基本思想是：通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为<strong>引用链</strong>（Reference Chain），当一个对象到GC Roots没有任何引用链相连时（不可达），则证明此对象是不可用的。</p>
<p>Java中，可以作为GC Roots的对象包括：</p>
<ul>
<li>虚拟机栈中引用的对象。</li>
<li>方法区中类静态属性引用的对象。</li>
<li>方法区中常量引用的对象。</li>
<li>本地方法栈中JNI（即一般所说的Native方法）引用的对象。</li>
</ul>
<blockquote>
<p>枚举根节点会导致（Stop The World），也就是GC进行时必须停顿所有执行线程。</p>
</blockquote>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>JDK 1.2中对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用、虚引用4种，而不仅仅是只有被引用或没有被引用两种状态。</p>
<blockquote>
<p>参见：<a href="https://rogerfang.github.io/2016/12/31/Java-%E5%87%A0%E7%A7%8D%E5%BC%95%E7%94%A8/">https://rogerfang.github.io/2016/12/31/Java-%E5%87%A0%E7%A7%8D%E5%BC%95%E7%94%A8/</a></p>
</blockquote>
<h1 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h1><p>在方法区中进行垃圾收集的性价比一般比较低，垃圾收集的主要内容包括两部分：<strong>废弃的常量</strong>和<strong>无用的类</strong>。</p>
<ol>
<li>“废弃常量”的判定：没有其他地方引用这个字面量。</li>
<li>“无用的类”的判定，条件较为苛刻，必须同时满足以下3个条件：<ul>
<li>该类所有的实例都被回收；</li>
<li>加载该类的ClassLoader已经被回收；</li>
<li>该类对应的<code>java.lang.Class</code>对象没有在其他地方被引用，无法在其他地方通过反射来访问该类。<blockquote>
<p>反射、动态代理、CGLib等ByteCode框架、动态生成JSP以及OSGi这类频繁自定义ClassLoader的场景都需要虚拟机具备类卸载的功能。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><h2 id="Mark-Sweep（标记清除）"><a href="#Mark-Sweep（标记清除）" class="headerlink" title="Mark-Sweep（标记清除）"></a>Mark-Sweep（标记清除）</h2><p>此算法执行分为标记和清除两阶段。第一阶段从引用根节点开始标记所有被引用的对象，第二阶段遍历整个堆，把未标记的对象清除。</p>
<p>不足：<br>(1)效率问题，标记和清除两个过程都不高；<br>(2)空间问题，标记清除后悔产生大量不连续的内存碎片，当无法找到足够的连续内存分配对象时会提前出发一次垃圾收集动作。</p>
<h2 id="Copying（复制）"><a href="#Copying（复制）" class="headerlink" title="Copying（复制）"></a>Copying（复制）</h2><p>复制算法把内存空间划为两个相等的区域，每次只使用其中一个区域。垃圾回收时，遍历当前使用区域，把存活的对象复制到另外一个区域中，然后再把已使用过的内存空间一次清理掉。</p>
<p>实现简单，运行高效，代价是需要两倍内存空间。</p>
<p>HotSpot虚拟机按照8:1的比例将新生代分为1个大内存的Eden区和2个小内存的Survivor区。每次使用Eden和一个Survivor区，当回收时，把存活的对象复制到剩下的一个Survivor区中。如果这个Survivor空间不够时，依赖老年代进行<strong>分配担保</strong>（Handle Promotion）。</p>
<h2 id="Mark-Compact（标记整理）"><a href="#Mark-Compact（标记整理）" class="headerlink" title="Mark-Compact（标记整理）"></a>Mark-Compact（标记整理）</h2><p>标记整理算法结合了“标记-清除”和“复制”两个算法的优点。也是分两阶段，第一阶段从根节点开始标记所有被引用对象，第二阶段遍历整个堆，把清除未标记对象并且把存活对象“压缩”到堆的其中一块，按顺序排放。此算法避免了“标记-清除”的碎片问题，同时也避免了“复制”算法的空间问题。</p>
<h2 id="Generational-Collection（分代收集）"><a href="#Generational-Collection（分代收集）" class="headerlink" title="Generational Collection（分代收集）"></a>Generational Collection（分代收集）</h2><p>一般把Java堆分为<strong>新生代</strong>和<strong>老年代</strong>。根据各个年代的特点选择合适的收集算法，新生代每次垃圾收集时只有少量存活可以选用复制算法，而老年代对象存活率高、没有额外空间进行分配担保，必须使用“标记-清除”或“标记-整理”算法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM: HotSpot虚拟机中的对象]]></title>
      <url>https://rogerfang.github.io/2017/01/05/JVM-HotSpot%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>探讨HotSpot虚拟机在Java堆中的对象分配、布局和访问过程。</p>
<h1 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h1><blockquote>
<p>这里仅讨论普通的Java对象，不涉及数组和Class对象等</p>
</blockquote>
<p>对象的创建过程：</p>
<ol>
<li>虚拟机遇到一条<code>new</code>指令时，首先去检查这个指令的参数是否能够在常量池中定位到一个类的符号引用，比检查这个符号引用代表的类是否已被加载、解析和初始化过。</li>
<li><p>类加载检查通过后，接着虚拟机将为新生对象分配内存。对象所需的内存大小在类加载完成后可知。<br>Java堆中的内存分配有两种方式：<br><strong>指针碰撞</strong>（Bump the Pointer）：假设Java堆中内存是绝对规整的，所有用过的内存都放在一遍，没用过的内存放在另一边， 中间放着一个指针作为分界点的指示器。通过挪动指针来分配所需内存。<br><strong>空闲列表</strong>（Free List）：对于Java堆中的内存并不是规整的，虚拟机维护一个列表，记录上哪些内存块是可用的，分配的时候从列表中找到一块足够大的空间。</p>
<blockquote>
<p>分配方式是由Java堆是否规整决定，而Java堆是否规整是由所采用的垃圾回收器是否带有压缩整理的功能决定。</p>
</blockquote>
</li>
<li><p>内存分配完成后，虚拟机将分配的内存空间都初始化为零值。</p>
</li>
<li>接着，虚拟机要对对象进行必要的设置。例如这个对象是哪个类的实例，如何才能找到类的元数据信息，对象的哈希码，对象的GC分代年龄等信息。这些信息存放在对象头里（Header）。</li>
</ol>
<blockquote>
<p>上述创建过程完成后，从虚拟机角度来看，一个新的对象以及产生，但从Java开发者的视角来看，对象创建才刚刚开始（实例构造器<code>&lt;init&gt;()</code>方法还没执行）。</p>
</blockquote>
<h1 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h1><p>在HotSpot虚拟机中，对象在内存中存储布局可以分为3块区域：<strong>对象头</strong>（Header）、<strong>实例数据</strong>（Instance Data）和<strong>对齐填充</strong>（Padding）。</p>
<h2 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h2><p>HotSpot虚拟机的对象头包括两部分信息：</p>
<ul>
<li>用于存储对象自身的运行时数据<br>例如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等。</li>
<li>类型指针<br>类型指针：对象指向它的类元数据的指针，虚拟机通过这个指针确定这个对象是哪个类的实例。</li>
</ul>
<h2 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h2><p>实例数据部分是对象真正存储的有效信息，也是代码中定义的各字段的内容。</p>
<blockquote>
<p>无论是从父类继承下来的，还是在子类中定义的，都要记录起来。</p>
</blockquote>
<h2 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h2><p>对齐填充并不是必须的，占位符的作用。由于HotSpot虚拟机的自动内存管理要求对象的大小必须是8字节的整数倍。</p>
<h1 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h1><p>Java程序需要通过栈上的reference数据来操作堆上的具体对象，reference类型在Java虚拟机规范中只规定了一个对象的引用，并没有定义这个引用通过何种方式去定位、访问堆中的具体位置。</p>
<p>对象的访问方式取决于虚拟机实现，目前主流的访问方式有使用<strong>句柄</strong>和<strong>直接指针</strong>两种。</p>
<h2 id="句柄访问"><a href="#句柄访问" class="headerlink" title="句柄访问"></a>句柄访问</h2><p>如果使用句柄访问的话，那么Java堆中会划分出一块内存作为句柄池，<strong>reference存储的就是对象的句柄地址</strong>。句柄中包含了对象的实例数据和类型数据的具体地址信息。<br><img src="/images/jvm/object-access-by-handle.png" alt=""></p>
<h2 id="直接指针访问"><a href="#直接指针访问" class="headerlink" title="直接指针访问"></a>直接指针访问</h2><p>如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而<strong>reference中存储的直接就是对象地址</strong>。<br><img src="/images/jvm/object-access-by-direct-pointer.png" alt=""></p>
<h2 id="两者比较"><a href="#两者比较" class="headerlink" title="两者比较"></a>两者比较</h2><p>使用句柄访问最大的好处是存储的是稳定句柄地址，对象被移动（例如垃圾回收移动对象）时只会改变句柄中的实例数据指针，而reference本身不需要修改。</p>
<p>使用直接指针访问最大的好处是速度更快，节省了一次指针定位的时间开销。</p>
<blockquote>
<p>HotSpot中使用的是<strong>直接指针</strong>进行对象访问的。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM: Java虚拟机运行时数据区域]]></title>
      <url>https://rogerfang.github.io/2017/01/05/JVM-Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Java与C/C++之间有一堵由<strong>动态内存分配</strong>和<strong>垃圾收集技术</strong>所围成的“高墙”。</p>
</blockquote>
<p>Java虚拟机在执行Java程序的过程中会把它管理的内存划分为若干个不同的数据区域。<br><img src="/images/jvm/jvm-runtime-data-area.png" alt=""></p>
<h1 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h1><p>程序计数器（Program Counter Register）是一块<strong>线程私有</strong>的内存空间，可以看作是<strong>当前线程</strong>所执行的字节码的行号指示器。</p>
<p>由于JVM的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器内核只会执行一条线程中的指令。因此，<strong>为了线程切换后能恢复到正确的执行位置</strong>，每个线程都需要一个独立的程序计数器。</p>
<blockquote>
<p>解释器工作时就是通过改变这个计数器的值来选取下一条要执行的字节码指令。</p>
</blockquote>
<p>此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code>情况的区域。</p>
<h1 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h1><p>Java虚拟机栈（VM Stack）也是<strong>线程私有</strong>的，它的生命周期与线程相同。虚拟机栈描述的是<strong>方法执行</strong>的内存模型，每个方法在执行时都会创建一个栈帧（Stack Frame），用于存储<em>局部变量表</em>、<em>操作数栈</em>、<em>动态连接</em>、<em>方法出口</em>等信息。<br><img src="/images/jvm/vm-stack-memory-model.png" alt=""></p>
<blockquote>
<p>具体栈帧结构可以参见：字节码执行引擎，<a href="https://rogerfang.github.io/2017/01/04/JVM-%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-1-%E6%A6%82%E8%BF%B0/">https://rogerfang.github.io/2017/01/04/JVM-%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-1-%E6%A6%82%E8%BF%B0/</a></p>
</blockquote>
<p>Java虚拟机规范对虚拟机栈规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError</code>异常。当扩展虚拟机栈动态扩展时，如果无法申请到足够的内存，将会抛出<code>OutOfMemoryError</code>异常。</p>
<h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p>本地方法栈（Native Method Stack）与虚拟机栈类似，只不过虚拟机栈为虚拟机执行Java方法（字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p>
<blockquote>
<p>HotSpot虚拟机直接将本地方法栈和虚拟机栈合二为一。</p>
</blockquote>
<p>和虚拟机栈一样，也会抛出<code>StackOverflowError</code>和<code>OutOfMemoryError</code>异常。</p>
<h1 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h1><p>Java堆（Heap）是Java虚拟机所管理的内存中最大的一块，被所有<strong>线程共享</strong>，虚拟机启动时创建。</p>
<blockquote>
<p>几乎所有的对象实例（以及数组）都在这里分配内存。但是随着JIT编译器的发展和逃逸分析技术成熟，栈上分配、标量替换优化技术会导致一些变化，也就变得没那么绝对。</p>
</blockquote>
<p>Java堆是垃圾收集器管理的主要区域，很多时候也被称为“<strong>GC堆</strong>”。<br>如果堆中没有内存来完成实例分配，并且堆也无法再扩展时，将会抛出<code>OutOfMemoryError</code>异常。</p>
<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>方法区（Method Area）也是<strong>线程共享</strong>的内存区域，它用于存储已被虚拟机加载的<em>类信息</em>、<em>常量</em>、<em>静态变量</em>、<em>即时编译器编译后的代码</em>等数据。</p>
<p>Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名Non-Heap“非堆”，目的是与Java堆区分开。</p>
<blockquote>
<p>这个区域的内存回收比较少见，主要是针对<strong>常量池的回收</strong>和对<strong>类型的卸载</strong>。</p>
</blockquote>
<h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池（Runtime Constant Pool）是方法区的一部分，Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，<strong>用于存放编译期生成的各种字面量和符号引用</strong>，这部分内容在类加载后进入方法区的运行时常量池中存放。</p>
<p>除了保存Class文件中描述的符号引用外，还会把翻译出来的<strong>直接引用</strong>也存储在运行时常量池中。</p>
<blockquote>
<p>运行时常量池 相对于 Class文件常量池的一个重要特征是具备动态性，也就是运行期间也可能将新的常量放入池中，例如String类的<code>intern()</code>方法。</p>
</blockquote>
<p>当常量池无法再申请到内存时，也会抛出<code>OutOfMemoryError</code>异常。</p>
<h1 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h1><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域。</p>
<p>在JDK 1.4中新加入的<strong>NIO</strong>类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O模式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样在一些场景能提高性能，因为避免了在Java堆和Native堆中来回赋值数据。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM: 字节码执行引擎(2)-方法调用]]></title>
      <url>https://rogerfang.github.io/2017/01/04/JVM-%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-2-%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>方法调用不同于方法执行，方法调用阶段唯一的任务就是确定被调用方法的版本（即调用哪一个方法），暂时还不涉及方法内部的具体运行过程。</p>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><blockquote>
<p>解析调用一定是个静态的过程，在编译期间就完全确定，在类加载的解析阶段就会把涉及的符号引用转换为可确定的直接引用，不会延迟到运行期再去完成。</p>
</blockquote>
<p>所有方法调用中的目标方法在Class文件中都是一个常量池中的符号引用，在类加载的解析阶段，会将其中的一部分符号引用转化为直接引用。这种解析能成立的前提是：方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期是不可改变的。也就是说，调用目标在程序代码写好、编译器进行编译时就必须确定下来。这类方法的调用称为解析（Resolution）。</p>
<blockquote>
<p>符合“<strong>编译期可知，运行期不可变</strong>”这个要求的方法，主要包括<strong>静态方法</strong>和<strong>私有方法</strong>两大类。</p>
</blockquote>
<p>与之相对应的是，JVM提供了5条方法调用字节码指令：<br><code>invokestatic</code>：调用静态方法。<br><code>invokespecial</code>：调用实例构造器<code>&lt;init&gt;()</code>方法、私有方法和父类方法。<br><code>invokevirtual</code>：调用所有的虚方法。<br><code>invokeinterface</code>：调用接口方法，会在运行时再确定一个实现此接口的对象。<br><code>invokedynamic</code>：先在运行时动态解析出调用点限定符所引用的方法，然后再执行该方法。</p>
<blockquote>
<p>前4条调用指令，分派逻辑是固化在JVM内部的，而<code>invokedynamic</code>指令的分派逻辑是由用户所设定的引导方法决定的。</p>
</blockquote>
<h2 id="非虚方法"><a href="#非虚方法" class="headerlink" title="非虚方法"></a>非虚方法</h2><p>在类加载的时候就会把方法调用的符号引用转换为该方法的直接引用，这些方法称为<strong>非虚方法</strong>。<br>非虚方法除了使用<code>invokestatic</code>、<code>invokespecial</code>指令调用的方法之外还有一种，就是被<code>final</code>修饰的方法。虽然<code>final</code>方法是使用<code>invokevirtual</code>指令来调用的，但是由于它无法被覆盖，没有其他版本，所以也无须对方法接收者进行多态选择。</p>
<p>那么<strong>虚方法</strong>就是与之相反的方法。</p>
<h1 id="分派"><a href="#分派" class="headerlink" title="分派"></a>分派</h1><p>分派（Dispatch）调用则可能是静态的也可能是动态地，分派调用的过程会揭示<strong>多态性</strong>的一些最基本的体现，如“重载”和“重写”在Java虚拟机中是如何实现的。</p>
<h2 id="静态分派（重载）"><a href="#静态分派（重载）" class="headerlink" title="静态分派（重载）"></a>静态分派（重载）</h2><blockquote>
<p>静态分派在英文技术文档中称为“Method Overload Resolution”。静态分派的典型应用是<strong>重载</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 重载overload</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDispatchTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;&#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;&#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Human human)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Say, Human!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Man man)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Say, Man!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(Woman woman)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Say, Woman!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Human man = <span class="keyword">new</span> Man();</div><div class="line">        Human woman = <span class="keyword">new</span> Woman();</div><div class="line">        MethodDispatchTest.say(man);</div><div class="line">        MethodDispatchTest.say(woman);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Say, Human!</div><div class="line">Say, Human!</div></pre></td></tr></table></figure></p>
<p><code>Human man = new Man();</code>代码中的<code>Human</code>称为变量的<strong>静态类型</strong>（Static Type），或者称为外观类型（Apparent Type），后面的<code>Man</code>称为变量的<strong>实际类型</strong>（Actual Type）。</p>
<blockquote>
<p>静态类型和实际类型的区别是：静态类型的变化在编译期是可知的，但是实际类型的变化却要在运行期才能确定。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 动态类型变化</span></div><div class="line">Human man = <span class="keyword">new</span> Man();</div><div class="line">man = <span class="keyword">new</span> Woman();</div><div class="line"></div><div class="line"><span class="comment">// 静态类型变化</span></div><div class="line">test.say((Man) man);</div><div class="line">test.say((Woman) man)</div></pre></td></tr></table></figure>
<p>编译器在<strong>重载</strong>时是通过参数的<strong>静态类型</strong>而不是实际类型作为判断依据的。</p>
<p>所有依赖静态类型来定位方法执行版本的分派动作称为<strong>静态分派</strong>。</p>
<h2 id="动态分派（重写）"><a href="#动态分派（重写）" class="headerlink" title="动态分派（重写）"></a>动态分派（重写）</h2><p>动态分派和多态性的另一个体现重写（Override）由很密切的关联。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 重写Override</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDispatchTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">            System.out.println(<span class="string">"Print, Human!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">            System.out.println(<span class="string">"Print, Man!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">            System.out.println(<span class="string">"Print, Woman!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Human man = <span class="keyword">new</span> Man();</div><div class="line">        Human woman = <span class="keyword">new</span> Woman();</div><div class="line">        man.print();</div><div class="line">        woman.print();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>程序输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Print, Man!</div><div class="line">Print, Woman!</div></pre></td></tr></table></figure></p>
<p><strong>虚方法</strong>的调用是通过<code>invokevirtual</code>指令来实现的，在运行期需要确定方法接收者的<strong>实际类型</strong>。<br>如果将上述重写的方法改为<code>static</code>修饰，从而变成<strong>非虚方法</strong>，那就会变成<strong>解析</strong>，输出的都是<code>Print, Human!</code>。</p>
<h1 id="动态类型语言支持"><a href="#动态类型语言支持" class="headerlink" title="动态类型语言支持"></a>动态类型语言支持</h1><p>JDK 1.7中新增了一条字节码指令<code>invokedynamic</code>指令，这条指令时为了实现动态类型语言支持而进行的改进之一，也是为JDK 1.8可以顺序实现Lambda表达式做准备。</p>
<h2 id="动态类型语言"><a href="#动态类型语言" class="headerlink" title="动态类型语言"></a>动态类型语言</h2><p><strong>动态类型语言</strong>的关键特征是它的<strong>类型检查</strong>的主体过程是在<strong>运行期</strong>而不是编译期。例如：Clojure、Erlang、Groovy、JavaScript、Jython、Lisp、PHP、Python、Ruby等。<br>相对的，在编译期就进行类型检查过程的语言（如C/C++和Java等）就是最常用的<strong>静态类型语言</strong>。</p>
<blockquote>
<p>静态类型语言在编译期确定类型，最显著的好处是编译器可以提供严谨的类型检查，利于稳定性；动态类型语言在运行期确定类型，可以为开发人员提供更多的灵活性。</p>
</blockquote>
<h2 id="JDK-1-7与动态类型"><a href="#JDK-1-7与动态类型" class="headerlink" title="JDK 1.7与动态类型"></a>JDK 1.7与动态类型</h2><h3 id="java-lang-invoke包"><a href="#java-lang-invoke包" class="headerlink" title="java.lang.invoke包"></a>java.lang.invoke包</h3><p>这个包的主要目的是在之前单纯依靠符号引用来确定调用的目标方法这种方式以外，提供一种新的动态确定目标方法的机制，称为<strong>MethodHandle机制</strong>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodHandleTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String s)</span></span>&#123;</div><div class="line">            System.out.println(<span class="string">"ClassA: "</span>+s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object obj = System.currentTimeMillis()%<span class="number">2</span> == <span class="number">0</span>?System.out:<span class="keyword">new</span> ClassA();</div><div class="line">        <span class="comment">// 无论obj最终是哪个实现类，都能正确调用println方法</span></div><div class="line">        getPrintlnMH(obj).invokeExact(<span class="string">"Roger"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> MethodHandle <span class="title">getPrintlnMH</span><span class="params">(Object receiver)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException </span>&#123;</div><div class="line">        <span class="comment">// MethodType：代表方法类型，包含了方法的返回值和具体参数</span></div><div class="line">        MethodType methodType = MethodType.methodType(<span class="keyword">void</span>.class, String.class);</div><div class="line">        <span class="comment">// lookup()方法的作用是在指定的类中查找符合给定的方法名称、方法类型，并且符合调用权限的方法句柄。</span></div><div class="line">        <span class="comment">// 调用虚方法，Java语言的规则是方法第一个参数是隐式的，也就是this指向的对象，代表该方法的接收者，通过bindTo()方法完成</span></div><div class="line">        <span class="keyword">return</span> MethodHandles.lookup().findVirtual(receiver.getClass(), <span class="string">"println"</span>, methodType).bindTo(receiver);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际上，方法<code>getPrintlnMH()</code>中模拟了<code>invokevirtual</code>指令的执行过程，只不过它的分派逻辑并非固化在Class文件的字节码上，而是通过一个具体方法来实现。</p>
<blockquote>
<p>而这个方法本身的返回值（MethodHandle对象），可以视为对最终调用的一个“引用”。</p>
</blockquote>
<h3 id="MethodHandle与Reflection机制"><a href="#MethodHandle与Reflection机制" class="headerlink" title="MethodHandle与Reflection机制"></a>MethodHandle与Reflection机制</h3><ul>
<li><p>Reflection和MethodHandle机制都是在模拟方法调用，但是Reflection是在模拟<strong>Java代码</strong>层次的方法调用，而MethodHandle是在模拟<strong>字节码</strong>层次的方法调用。<br>MethodHandles.lookup()中的3个方法<code>findStatic()</code>、<code>findVirtual()</code>、<code>findSpecial</code>正式为了对应于<code>invokestatic</code>、<code>invokevirtual</code>&amp;<code>invokeinterface</code>和<code>invokespecial</code>这几条字节码指令的执行权限校验行为。</p>
</li>
<li><p>Reflection中的<code>java.lang.reflect.Method</code>对象远比MethodHandle机制中的<code>java.lang.invoke.MethodType</code>对象所包含的信息。<br>前者包含了方法的签名、描述符以及方法属性表红各种属性的Java表示方式，还包含执行权限等的运行期信息。后者仅仅包含与执行该方法相关的信息。（<strong>Reflection是重量级的，MethodHandle是轻量级的</strong>）</p>
</li>
<li><p>MethodHandle是对字节码的方法指令调用的模拟，理论上，虚拟机在这方面做的各种优化（如方法内联），在MethodHandle上也应当可以支持（目前还不完善）。通过反射区调用方法则没有这方面的优化。</p>
</li>
</ul>
<blockquote>
<p>Reflection API的设计目标是只针对Java语言服务的，而MethodHandle则设计成可服务于所有Java虚拟机之上的语言。</p>
</blockquote>
<h3 id="invokedynamic指令"><a href="#invokedynamic指令" class="headerlink" title="invokedynamic指令"></a>invokedynamic指令</h3><p>JDK 1.7为了更好地支持动态类型语言，引入了第5条方法调用的字节码指令<code>invokedynamic</code>。</p>
<blockquote>
<p>invokedynamic指令所面向的并非Java语言，而是其他Java虚拟机之上的动态类型语言。</p>
</blockquote>
<p>在某种程度上，<code>invokedynamic</code>指令和MethodHandle机制的作用是一样的，都是为了解决前4条“invoke*”指令方法分派规则固化在虚拟机之中的问题，把如何查找目标方法的决定权从虚拟机转移到用户代码中。（MethodHandle用上层Java代码和API来实现，另一个用字节码和Class中其他属性、常量来完成）</p>
<p><strong>动态调用点</strong>（Dynamic Call Site）：每一处含有<code>invokedynamic</code>指令的位置。</p>
<p>这条指令的第一个参数不再是代表方法的符号引用的<code>CONSTANT_Methodref_info</code>常量，而是变成JDK 1.7新加入的<code>CONSTATN_InvokeDynamic_info</code>常量。根据<code>CONSTANT_InvokeDynamic_info</code>常量中提供的信息，虚拟机可以找到并且执行引导方法，从而得到一个CallSite对象，最终调用要执行的目标方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM: 字节码执行引擎(1)-概述]]></title>
      <url>https://rogerfang.github.io/2017/01/04/JVM-%E5%AD%97%E8%8A%82%E7%A0%81%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E-1-%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>执行引擎是JVM最核心的组成部分之一。</p>
<p>虚拟机执行引擎在执行代码的时候，可能会有解释执行（通过解释器执行）和编译执行（通过JIT编译器产生本地代码执行）两种选择。</p>
<blockquote>
<p>虚拟机是一个相对于物理机的概念，它们都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、硬件、指令集和操作系统层面上的，而虚拟机的执行引擎则需要自己实现。</p>
</blockquote>
<h1 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h1><p>栈帧（Stack Frame）是用于支持虚拟机进行<strong>方法调用</strong>和<strong>方法执行</strong>的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素。</p>
<blockquote>
<p>栈帧存储了方法的局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息（如与调试相关的信息）等。</p>
</blockquote>
<p>每一个方法从调用从开始至执行完成的过程，都对应着一个栈帧在虚拟机栈里从入栈到出栈的过程。<br><img src="/images/jvm/vm-stack-memory-model.png" alt=""></p>
<h2 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h2><p>局部变量表用于存放<strong>方法参数</strong>和方法内部定义的<strong>局部变量</strong>，局部变量表的容量以变量槽（Slot）为最小单位。编译的时候，方法的Code属性的max_locals数据项中就确定了该方法所需分配的局部变量表的最大容量。</p>
<p>一个Slot可以存放一个32位以内的数据类型，Java中占用32位以内的数据类型有：boolean、byte、char、short、int、float、reference和returnAddress 8种类型。</p>
<ul>
<li><code>reference</code>类型：表示一个对象实例的引用。虚拟机可以从此引用直接或间接地查找到对象在Java堆中的数据存放的起始地址索引；还可以从此引用中直接或间接地查找到对象所属数据类型在方法区中的存储的类型信息。</li>
<li><code>returnAddress</code>类型：目前已经很少见了，它是为字节码指令<code>jsr</code>、<code>jsr_w</code>和<code>ret</code>服务的，指向了一条字节码指令的地址。</li>
</ul>
<p>对于64位的数据类型，虚拟机以<strong>高位对齐</strong>的方式来分配<strong>两个连续</strong>的Slot空间存储。</p>
<blockquote>
<p>局部变量表是建立在线程的堆栈上，是线程私有的数据，无论读写两个连续的Slot是否为原子操作，都不会引起数据安全问题。</p>
</blockquote>
<p><strong>不使用对象手动赋值为null，help GC？</strong><br>局部变量表中的Slot是可以重复使用的，如果一个变量在没有任何读写操作后，就可以将该变量占用的Slot进行重复使用。<br>但是如果没有任何对局部变量表的读写操作，不需要使用的变量占用的Slot还没有被其他变量复用。这是可以使用手动赋值null来帮助回收。</p>
<blockquote>
<p>问题：在虚拟机使用解释执行时，使用null值得操作来优化内存回收是有用的；但是经过JIT编译优化后就会把赋null值优化掉，这是将变量设置为null值就是没有意义的。</p>
</blockquote>
<h2 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h2><p>操作数栈（Operand Stack）也称为操作栈，是一个先入后出（LIFO）的栈。操作栈的最大深度也是在编译的时候写入到Code属性的max_stacks数据项中。</p>
<h2 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h2><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用。持有这个引用是为了支持方法调用过程中的动态连接（Dynamic Linking）。</p>
<h2 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h2><p>当一个方法开始执行时，只有两种方式退出这个方法。第一种方式是执行引擎遇到任意一个方法返回的字节码指令。另一种方式是方法执行时遇到了异常，并且这个异常没有在方法体内得到处理。</p>
<p>无论方法采用何种退出方式，在方法退出之后，都需要返回到方法被调用的位置，程序才能继续执行。</p>
<blockquote>
<p>方法正常退出时，调用者的PC计数器的值作为返回地址；方法异常退出时，返回地址是通过异常处理器来确定的。栈帧中一般不会保存这个信息。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Class文件(2): 字节码指令]]></title>
      <url>https://rogerfang.github.io/2017/01/03/Class%E6%96%87%E4%BB%B6-2-%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>Java虚拟机字节码指令：由1个字节长度的<strong>操作码</strong>（代表着某种特定操作含义的数字），以及跟随其后的0至多个<strong>操作数</strong>（Operands，此操作所需的参数）而构成。</p>
<blockquote>
<p>再次强调Java虚拟机采用面向操作数栈而不是寄存器的架构，所以大多数的指令都包含操作数，而只有一个操作码。</p>
</blockquote>
<ol>
<li>指令的操作码长度为1个字节，意味着指令集的操作码总数不能超过256条。</li>
<li>Class文件格式放弃了编译后代码的<strong>操作数长度对齐</strong>。<br>当虚拟机处理超过一个字节数据的时候，不得不在运行时从字节中重建出具体数据的结构。如一个16位长度的无符号整数需要使用两个字节存储起来。<blockquote>
<p>这种操作会在某种程度上导致解释器执行字节码时损失一些性能，优势是省略了很多填充和间隔符。</p>
</blockquote>
</li>
</ol>
<h1 id="字节码指令与数据类型"><a href="#字节码指令与数据类型" class="headerlink" title="字节码指令与数据类型"></a>字节码指令与数据类型</h1><p>在Java虚拟机的指令集中，大多数的指令都包含了其操作所对应的的数据类型信息。<br>操作码助记符都有特殊的字符来表明专门为哪种数据类型服务：<code>i</code>代表int类型的数据操作，<code>l</code>代表long，<code>s</code>代表short，<code>b</code>代表byte，<code>c</code>代表char，<code>f</code>代表float，<code>d</code>代表double，<code>a</code>代表reference。</p>
<p>一些操作指令（int类型指令）如：<code>iload</code>,<code>istore</code>,<code>iinc</code>,<code>iadd</code>,<code>isub</code>,<code>imul</code>,<code>idiv</code>,<code>ireturn</code>。</p>
<p>注意：编译器会在编译期或运行期将byte和short类型的数据<strong>带符号扩展</strong>（Sign-Extend）为相应的int类型数据，将boolean和char类型数据<strong>零位扩展</strong>（Zero-Extend）为相应的类型数据。</p>
<h1 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h1><p>加载和存储指令用于将数据在栈帧中的<strong>局部变量表</strong>和<strong>操作数栈</strong>之间来回传输。</p>
<p>局部变量加载到操作数栈：<code>iload</code>、<code>iload_&lt;n&gt;</code>等，<code>n</code>代表指令隐含的操作数。<br>操作数栈存储到局部变量表：<code>istore</code>、<code>istore_n</code>等。</p>
<h1 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h1><p>运算指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。<br>例如：<br>加法指令：<code>iadd</code>、<code>fadd</code>。<br>减法指令：<code>isub</code>、<code>fsub</code>。<br>求余指令：<code>irem</code>、<code>frem</code>。<br>局部变量自增指令：<code>iinc</code>。<br>按位或指令：<code>ior</code>、<code>lor</code>。<br>比较指令：<code>dcmpg</code>、<code>fcmpg</code>。</p>
<h1 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h1><p>类型转换指令可以将两种不同的数值类型进行相互转换。</p>
<p>Java虚拟机直接支持宽化类型转化（无需显示的转换指令）：</p>
<ul>
<li>int类型到long、float或double类型；</li>
<li>long类型到float、double类型；</li>
<li>float类型到double类型。</li>
</ul>
<p>在处理窄化类型转化时，需要显示地使用转换指令：<code>i2b</code>、<code>i2c</code>、<code>i2s</code>、<code>l2i</code>、<code>f2i</code>、<code>f2l</code>、<code>d2i</code>、<code>d2l</code>和<code>d2f</code>。<br>窄化处理可能发生上限溢出、下限溢出和精度丢失等情况。</p>
<blockquote>
<p>Java虚拟机规范中规定数值类型的窄化转换指令永远不可能导致虚拟机抛出运行时异常。</p>
</blockquote>
<h1 id="对象创建于访问指令"><a href="#对象创建于访问指令" class="headerlink" title="对象创建于访问指令"></a>对象创建于访问指令</h1><p>虽然累实例和数组都是对象，但是JVM对类实例和数组的创建和操作使用了不同的字节码指令。</p>
<ul>
<li>创建类实例的指令：<code>new</code>。</li>
<li>创建数组的指令：<code>newarray</code>、<code>anewarray</code>、<code>multianewarray</code>。</li>
<li>访问类变量和实例变量的指令：<code>getfield</code>、<code>putfield</code>、<code>getstatic</code>、<code>putstatic</code>。</li>
<li>把一个数组元素加载到操作数栈的指令：<code>baload</code>、<code>caload</code>、<code>saload</code>、<code>iaload</code>、<code>laload</code>、<code>faload</code>、<code>daload</code>、<code>aaload</code>。</li>
<li>把一个操作数栈的值存储到数组元素中的指令：<code>bastore</code>、<code>castore</code> …</li>
<li>取数组长度的指令：<code>arraylength</code>。</li>
<li>检查类实例类型的指令：<code>instanceof</code>、<code>checkcast</code>。</li>
</ul>
<h1 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h1><p>将操作数栈的栈顶一个或两个元素出栈：<code>pop</code>、<code>pop2</code>。<br>复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：<code>dup</code>、<code>dup2</code>、<code>dup_x1</code>、<code>dup2_x1</code>、<code>dup_x2</code>、<code>dup2_x2</code>。<br>将栈最顶端的两个数值互换：<code>swap</code>。</p>
<h1 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h1><p>控制转移指令可以让JVM有条件或无条件地从指定的位置指令而不是控制转移指令的下一条指令继续执行程序。</p>
<ul>
<li>条件分支<br><code>ifeq</code>、<code>iflt</code>、<code>ifle</code>、<code>ifne</code>、<code>ifgt</code>、<code>ifge</code>、<code>ifnull</code>、<code>ifnonnull</code>、<code>if_icmpeq</code>、<code>if_icmpne</code>、<code>if_icmplt</code>、<code>if_icmple</code>、<code>if_acmpeq</code>和<code>if_acmpne</code>。</li>
<li>复合条件分支<br><code>tableswitch</code>、<code>lookupswitch</code>。</li>
<li>无条件分支<br><code>goto</code>、<code>goto_w</code>、<code>jsr</code>、<code>jsr_w</code>、<code>ret</code>。</li>
</ul>
<h1 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h1><p>方法调用（分派、执行过程）与数据类型无关：</p>
<ul>
<li><code>invokevirtual</code>：用于调用对象的实例方法，根据对象的实际类型进行分派（虚分派）。</li>
<li><code>invokeinterface</code>：用于调用接口方法，会在运行时搜索一个实现了接口方法的对象，找出适合的方法进行调用。</li>
<li><code>invokespecial</code>：用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法。</li>
<li><code>invokestatic</code>：用于调用类方法。</li>
<li><code>invokedynamic</code>：用于在运行时动态解析出<strong>调用点限定符</strong>所引用的方法，并执行该方法。<blockquote>
<p>前面4种调用指令的分派逻辑都固化在JVM内部，<code>invokedynamic</code>指令的分派逻辑是由用户所设定的引导方法决定的。</p>
</blockquote>
</li>
</ul>
<p>方法返回指令与数据类型相关，根据返回值的类型区分：<code>ireturn</code>（返回值是boolean、byte、char、short和int类型）、<code>lreturn</code>、<code>freturn</code>、<code>dreturn</code>和<code>areturn</code>；还有一条return指令供声明为void的方法、实例初始化方法以及类和接口的类初始化方法使用。</p>
<h1 id="异常处理指令"><a href="#异常处理指令" class="headerlink" title="异常处理指令"></a>异常处理指令</h1><p>Java程序中显示抛出异常的操作（throw语句）都是由<code>athrow</code>指令来实现的。</p>
<p>Java虚拟机规范还规定了许多<strong>运行时异常</strong>会在其他Java虚拟机指令检测到异常状况时<strong>自动抛出</strong>。</p>
<p>而在JVM中处理异常语句（catch语句，受查异常）不是由字节码指令来实现的，而是采用<strong>异常表</strong>来完成的（上一篇博客中的Code属性有介绍过）。</p>
<h1 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h1><p>Java虚拟机可以支持<strong>方法级</strong>的同步和<strong>方法内部</strong>的一段指令序列的同步，这两种同步结构都使用<code>管程</code>（Monitor）来支持的。</p>
<h2 id="方法级的同步"><a href="#方法级的同步" class="headerlink" title="方法级的同步"></a>方法级的同步</h2><p>方法级的同步是<strong>隐式的</strong>，不需要通过字节码指令来控制，它实现在方法调用和返回操作之中。</p>
<p>虚拟机可以从方法表结构中的<code>ACC_SYNCHRONIZED</code>访问标志得知是否声明为同步。<br>如果设置了，执行线程需要成功持有<strong>管程</strong>，然后才能执行方法。</p>
<h2 id="方法内部的指令序列同步"><a href="#方法内部的指令序列同步" class="headerlink" title="方法内部的指令序列同步"></a>方法内部的指令序列同步</h2><p>同步一段指令集序列通常是由Java语言中的<code>synchronized</code>语句块来表示的，JVM指令集中有<code>monitorenter</code>和<code>monitorexit</code>两条指令来支持synchronized关键字的语义。</p>
<blockquote>
<p>正确实现synchronized关键字需要Javac编译器与Java虚拟机两者共同协作。</p>
</blockquote>
<p>编译器必须确保无论方法通过何种方式完成，方法中调用过的<code>monitorenter</code>指令都必须执行器对应的<code>monitorexit</code>指令，无论是正常结束还是异常结束。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Class文件(1): 类文件结构]]></title>
      <url>https://rogerfang.github.io/2017/01/03/Class%E6%96%87%E4%BB%B6-1-%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Write Once, Run Anywhere.</p>
</blockquote>
<p>各种不同平台的虚拟机与所有平台都统一使用的程序存储格式——字节码（ByteCode），是构成平台无关性的基石。</p>
<p>Class文件是一组以8位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在Class文件中，中间没有任何分隔符。当遇到占用8位字节以上空间的数据项时，则会按照高位在前的方式分割成若干个8位字节进行存储。</p>
<p>Class文件中只有两种数据类型：<strong>无符号数</strong>和<strong>表</strong>。</p>
<ul>
<li>无符号数：属于基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。</li>
<li>表：是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表习惯性地以“_info”结尾。表用于描述有层次关系的复合数据结构，整个Class文件本质上就是一张表。</li>
</ul>
<p>Class文件的数据项构成如下表：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>u4</td>
<td>magic</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>minor_version</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>major_version</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>constant_pool_count</td>
<td>1</td>
</tr>
<tr>
<td>cp_info</td>
<td>constant_pool</td>
<td>constant_pool_count - 1</td>
</tr>
<tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>this_class</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>super_class</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces_count</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>interfaces</td>
<td>interfaces_count</td>
</tr>
<tr>
<td>u2</td>
<td>fields_count</td>
<td>1</td>
</tr>
<tr>
<td>fields_info</td>
<td>fields</td>
<td>fields_count</td>
</tr>
<tr>
<td>u2</td>
<td>methods_count</td>
<td>1</td>
</tr>
<tr>
<td>methods_info</td>
<td>methods</td>
<td>methods_count</td>
</tr>
<tr>
<td>u2</td>
<td>attributes_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attributes_count</td>
</tr>
</tbody>
</table>
<blockquote>
<p>由于Class文件没有分隔符等，所以上表所示的数据项，无论是<strong>顺序</strong>还是<strong>数量</strong>，甚至是数据存储的<strong>字节序</strong>（Byte Ordering），都是严格限定的，不允许改变。</p>
</blockquote>
<h1 id="魔数与Class文件的版本"><a href="#魔数与Class文件的版本" class="headerlink" title="魔数与Class文件的版本"></a>魔数与Class文件的版本</h1><p><strong>魔数</strong>（Magic Number）：每个Class文件的头4个字节，唯一作用是确定这个文件是否为一个能被虚拟机接受的Class文件。Class文件的魔数值为：<code>0xCAFEBABE</code>。</p>
<blockquote>
<p>很多文件存储标准中都使用魔数来进行身份识别，譬如gif或jpeg等在文件头中都存有魔数。</p>
</blockquote>
<p>紧接着魔数存储的是Class文件的版本号，第5和第6个字节是次版本号（Minor Version），第7和第8个字节是主版本号（Major Version）。</p>
<blockquote>
<p>Java的版本号是从45开始的，JDK 1.1之后每个JDK大版本发布主版本号加1（JDK 1.0 ~ JDK 1.1 使用了45.0 ~ 45.3的版本号），JDK 1.8主版本号最大值为52.0。</p>
</blockquote>
<h1 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h1><p>紧接着主版本号之后的是常量池入口，可以把常量池当做Class文件之中的<strong>资源仓库</strong>，它是Class文件结构中与其他项目关联最多的数据类型，也是占用Class文件空间最大的数据项目之一。</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><blockquote>
<p>Class文件中只有常量池容量计数值（constant_pool_count）是从1开始计数而不是0.</p>
</blockquote>
<p>将<strong>第0项常量</strong>空出来的目的：在于满足后面某些指向常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量池项目”的含义。</p>
<p>常量池中主要存放两类常量：<strong>字面量</strong>（Literal）和<strong>符号引用</strong>（Symbolic References）。</p>
<ul>
<li>字面量：接近于Java语言层面的常量概念，如文本字符串、声明为final的常量值等。</li>
<li>符号引用：则属于编译原理方面的概念，包括了三类常量，类和接口的全限定名（Fully Qualified Name）、字段的名称和描述符（Descriptor）、方法的名称和描述符。</li>
</ul>
<p>Java代码在进行javac编译的时候不会有“<strong>连接</strong>”这一步骤，而是在虚拟机加载Class文件的时候进行<strong>动态连接</strong>。Class文件中不会保存各个方法、字段的最终内存布局信息，这些字段、方法的符号引用需要经过运行期转换才能得到<strong>直接引用</strong>（真正的内存入口地址）。</p>
<h2 id="常量池的项目类型"><a href="#常量池的项目类型" class="headerlink" title="常量池的项目类型"></a>常量池的项目类型</h2><p>常量池中的每一项常量都是一个表。每个表的结构都各不相同，共同的特点就是表开始的第一位是一个u1类型的标志位（tag），代表当前这个常量属于哪种类型的常量类型。</p>
<blockquote>
<p>常量池在JDK 1.7之前有11种表，在JDK 1.7中为了更好地支持<strong>动态调用</strong>，又额外增加了3中（CONSTANT_MethodHandle_info、CONSTANT_MethodType_info、CONSTANT_InvokeDynamic_info）。</p>
</blockquote>
<p>常量池的项目类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>标志</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CONSTANT_Utf8_info</td>
<td>1</td>
<td>UTF-8编码的字符串</td>
</tr>
<tr>
<td>CONSTANT_Integer_info</td>
<td>3</td>
<td>整型字面量</td>
</tr>
<tr>
<td>CONSTANT_Float_info</td>
<td>4</td>
<td>浮点型字面量</td>
</tr>
<tr>
<td>CONSTANT_Long_info</td>
<td>5</td>
<td>长整型字面量</td>
</tr>
<tr>
<td>CONSTANT_Double_info</td>
<td>6</td>
<td>双精度浮点型字面量</td>
</tr>
<tr>
<td>CONSTANT_Class_info</td>
<td>7</td>
<td>类或接口的符号引用</td>
</tr>
<tr>
<td>CONSTANT_String_info</td>
<td>8</td>
<td>字符串类型字面量</td>
</tr>
<tr>
<td>CONSTANT_Fieldref_info</td>
<td>9</td>
<td>字段的符号引用</td>
</tr>
<tr>
<td>CONSTANT_Methodref_info</td>
<td>10</td>
<td>类中方法的符号引用</td>
</tr>
<tr>
<td>CONSTANT_InterfaceMethodref_info</td>
<td>11</td>
<td>接口中方法的符号引用</td>
</tr>
<tr>
<td>CONSTANT_NameAndType_info</td>
<td>12</td>
<td>字段或方法的部分符号引用</td>
</tr>
<tr>
<td>CONSTANT_MethodHandle_info</td>
<td>15</td>
<td>表示方法句柄</td>
</tr>
<tr>
<td>CONSTANT_MethodType_info</td>
<td>16</td>
<td>标识方法类型</td>
</tr>
<tr>
<td>CONSTANT_InvokeDynamic_info</td>
<td>18</td>
<td>表示一个动态方法调用点</td>
</tr>
</tbody>
</table>
<h1 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h1><p>在常量池结束之后，紧接着的两个字节代表访问标志（access_flags），这个标志<strong>用于识别一些类或接口层次的访问信息</strong>，包括：这个Class是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话，是否声明为final等。</p>
<p>具体的标志位及其含义（一共有16个标志位可以使用，但是当前虚拟机规范中只定义了8个）</p>
<table>
<thead>
<tr>
<th>标志名称</th>
<th>标志值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ACC_PUBLIC</td>
<td>0x0001</td>
<td>是否为public类型</td>
</tr>
<tr>
<td>ACC_FINAL</td>
<td>0x0010</td>
<td>如果为类的话，是否被声明为final</td>
</tr>
<tr>
<td>ACC_SUPER</td>
<td>0x0020</td>
<td></td>
</tr>
<tr>
<td>ACC_INTERFACE</td>
<td>0x0200</td>
<td>标志这是一个接口</td>
</tr>
<tr>
<td>ACC_ABSTRACT</td>
<td>0x0400</td>
<td>标志这是一个抽象类</td>
</tr>
<tr>
<td>ACC_SYNTHETIC</td>
<td>0x1000</td>
<td>标志这个类并非由用户代码产生的</td>
</tr>
<tr>
<td>ACC_ANNOTATION</td>
<td>0x2000</td>
<td>标志这是一个注解</td>
</tr>
<tr>
<td>ACC_ENUM</td>
<td>0x4000</td>
<td>标志这是一个枚举类</td>
</tr>
</tbody>
</table>
<h1 id="类索引、父类索引和接口索引集合"><a href="#类索引、父类索引和接口索引集合" class="headerlink" title="类索引、父类索引和接口索引集合"></a>类索引、父类索引和接口索引集合</h1><p>类索引（this_class）和父类索引（super_class）都是一个u2类型的数据，而接口索引结合（interfaces）是一组u2类型的数据集合，Class文件中用着三项数据确定这个类的继承关系。</p>
<ul>
<li><strong>类索引</strong>：确定这个类的全限定名。</li>
<li><strong>父类索引</strong>：确定这个类的父类的全限定名。</li>
<li><strong>接口索引集合</strong>：描述这个类实现了哪些接口，按照implements顺序从左到右排列在集合中。</li>
</ul>
<h1 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h1><p>字段表集合（field_info）：用于描述接口或类中声明的变量。字段（field）包括类变量和实例变量，不包括方法中的局部变量。</p>
<blockquote>
<p>在Java语言中字段是无法重载的，不能使用一样的名称；但是对于字节码来说，如果两个字段的描述符不一样，那字段重名就是合法的。</p>
</blockquote>
<p>字段包括的信息有：</p>
<ol>
<li>字段的作用域（public、protected、private）</li>
<li>实例变量or类变量（static修饰符）</li>
<li>可变性（final修饰符）</li>
<li>并发可见性（volatile修饰符）</li>
<li>可否被序列化（transient修饰符）</li>
<li>字段数据类型（基本类型、对象、数组）</li>
<li>字段名称</li>
</ol>
<blockquote>
<p>上述信息中，各个修饰符都可以用布尔值来表示，因而字段表结构中也使用访问标志（access_flags）来统一处理。</p>
</blockquote>
<p>字段表结构：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>u2</td>
<td>access_flags</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>name_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>descriptor_index</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>attributes_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attributes_count</td>
</tr>
</tbody>
</table>
<p>字段表结构中其中的<code>name_index</code>代表字段的“简单名称”，<code>descriptor_index</code>代表字段的“描述符”。<br>简单名称：指没有类型和参数修饰的方法或字段名称。如方法<code>inc()</code>和字段<code>m</code>的简单名称就是<code>inc</code>和<code>m</code>。<br>描述符：作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。如一个定义为<code>java.lang.String[][]</code>类型的二位数组将被记录为<code>[[Ljava/lang/String;</code>，方法<code>int indexOf(Char[] source, int fromIndex)</code>的描述符为<code>([CI)I</code>。</p>
<p>字段表最后的<code>attribute_info</code><strong>属性表</strong>集合用于存储一些额外的信息，如定义一个常量<code>final static int m = 123;</code>那么可能就会存在一个名称为<code>ConstantValue</code>的属性，其值指向常量<code>123</code>。（后面会继续介绍属性表）</p>
<blockquote>
<p>字段表不会列出从超类或父接口中继承而来的字段，但是可能会列出原本代码中不存在的字段（譬如内部类中指向外部类实例的字段）。</p>
</blockquote>
<h1 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h1><p>方法表的结构和字段表的结构描述几乎一样，只是在访问标志和属性表集合的可选项中有所区别。</p>
<blockquote>
<p>在Java语言里，方法的特征签名是方法名以及参数类型和顺序，相同特征签名的方法不能共存；但是在Class文件中特征签名范围更大一些，只要描述符不完全一致就可以共存。</p>
</blockquote>
<p>方法里的代码，经过编译器编译成字节码指令后，存放在方法<strong>属性表</strong>集合中一个名为<code>Code</code>的属性里面。</p>
<blockquote>
<p>与字段表集合对应的，如果父类方法在子类中没有被重写（Override），方法表集合中就不会出现父类的方法信息。但是，有可能出现由编译器自动添加的方法，如实例构造器<code>&lt;init&gt;()</code>方法和类构造器<code>&lt;clinit&gt;()</code>方法。</p>
</blockquote>
<h1 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h1><p>在Class文件、字段表、方法表都可以携带自己的属性表集合，以用于描述某些场景专有的信息。<br>《Java虚拟机规范(Java SE7)》版中，预定义属性增加到21项。</p>
<blockquote>
<p>与Class文件中其他的数据项目要求严格的殊勋、长度和内容不同等，属性表集合的限制稍微宽松了些，不要求严格顺序，且只要不与已有属性名重复即可，Java虚拟机会在运行时忽略掉不认识的属性。</p>
</blockquote>
<h2 id="Code属性"><a href="#Code属性" class="headerlink" title="Code属性"></a>Code属性</h2><p>Code属性出现在方法表集合中，但并非所有方法表都必须存在这个属性，例如接口中的方法就不存在Code属性。</p>
<h3 id="Code属性表的结构"><a href="#Code属性表的结构" class="headerlink" title="Code属性表的结构"></a>Code属性表的结构</h3><table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
<th>数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>u2</td>
<td>attribute_name_index</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>attribute_length</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>max_stack</td>
<td>1</td>
</tr>
<tr>
<td>u2</td>
<td>max_locals</td>
<td>1</td>
</tr>
<tr>
<td>u4</td>
<td>code_length</td>
<td>1</td>
</tr>
<tr>
<td>u1</td>
<td>code</td>
<td>code_length</td>
</tr>
<tr>
<td>u2</td>
<td>exception_table_length</td>
<td>1</td>
</tr>
<tr>
<td>exception_info</td>
<td>exception_table</td>
<td>exception_table_length</td>
</tr>
<tr>
<td>u2</td>
<td>attributes_count</td>
<td>1</td>
</tr>
<tr>
<td>attribute_info</td>
<td>attributes</td>
<td>attributes_count</td>
</tr>
</tbody>
</table>
<ol>
<li><code>attribute_name_index</code>：一项指向CONSTANT_Utf8_info型常量的索引，常量值固定为“Code”。</li>
<li><code>attribute_length</code>：属性值得长度，也就是整个属性表除去前面6个字节的长度。</li>
<li><code>max_stack</code>：代表操作数栈（Operand Stacks）深度的最大值。占用两个字节，最大为65535。虚拟机运行时是根据这个值来分配<strong>栈帧</strong>（Stack Frame）中的操作数深度。（JVM没有寄存器，因而JVM的指令主要是从操作数栈而不是寄存器中取得操作数的，运行方式是<strong>基于栈</strong>而不是基于寄存器的）</li>
<li><code>max_locals</code>：代表了局部变量表所需的存储空间。<code>max_locals</code>的单位是<code>Slot</code>，<code>Slot</code>是虚拟机为局部变量分配内存所使用的最小单位。局部变量表中的<code>Slot</code>可以重用，Javac编译器会根据变量的作用域来分配<code>Slot</code>的使用量，计算出<code>max_locals</code>。</li>
<li><code>code_length</code>和<code>code</code>：用来存储Java源程序编译后生成的<strong>字节码指令</strong>，每个指令是一个u1类型的单字节（最多也就256条指令）。虚拟机限制了一个方法不允许超过65535条字节码指令，也就是<code>code_length</code>实际只用了u2的长度。</li>
</ol>
<h4 id="异常表及finally语义"><a href="#异常表及finally语义" class="headerlink" title="异常表及finally语义"></a>异常表及finally语义</h4><p>编译器使用异常表而不是简单的跳转命令来实现<strong>Java异常</strong>以及<strong>finally机制</strong>。</p>
<blockquote>
<p><strong>finally语义实现</strong>：JDK 1.4.2之后，实现finally语句改为编译器自动在每段可能的分支路径之后都讲finally的语句块冗余生成一遍来实现finally语义。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionInfoTest</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">inc</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            x = <span class="number">1</span>; <span class="comment">// 1. 测试正常执行</span></div><div class="line">            <span class="comment">// x = 1/0; // 2. 测试try语句出现catch的异常</span></div><div class="line">            <span class="comment">// x = 1/0; // 3. 将catch异常改为NullPointerException，测试try语句块中出现未被catch的异常</span></div><div class="line">            <span class="keyword">return</span> x;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            x = <span class="number">2</span>;</div><div class="line">            <span class="keyword">return</span> x; <span class="comment">// 4. 注释掉return语句，并throw new ArithmeticException(); 测试catch中出现异常</span></div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            x =<span class="number">3</span>;</div><div class="line">            System.out.println(<span class="string">"finally execute!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        System.out.println(inc());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译器会为这段Java源代码生成3条异常表记录，对应3条可能出现的异常执行路径，分别为：</p>
<ul>
<li>如果try语句块中出现被catch的异常，则转到catch语句块处理。</li>
<li>如果try语句块中出现未被catch的异常，则转到finally语句块处理。</li>
<li>如果catch语句块中出现任何异常，则转到finally语句块处理。</li>
</ul>
<p><strong>finally是否一定会执行？</strong><br>正常情况下，finally对应的try语句块得到执行时，finally语句块才会执行。但是也不排除在此之前使用<code>System.exit(0);</code>等手段终止虚拟机运行，这样就不会执行了。</p>
<h2 id="Exceptions属性"><a href="#Exceptions属性" class="headerlink" title="Exceptions属性"></a>Exceptions属性</h2><p>Exceptions属性与Code属性是平级的，作用是列举出丰富中可能抛出的受查异常（Checked Exception），也就是丰富描述时throws关键字后面列举的异常。</p>
<blockquote>
<p>上面介绍的异常表是编译器用于实现Java异常以及finally机制的。</p>
</blockquote>
<h2 id="LineNumberTable属性"><a href="#LineNumberTable属性" class="headerlink" title="LineNumberTable属性"></a>LineNumberTable属性</h2><p>LineNumberTable属性用于描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系，<strong>非运行时属性</strong>（可以用于调试，抛出异常进行定位以及按照源码行号来设置断点）。</p>
<h2 id="LocalVariableTable属性"><a href="#LocalVariableTable属性" class="headerlink" title="LocalVariableTable属性"></a>LocalVariableTable属性</h2><p>LocalVariableTable属性用于描述栈帧中的局部变量表中的变量与Java源码中定义的变量之间的关系。<strong>非运行时属性</strong>（对于开发时，会造成方法引用时，所有参数名丢失，IDE使用诸如arg0/arg1等占位符替代）。</p>
<h2 id="SourceFile属性"><a href="#SourceFile属性" class="headerlink" title="SourceFile属性"></a>SourceFile属性</h2><p>SourceFile属性用于记录生成这个Class文件的源码文件名称，<strong>非运行时属性</strong>。<br>在Java中，对于大多数类来说，类名和文件名是一致的，但是有些特殊情况例如（如内部类）。如果不生成这属性，当抛出异常时，堆栈中将不会显示出错代码所属的文件名。</p>
<h2 id="ConstantValue属性"><a href="#ConstantValue属性" class="headerlink" title="ConstantValue属性"></a>ConstantValue属性</h2><p>ConstantValue属性的作用是通知虚拟机自动为<strong>静态变量</strong>（static修饰的）赋值。</p>
<p>实例变量赋值：在实例构造器<code>&lt;init&gt;()</code>方法中。<br>类变量赋值：两种方式，在类构造器<code>&lt;clinit&gt;()</code>方法中或者使用ConstantValue属性。</p>
<blockquote>
<p>目前<strong>Sun Javac编译器</strong>对类变量赋值的选择：</p>
<ul>
<li>如果是同时被<code>final</code>和<code>static</code>修饰的变量（<strong>常量</strong>），并且常量的数据结构类型是基本类型或者<code>java.lang.String</code>的话（也就是属性值是在常量池中），就生成ConstantValue属性来初始化。</li>
<li>如果没有被final修饰或并非基本类型及字符串，则会选择在<code>&lt;clinit&gt;()</code>方法中进行初始化。</li>
</ul>
</blockquote>
<p>ConstantValue语义，虚拟机规范中并没有强制要求字段被设置为<code>ACC_FINAL</code>标志，只要求字段必须设置<code>ACC_STATIC</code>标志。对于<code>final</code>关键字的要求是在javac编译器里加入的。</p>
<h2 id="InnerClass属性"><a href="#InnerClass属性" class="headerlink" title="InnerClass属性"></a>InnerClass属性</h2><p>InnerClass属性用于记录内部类与宿主类之间的关联。</p>
<h2 id="Deprecated及Synthetic属性"><a href="#Deprecated及Synthetic属性" class="headerlink" title="Deprecated及Synthetic属性"></a>Deprecated及Synthetic属性</h2><p>Deprecated属性用于表示字段、方法或类已经不被推荐使用，可以使用注解<code>@deprecated</code>。<br>Synthetic属性代表此字段或方法并不是由Java源码直接产生的，而是由编译器自行添加的。JDK 1.5之后可以使用<code>ACC_SYNTHETIC</code>标志位实现。</p>
<h2 id="StackMapTable属性"><a href="#StackMapTable属性" class="headerlink" title="StackMapTable属性"></a>StackMapTable属性</h2><p>StackMapTable属性是JDK 1.6增加的变长属性，位于Code属性的属性表中。这个属性会在虚拟机类加载过程中的验证阶段被新类型验证器（Type Checker）使用。</p>
<blockquote>
<p>目的在于替代以前比较消耗性能的基于数据流分析的类型推导验证器。</p>
</blockquote>
<h2 id="Signature属性"><a href="#Signature属性" class="headerlink" title="Signature属性"></a>Signature属性</h2><p>Signature属性在JDK 1.5增加的定长属性，可以出现于类、属性表和方法表结构的属性表中。<br>主要针对泛型签名如果包含了类型变量（Type Variables）或参数化类型（Parameterized Types），Signature属性会记录泛型签名信息。</p>
<p>泛型的坏处就是运行期无法向<code>C#</code>等有真泛型支持的语言那样，将泛型类型与用户定义的普通类型同等对待，例如反射时无法获得泛型信息。而<code>Signature</code>属性就是为了弥补这个缺陷而增设的，现在Java的反射API能够获取泛型，最终数据来源就是这个属性。</p>
<h2 id="BootstrapMethods属性"><a href="#BootstrapMethods属性" class="headerlink" title="BootstrapMethods属性"></a>BootstrapMethods属性</h2><p>BootstrapMethods属性在JDK 1.7增加到Class文件规范中，是一个变长属性，位于类文件的属性表中。这个属性用于保存<code>invokedynamic</code>指令引用的引导方法限定符。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM: 类加载(2)-类加载器ClassLoader]]></title>
      <url>https://rogerfang.github.io/2017/01/02/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD-2-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8ClassLoader/</url>
      <content type="html"><![CDATA[<p>类加载器只用于完成整个类加载过程的加载（Loading）动作：类的加载阶段中“通过一个类的全限定名去获取描述此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让程序代码自己决定如何去获取所需要的类。</p>
<blockquote>
<p>类加载器在类层次划分、OSGI、热部署、代码加密等领域被广泛应用。</p>
</blockquote>
<p>类在虚拟机中的<strong>唯一性</strong>由加载它的类加载器和这个类本身一同确立。因为每个类加载器都有独立的类名称空间。</p>
<h1 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h1><p>分别从两种角度来划分类加载器的类型：<br>从Java虚拟机的角度来讲，只存在两种不同的类加载器：</p>
<ul>
<li>启动类加载器（Bootstrap ClassLoader）：HotSpot中使用C++实现，也有使用Java实现但关键方法仍然是使用JNI回调到C的实现上。（用户无法获取到Bootstrap ClassLoader实例）</li>
<li>其他的类加载器：这些都是由Java语言实现，独立于虚拟机外部，并且都继承自<code>java.lang.ClassLoader</code>。</li>
</ul>
<p>从Java开发人员的角度来看，类加载器可以大致分为3种：</p>
<ul>
<li>启动类加载器（Bootstrap ClassLoader）：这个类加载器负责将存放在<java_home>/lib目录下的，或被<code>-Xbootclasspath</code>参数指定的路径中的，并且被虚拟机识别的，加载到虚拟机内存中。</java_home></li>
<li>扩展类加载器（Extension ClassLoader）：这个加载器由<code>sun.misc.Launcher$ExtClassLoader</code>实现，它负责加载<java_home>/lib/ext或者被java.ext.dirs系统变量所指定的路径中的所有类库。（用户可以直接使用扩展类加载器）</java_home></li>
<li>应用程序类加载器（Application ClassLoader）：这个类加载器由<code>sun.misc.Launcher$AppClassLoader</code>实现。这个是由ClassLoader类中的<code>getSystemClassloader()</code>方法返回的，所以一般也称它为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，一般情况下这个就是程序中默认的类加载器。</li>
</ul>
<blockquote>
<p>类加载器之间的父子关系一般使用组合（Composition）关系来服用父加载器的。</p>
</blockquote>
<p><img src="/images/jvm/classloader-parents-delegate.png" alt=""><br><strong>类加载器的双亲委派模型的工作过程</strong>：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此<strong>所有的加载请求最终都应该传送到启动类加载器中</strong>，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载。</p>
<blockquote>
<p>使用双亲委派模型来组织类加载器之间的关系，一个明显的好处就是：Java类随着它的类加载器一起具备了一种带有优先级的层次关系。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM: 类加载(1)-类加载机制]]></title>
      <url>https://rogerfang.github.io/2017/01/02/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD-1-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p><strong>类加载机制</strong>：虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型。</p>
<blockquote>
<p>Java可以动态扩展的特性就是依赖运行期动态加载和动态连接这个特点实现的。</p>
</blockquote>
<h1 id="类加载的时机"><a href="#类加载的时机" class="headerlink" title="类加载的时机"></a>类加载的时机</h1><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，整个生命周期包括：<strong>加载</strong>（Loading）、<strong>验证</strong>（Verification）、<strong>准备</strong>（Preparation）、<strong>解析</strong>（Resolution）、<strong>初始化</strong>（Initialization）、<strong>使用</strong>（Using）和<strong>卸载</strong>（Unloading）7个阶段。</p>
<p><img src="/images/jvm/classloader-lifecycle.png" alt=""></p>
<blockquote>
<p>加载、验证、准备、初始化和卸载这5个阶段的顺序是确定的（这些阶段通常互相<strong>交叉地混合式进行</strong>，在一个阶段执行的过程中激活另一个阶段），而解析阶段在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定（动态绑定）。</p>
</blockquote>
<h2 id="类初始化时机"><a href="#类初始化时机" class="headerlink" title="类初始化时机"></a>类初始化时机</h2><p>虚拟机规范规定<strong>有且只有</strong>5种情况（也被称为<strong>主动引用</strong>），如果类没有进行初始化，则需要先触发其初始化。</p>
<ol>
<li>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>这4条字节码指令时。<br>常见的场景：使用<code>new</code>关键字实例化对象、读取或调用一个类的静态字段的时候（被final修饰、已在编译期把结果放入常量池的静态字段除外）、以及调用一个类的静态方法的时候。</li>
<li>反射调用。</li>
<li>初始化一个类时，其父类还没有进行初始化，先触发父类的初始化。（接口并不要求其父接口都完成初始化）</li>
<li>虚拟机启动时，要执行的主类（包括<code>main()</code>方法），虚拟机会先初始化这个主类。</li>
<li>使用JDK 1.7的动态语言支持时，如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果是<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>的方法句柄，方法句柄对应的类没有初始化，则需要先触发其初始化。</li>
</ol>
<blockquote>
<p>Reflection和MethodHandle机制本质上都是在<strong>模拟方法调用</strong>，但是Reflection是在模拟Java代码层次的方法调用，而MethodHandle是在模拟字节码层次的方法调用。<br>相关知识点可以参见：<a href="http://www.infoq.com/cn/articles/jdk-dynamically-typed-language" target="_blank" rel="external">http://www.infoq.com/cn/articles/jdk-dynamically-typed-language</a></p>
</blockquote>
<p>几个不会触发类初始化（也被称为<strong>被动引用</strong>）的例子：</p>
<ol>
<li>通过子类引用父类的静态字段，不会导致子类初始化。<code>System.out.println(SubClass.value);</code>（<code>value</code>是父类静态字段）</li>
<li>通过数组定义来引用类，不会触发类的初始化。<code>MyClass[] arr = new MyClass[10];</code></li>
<li>使用常量（编译阶段会存入调用类的常量池中）。</li>
</ol>
<h1 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h1><p>类加载的过程就是：加载、验证、准备、解析和初始化这5个阶段。</p>
<h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>加载阶段，虚拟机完成以下3件事：</p>
<ol>
<li>通过一个<strong>类的全限定名</strong>来获取定义此类的二进制字节流（一般是字节码文件）。</li>
<li>将这个字节流所代表的<strong>静态存储结构</strong>转换为方法区的<strong>运行时数据结构</strong>。</li>
<li>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</li>
</ol>
<blockquote>
<p>加载阶段中获取获取类的二进制字节流，非数组类由类加载器去完成；数组类情况不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接创建的。</p>
</blockquote>
<p>加载阶段完成后，二进制字节流就按照虚拟机所需的格式存储在方法区之中，方法区中的数据存储格式由虚拟机实现自定义。然后在内存中实例化一个<code>java.lang.Class</code>对象（并没有明确规定是在Java堆中，HotSpot虚拟机把Class对象存在方法区中），作为程序访问方法区中这些类型数据的外部接口。</p>
<blockquote>
<p>加载阶段可以由用户自定义的类加载器去完成，其他阶段都是由虚拟机主导和控制的。</p>
</blockquote>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><blockquote>
<p>验证是连接的第一步，目的是为了确保二进制字节流中所包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>
</blockquote>
<p>验证阶段大致会完成4个阶段的检验动作：文件格式验证、元数据验证、字节码验证、符号引用验证。</p>
<h3 id="文件格式验证"><a href="#文件格式验证" class="headerlink" title="文件格式验证"></a>文件格式验证</h3><blockquote>
<p>阶段一：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理。</p>
</blockquote>
<p>通过了这个验证字节流才会进入内存的方法区中进行存储，后面3个验证部分都市基于方法区的存储结构进行的，不会再直接操作字节流。</p>
<h3 id="元数据验证"><a href="#元数据验证" class="headerlink" title="元数据验证"></a>元数据验证</h3><blockquote>
<p>阶段二：元数据验证就是对字节码所描述的信息进行语义分析，以保证其秒速的信息符合Java语言规范的要求。</p>
</blockquote>
<h3 id="字节码验证"><a href="#字节码验证" class="headerlink" title="字节码验证"></a>字节码验证</h3><blockquote>
<p>阶段三：字节码验证主要目的是通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</p>
</blockquote>
<p>阶段二对元数据信息中的数据类型做完校验后，这个阶段将对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。</p>
<h3 id="符号引用验证"><a href="#符号引用验证" class="headerlink" title="符号引用验证"></a>符号引用验证</h3><p>最后一个阶段的校验发生在虚拟机将<strong>符号引用</strong>转换为<strong>直接引用</strong>的时候，这个转换动作发生在解析阶段（连接的第三阶段）。目的是确保解析能正常执行。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>准备阶段正式为<strong>类变量</strong>（static修饰的变量）分配内存并设置类变量初始值（一般是数据类型的零值），这些变量所用内存都在方法区中进行分配。<br>如果类变量是常量，那么在准备阶段变量值就会被初始化为其制定的值。</p>
<blockquote>
<p>实例变量会随着对象一起分配在Java堆中。</p>
</blockquote>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，</p>
<ul>
<li><strong>符号引用</strong>（Symbolic References）：定义在Java虚拟机规范的Class文件中，符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量。</li>
<li><strong>直接引用</strong>（Direct References）：直接引用可以是直接指向目标的指针、相对偏移量或是能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局相关的，有了直接引用，那引用的目标必定已经在内存中存在。</li>
</ul>
<p>比如类或接口解析、字段解析、类方法解析、接口方法解析以及动态调用相关的解析。</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>类初始化阶段是类加载过程的最后一步，到了初始化阶段，才真正开始<strong>执行</strong>类中定义的Java代码（字节码）。</p>
<p>在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则根据程序员通过程序制定的主观计划去初始化类变量和其他资源。</p>
<blockquote>
<p>初始化阶段是执行类构造器<code>&lt;clinit&gt;()</code>方法的过程。同一个类加载器下，一个类型只会初始化一次。</p>
</blockquote>
<h3 id="lt-clinit-gt-方法"><a href="#lt-clinit-gt-方法" class="headerlink" title="&lt;clinit&gt;()方法"></a><code>&lt;clinit&gt;()</code>方法</h3><ul>
<li><code>&lt;clinit&gt;()</code>方法是由编译器合并所有类变量的赋值动作和静态语句块中的语句产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。<blockquote>
<p>静态语句块只能<strong>访问</strong>定义在其之前的变量，定义在其之后的变量只能被赋值但不能被访问。</p>
</blockquote>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span>&#123;</div><div class="line">	i = <span class="number">10</span>; <span class="comment">// ok</span></div><div class="line">    System.out.println(i); <span class="comment">// compile error 不能访问，非法向前引用</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">20</span>; <span class="comment">// 最后i的值还是20</span></div></pre></td></tr></table></figure>
<ul>
<li><p><code>&lt;clinit&gt;()</code>方法不需要显示地调用父类构造器，虚拟机会保证在子类的<code>&lt;clinit&gt;()</code>方法执行之前，父类的<code>&lt;clinit&gt;()</code>方法已经执行完毕。（虚拟机第一个被执行的<code>&lt;clinit&gt;()</code>方法的类肯定是<code>java.lang.Object</code>）</p>
</li>
<li><p><code>&lt;clinit&gt;()</code>方法对于类或接口并不是必需的，如果没有静态变量的赋值操作或静态语句块，那么编译器不会为这个类或接口生成<code>&lt;clinit&gt;()</code>方法。</p>
</li>
<li><p>接口可以由静态编赋值操作，但是不能使用静态语句块。执行接口的<code>&lt;clinit&gt;()</code>方法不需要先执行父接口的<code>&lt;clinit&gt;()</code>方法。接口的实现类在初始化时也一样不会执行接口的<code>&lt;clinit&gt;()</code>方法。</p>
</li>
<li><p>虚拟机会保证<code>&lt;clinit&gt;()</code>方法在多线程环境下被正确地加锁、同步。</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JVM: 后端编译(JIT编译器)]]></title>
      <url>https://rogerfang.github.io/2017/01/01/JVM-%E5%90%8E%E7%AB%AF%E7%BC%96%E8%AF%91-JIT%E7%BC%96%E8%AF%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<h1 id="解释器与JIT编译器"><a href="#解释器与JIT编译器" class="headerlink" title="解释器与JIT编译器"></a>解释器与JIT编译器</h1><p>当程序需要迅速启动和执行的时候，JIT解释器可以首先发挥作用，省去编译的时间，立即执行。<br>在程序执行后，随着时间的推移，JIT编译器逐渐发挥作用，把越来越多的代码编译成本地机器码，可以获得更高的执行效率。</p>
<blockquote>
<p>可以使用解释器执行节约内存，反之使用JIT编译器来提升效率。</p>
</blockquote>
<p>HotSpot虚拟机中内置了两个JIT编译器，分别为Client Compiler(C1编译器)和Server Compiler(C2编译器)。HotSpot采用混合模式，解释器与其中一个JIT编译器搭配使用。</p>
<p><img src="/images/jvm/java-execution-process.png" alt=""></p>
<h1 id="热点代码（Hot-Spot-Code）"><a href="#热点代码（Hot-Spot-Code）" class="headerlink" title="热点代码（Hot Spot Code）"></a>热点代码（Hot Spot Code）</h1><p>Java 程序最初是仅仅通过解释器解释执行的，即对字节码逐条解释执行，这种方式的执行速度相对会比较慢，尤其当某个方法或代码块运行的特别频繁时，这种方式的执行效率就显得很低。于是后来在虚拟机中引入了 JIT 编译器（即时编译器），当虚拟机发现某个方法或代码块运行特别频繁时，就会把这些代码认定为“Hot Spot Code”（<strong>热点代码</strong>），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各层次的优化，完成这项任务的正是 <strong>JIT 编译器</strong>。</p>
<h1 id="编译对象"><a href="#编译对象" class="headerlink" title="编译对象"></a>编译对象</h1><p>运行过程中会被即时编译器编译的“热点代码”有两类：</p>
<ol>
<li>被多次调用的方法。</li>
<li>被多次调用的循环体。</li>
</ol>
<blockquote>
<p>两种情况，编译器都是以<strong>整个方法</strong>作为编译对象，这种编译也是虚拟机中标准的编译方式。要知道一段代码或方法是不是热点代码，是不是需要触发即时编译，需要进行Hot Spot Detection（<strong>热点探测</strong>）。</p>
</blockquote>
<p>对于后一种情况，由于编译对象仍然是整个方法（而不是单独的循环体），代码可能正在解释执行的过程中直接切换到本地代码执行，所以也称为“<strong>栈上替换</strong>”(OnStackReplacement)，简称<strong>OSR编译</strong>，即方法栈帧还在栈上，方法就被替换了。</p>
<h1 id="热点探测"><a href="#热点探测" class="headerlink" title="热点探测"></a>热点探测</h1><p>目前主要的热点探测方式有两种：基于采样和基于计数器的热点探测方法。</p>
<h2 id="基于采样的热点探测"><a href="#基于采样的热点探测" class="headerlink" title="基于采样的热点探测"></a>基于采样的热点探测</h2><p>采用这种方法的虚拟机会周期性地检查各个线程的栈顶，如果发现某些方法经常出现在栈顶，那这段方法代码就是“热点代码”。</p>
<p><strong>优点</strong>：实现简单高效，还可以很容易地获取方法调用关系。<br><strong>缺点</strong>：很难精确地确认一个方法的热度，容易因为受到线程阻塞或别的外界因素的影响而扰乱热点探测。</p>
<h2 id="基于计数器的热点探测"><a href="#基于计数器的热点探测" class="headerlink" title="基于计数器的热点探测"></a>基于计数器的热点探测</h2><p>采用这种方法的虚拟机会为每个<strong>方法</strong>，甚至是<strong>代码块</strong>建立计数器，统计方法的执行次数，如果执行次数超过一定的阀值，就认为它是“热点代码”。</p>
<p><strong>优点</strong>：统计结果相对更加精确严谨。<br><strong>缺点</strong>：实现复杂一些，需要为每个方法建立并维护计数器，而且不能直接获取到方法的调用关系。</p>
<blockquote>
<p>在 HotSpot 虚拟机中使用的是<strong>基于计数器的热点探测方法</strong>，因此它为每个方法准备了两个计数器：方法调用计数器和回边计数器。</p>
</blockquote>
<h3 id="方法调用计数器（Invocation-Counter）"><a href="#方法调用计数器（Invocation-Counter）" class="headerlink" title="方法调用计数器（Invocation Counter）"></a>方法调用计数器（Invocation Counter）</h3><p>方法调用计数器用来统计方法调用的次数，在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即<em>一段时间内方法被调用的次数</em>。</p>
<blockquote>
<p>当超过一定的时间限度，如果方法调用次数仍不足以触发即时编译，则方法调用器值会被减少一半，这个过程称为方法调用计数器热度的衰减，这段时间称为方法调用计数器的半衰期。</p>
</blockquote>
<p><strong>方法调用计数器触发即时编译</strong><br><img src="/images/jvm/jit-invocation-counter-compile.png" alt=""></p>
<h3 id="回边计数器（Back-Edge-Counter）"><a href="#回边计数器（Back-Edge-Counter）" class="headerlink" title="回边计数器（Back Edge Counter）"></a>回边计数器（Back Edge Counter）</h3><p>回边计数器用于统计一个方法中循环体代码执行的次数（准确地说，应该是回边的次数，因为并非所有的循环都是回边），在字节码中遇到控制流向后跳转的指令就称为“<strong>回边</strong>”。</p>
<blockquote>
<p>建立回边计数器的目的就是为了触发OSR编译。<br>与方法计数器不同，回边计数器没有计数衰减热度的过程，因此统计的是该方法循环执行的绝对次数。</p>
</blockquote>
<p><strong>回边计数器触发即时编译</strong><br><img src="/images/jvm/jit-backedge-counter-compile.png" alt=""></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在确定虚拟机运行参数的前提下，这两个计数器都有一个确定的<strong>阀值</strong>，当计数器的值超过了阀值，就会触发JIT编译。</p>
<blockquote>
<p><em>触发了 JIT 编译后，在默认设置下，执行引擎并不会同步等待编译请求完成，而是继续进入解释器按照解释方式执行字节码</em>，直到提交的请求被编译器编译完成为止（<strong>编译工作在后台线程中进行</strong>）。当编译工作完成后，下一次调用该方法或代码时，就会使用已编译的版本。</p>
</blockquote>
<h1 id="JIT编译优化技术"><a href="#JIT编译优化技术" class="headerlink" title="JIT编译优化技术"></a>JIT编译优化技术</h1><p>以<strong>编译方式</strong>执行本地代码比<strong>解释方式</strong>更快，除了虚拟机解释执行字节码时额外消耗时间的原因外，还有一个很重要的原因就是虚拟机几乎把所有对代码的优化措施集中在了JIT编译器。</p>
<p>下面介绍的几种优化技术，都以下面的代码作为实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> class <span class="title">B</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> value;</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">	y = b.value;</div><div class="line">    <span class="comment">// ... do stuff ...</span></div><div class="line">    z = b.get();</div><div class="line">    sum = y + z;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h2><p>方法内联（Method Inlining）的重要性高于其他优化措施，它的主要目的有两个：</p>
<ul>
<li>一是出去方法调用的成本（如建立栈帧等）。</li>
<li>二是为其他优化建立良好的基础，方法内联膨胀之后，便于在更大范围上采取后续的优化手段。</li>
</ul>
<p>方法内联后的实例代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">	y = b.value;</div><div class="line">    <span class="comment">// ... do stuff ...</span></div><div class="line">    z = b.value;</div><div class="line">    sum = y + z;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="冗余访问消除"><a href="#冗余访问消除" class="headerlink" title="冗余访问消除"></a>冗余访问消除</h2><p>冗余访问消除（Redundant Loads Elimination），假设<code>... do stuff ...</code>所代表的操作不会改变<code>b.value</code>的值，那就可以把<code>z = b.value</code>替换成<code>z = y</code>，这样就可以不再去访问对象<code>b</code>的属性了。</p>
<p>在方法内联后，接着进行冗余访问消除后的实例代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">	y = b.value;</div><div class="line">    <span class="comment">// ... do stuff ...</span></div><div class="line">    z = y;</div><div class="line">    sum = y + z;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="公共子表达式消除"><a href="#公共子表达式消除" class="headerlink" title="公共子表达式消除"></a>公共子表达式消除</h2><p><strong>公共子表达式消除</strong>（Common Subexpression Elimination）:如果一个表达式E已经计算过了，并且从先前的计算到现在E中所有变量的值都没有发生变化，那么E的这次出现就成为了公共子表达式。对于这种表达式，没有必要花时间再对它进行计算，直接用钱买计算过的表达式结果代替E就可以了。</p>
<blockquote>
<p>如果把<code>b.value</code>看成是一个表达式，可以把这项优化看成是公共子表达式消除。</p>
</blockquote>
<p>例如，<code>int d = (c * b) * 12 + a + (a + b* c)；</code>javac编译器不会进行任何优化，但是虚拟机的JIT编译器会进行优化，将<code>c*b</code>与<code>b*c</code>是一样的表达式，而且在计算期间的值不会变化。因此，这条表达式可能被视为：<code>int d = E * 12 + a + (a +Ｅ)；</code>。<br>这时JIT编译器还能进行<strong>代数简化</strong>（Algebraic Simplification），把表达式变为：<code>int d = E * 13 + a * 2;</code>。</p>
<h2 id="复写传播"><a href="#复写传播" class="headerlink" title="复写传播"></a>复写传播</h2><p>对冗余访问消除后的代码进行复写传播（Copy Propagation）：因为在这段代码的逻辑中没有必要使用一个额外的变量<code>z</code>，它与变量<code>y</code>完全相等的，因此可以使用<code>y</code>来代替<code>z</code>。</p>
<p>复写传播后的实例代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">	y = b.value;</div><div class="line">    <span class="comment">// ... do stuff ...</span></div><div class="line">    y = y;</div><div class="line">    sum = y + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="无用代码消除"><a href="#无用代码消除" class="headerlink" title="无用代码消除"></a>无用代码消除</h2><p>无用代码消除（Dead Code Elimination）：无用代码是永远不会被执行的代码，也可能是完全没有意义的代码，形象称之为“Dead Code”。如在进行复写传播后实例中的<code>y = y</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</div><div class="line">	y = b.value;</div><div class="line">    <span class="comment">// ... do stuff ...</span></div><div class="line">    sum = y + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="数组边界检查消除"><a href="#数组边界检查消除" class="headerlink" title="数组边界检查消除"></a>数组边界检查消除</h2><p>数组边界检查消除（Array Bounds Checking Elimination）：是JIT编译器中的一项经典优化技术。为了安全，数组边界检查是不是必须在运行期一次不漏地检查则是可以“商量”的事情。</p>
<p>Java是一门<strong>动态安全</strong>的语言，为了安全会进行各种检查。这些安全检查也导致了相同的程序，Java要比C/C++做更多的事情（各种检查判断），这些事情就成为一种<strong>隐式开销</strong>，如果不处理好，就很可能成为一个Java语言比C/C++更慢的因素。</p>
<p>消除隐式开销的方式：</p>
<ul>
<li>将各种安全检查尽可能把运行期检查提到编译期完成。</li>
<li><strong>隐式异常处理</strong>：虚拟机通过注册一个异常处理器，当安全时不进行安全检查，因而也就不会额外消耗一次进行安全检查的开销。代价就是当不安全时必须转入到异常处理器进行处理（例如抛出异常），这个过程必须从<code>用户态</code>转到<code>内核态</code>中处理，结束后再回到用户态，速度远比一次安全检查慢。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[前端编译(Javac编译器)]]></title>
      <url>https://rogerfang.github.io/2017/01/01/%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91-Javac%E7%BC%96%E8%AF%91%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>Java语言中的“编译期”是一段“不确定”的操作过程。可能指的是以下三种：</p>
<ul>
<li><p><strong>前端编译器</strong></p>
<blockquote>
<p>把<em>.java文件转变成</em>.class文件的过程。</p>
</blockquote>
<p>  例如：Sun的javac、Eclipse JDT中的增量式编译器（ECJ）</p>
</li>
<li><p><strong>后端编译器</strong></p>
<blockquote>
<p>把字节码转变成机器码的过程。</p>
</blockquote>
<p>  例如：JIT编译器（分为client和server端）</p>
</li>
<li><p><strong>AOT编译器</strong></p>
<blockquote>
<p>直接把*.java文件编译成本地机器码的过程。</p>
</blockquote>
<p>  例如：GNU Compiler for the Java(GCJ)、Excelsior JET</p>
</li>
</ul>
<h1 id="编译器优化简介"><a href="#编译器优化简介" class="headerlink" title="编译器优化简介"></a>编译器优化简介</h1><blockquote>
<p>前端编译器（Javac）在编译期的优化过程对于<strong>程序编码</strong>来说关系更密切。<br>后端编译器（JIT）在运行期的优化过程对于<strong>程序运行</strong>来说更重要。</p>
</blockquote>
<p>虚拟机设计团队把对性能的优化集中到了后端编译器（JIT编译器）中，这样可以让那些不是由javac产生的Class文件（如JRuby、Groovy等语言的Class文件）也同样能享受到编译器优化所带来的好处。</p>
<p>但是Javac编译器做了许多针对Java语言编码过程的优化措施来改善程序员的编码风格和提高编码效率，Java的许多语法特性都是靠编译器的“语法糖”来实现的。</p>
<h1 id="Javac编译器"><a href="#Javac编译器" class="headerlink" title="Javac编译器"></a>Javac编译器</h1><p>Sun提供的Javac编译器的编译过程大致分为3个过程：</p>
<ol>
<li>解析与填充符号表过程。</li>
<li>插入式注解处理器的注解处理过程。</li>
<li>分析与字节码生成过程。</li>
</ol>
<p><img src="/images/jvm/java-compile-process.png" alt=""></p>
<h2 id="解析与填充符号表"><a href="#解析与填充符号表" class="headerlink" title="解析与填充符号表"></a>解析与填充符号表</h2><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><blockquote>
<p>词法分析是将源代码的字符流转变为<strong>标记（Token）</strong>的集合。</p>
</blockquote>
<p>单个字符是程序编写过程的最小元素；而标记（Token）则是编译过程的最小元素，关键字、变量名、运算符、字面量都可以称为标记。</p>
<h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><blockquote>
<p>语法分析是根据Token序列构造抽象语法树的过程。</p>
</blockquote>
<p><strong>抽象语法树</strong>（Abstract Syntax Tree）：是一种用来描述程序代码语法结构的树形表示方式。语法树中的每一个节点都代表着程序源代码中的一个语法结构（Construct），例如包、类型、修饰符、运算符、接口、返回值甚至代码注释都可以是一个语法结构。</p>
<blockquote>
<p>经过语法分析后，编译器就不会再对源码文件进行操作了，之后的操作都是建立在抽象语法树之上。</p>
</blockquote>
<h3 id="填充符号表"><a href="#填充符号表" class="headerlink" title="填充符号表"></a>填充符号表</h3><p><strong>符号表</strong>（Symbol Table）：是由一组符号地址和符号信息构成的表格。<br>符号表中保存的信息在编译的不同阶段都要用到。在语义分析（后面的步骤）中，符号表所登记的内容将用于语义检查和产生中间代码，在目标代码生成阶段，当对符号名进行地址分配时，符号表是地址分配的依据。</p>
<blockquote>
<p>在这个阶段，如果类的代码中没有提供任何构造函数，编译器会添加一个没有参数的、访问性与当前类一致的默认构造函数。</p>
</blockquote>
<h2 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h2><p>在JDK 1.5之后，Java提供了对注解（Annotation）的支持，这些注解与普通的Java代码一样，是在运行期间发挥作用的。</p>
<blockquote>
<p>在JDK 1.6中提供了一组插入式注解处理器的标准API在编译期间对注解进行处理，可以把它看作是一组编译器的插件，可以读取、修改、添加抽象语法树中的任意元素。</p>
</blockquote>
<p>注解处理器可以在处理注解期间对语法树进行修改，编译器将回到解析及填充符号表的过程进行重新处理，直到所有插入式注解处理器都没有再对语法树进行修改位置，每次循环称为一个<strong>Round</strong>。</p>
<p><img src="/images/jvm/javac-compiler-process.png" alt=""></p>
<h2 id="语义分析与字节码生成"><a href="#语义分析与字节码生成" class="headerlink" title="语义分析与字节码生成"></a>语义分析与字节码生成</h2><h3 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h3><p>语法分析得到了程序代码的抽象语法树表示，但无法保证源程序是符合逻辑的。</p>
<blockquote>
<p>语义分析：主要任务是对结构上正确的源程序进行上下文有关性质的审查。</p>
</blockquote>
<p>是否合乎语义逻辑必须限定在<strong>具体的语言</strong>与<strong>具体的上下文</strong>环境中才有意义。</p>
<p>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;</div><div class="line"><span class="keyword">char</span> c = <span class="number">2</span>;</div></pre></td></tr></table></figure></p>
<p>后续赋值运算：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> d = a + c; <span class="comment">// ok</span></div><div class="line"><span class="keyword">int</span> d = b + c; <span class="comment">// compile error</span></div><div class="line"><span class="keyword">char</span> d = a + c; <span class="comment">// compile error</span></div></pre></td></tr></table></figure></p>
<p>上述后续赋值如果在C语言中，都是可以正确编译的。</p>
<blockquote>
<p>Javac的编译过程中，语义分析又分为<strong>标注检查</strong>与<strong>数据及控制流分析</strong>。</p>
</blockquote>
<h4 id="标注检查"><a href="#标注检查" class="headerlink" title="标注检查"></a>标注检查</h4><p>标注检查，检查的内容包括诸如变量使用前是否已声明、变量与赋值之间的数据类型是否能够匹配等。</p>
<blockquote>
<p>在标注检查步骤中，还有一个重要的动作称为<strong>常量折叠</strong>。</p>
</blockquote>
<p>例如：在代码中定义了<code>int a = 1 + 2;</code>，在语法树上仍然能看到字面量<code>1</code>和<code>2</code>以及操作符<code>+</code>，但是经过<strong>常量折叠</strong>之后，她们将会被折叠为字面量<code>3</code>。</p>
<blockquote>
<p>由于在编译期间进行了常量折叠，所以代码里面的<code>int a = 1 + 2</code>比起直接定义<code>int a = 3;</code>，并不会增加程序运行期间的CPU指令运算量。</p>
</blockquote>
<h4 id="数据及控制流分析"><a href="#数据及控制流分析" class="headerlink" title="数据及控制流分析"></a>数据及控制流分析</h4><p>数据及控制流分析：是对程序上下文逻辑更进一步的验证。它可以检查出诸如程序局部变量在使用前是否有赋值、方法的每条路径是否都有返回值、是否所有的受查异常都被正确处理了等问题。</p>
<blockquote>
<p><strong>编译期</strong>的数据及控制流分析与<strong>运行期</strong>类加载时的数据及控制流分析的目的基本上是一致的，但是校验范围有所区别。</p>
</blockquote>
<p>例如：final语义校验<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">int</span> var = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> var = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法一与方法二在经过编译后得到的Class文件没有任何区别，局部变量与字段（实例变量、类变量）是有区别的，它在常量池中没有符号引用，自然就没有访问标志（Access_Flags）的信息，在Class文件中不可能知道一个局部变量是不是声明为final了。</p>
<blockquote>
<p>因此，将局部变量声明为final，对运行期是没有影响的，变量的不变形仅仅由编译器在编译期间保障。</p>
</blockquote>
<h3 id="解语法糖"><a href="#解语法糖" class="headerlink" title="解语法糖"></a>解语法糖</h3><blockquote>
<p>语法糖（Syntactic Sugar）：是计算机语言中的某种语法，这种语法对语言功能没有任何影响，但是可以增加程序的可读性，方便程序员的使用。例如：泛型、变长参数、自动拆箱/装箱等。</p>
</blockquote>
<p><strong>解语法糖</strong>：虚拟机运行时不支持这些语法糖，在编译期间会将它们还原为简单的基础语法结构。</p>
<h3 id="字节码生成"><a href="#字节码生成" class="headerlink" title="字节码生成"></a>字节码生成</h3><p>字节码生成阶会把前面各个步骤生成的信息（语法树、符号表）转换成字节码写到磁盘中，同时编译器还会进行少量的代码添加和转换工作（比如会添加实例构造器和类构造器，以及将字符串的加操作替换为<code>StringBuffer</code>或<code>StringBuilder</code>(JDK版本&gt;=1.5)的<code>append()</code>操作等）。</p>
<h4 id="实例构造器-lt-init-gt-和类构造器-lt-clinit-gt"><a href="#实例构造器-lt-init-gt-和类构造器-lt-clinit-gt" class="headerlink" title="实例构造器&lt;init&gt;()和类构造器&lt;clinit&gt;()"></a>实例构造器<code>&lt;init&gt;</code>()和类构造器<code>&lt;clinit&gt;()</code></h4><p>实例构造器<code>&lt;init&gt;()</code>和类构造器<code>&lt;clinit&gt;()</code>就是在字节码生成这个阶段被添加到语法树中的。（实例构造器和类构造器调用分别属于<strong>对象初始化</strong>和<strong>类初始化</strong>的两个过程，后面博客会继续介绍）</p>
<blockquote>
<p>注意：这里的实例构造器并不是指构造函数，更不是默认的构造的构造函数，<strong><em>默认的构造函数添加是在填充符号表阶段</em></strong>。</p>
</blockquote>
<p>这两个构造器的产生过程实际上是一个<strong>代码收敛</strong>的过程，编译器会把<strong>语句块</strong>、<strong>变量初始化</strong>、<strong>调用父类的实例构造器</strong>等操作收敛到<code>&lt;init&gt;()</code>和<code>&lt;clinit&gt;()</code>方法之中。</p>
<blockquote>
<p>并且会保证执行顺序：先执行父类的实例构造器<code>init&lt;&gt;</code>，然后初始化变量和执行语句块。</p>
</blockquote>
<p>对于<code>&lt;init&gt;()</code>而言是非静态语句块<code>{}</code>块和实例变量，对于<code>&lt;clinit&gt;()</code>而言是静态语句块<code>static{}</code>块和类变量。<br><code>&lt;clinit&gt;()</code>无需调用父类的<code>clinit()</code>方法，虚拟机会保证父类构造器的执行（类加载）。</p>
<blockquote>
<p>相关博客：<br><a href="https://rogerfang.github.io/2016/12/30/Java-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/">https://rogerfang.github.io/2016/12/30/Java-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[C和Java编译执行的过程比较]]></title>
      <url>https://rogerfang.github.io/2017/01/01/C%E5%92%8CJava%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%87%E7%A8%8B%E6%AF%94%E8%BE%83/</url>
      <content type="html"><![CDATA[<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>不论是物理机还是虚拟机，大部分的程序代码从开始编译到最终转化成物理机的目标代码或虚拟机能执行的指令集之前，都会按照如下图所示的各个步骤进行：</p>
<p><img src="/images/jvm/compile-process.png" alt=""></p>
<p>其中绿色的模块可以选择性实现。分为<strong>解释执行</strong>和<strong>编译执行</strong>。</p>
<ol>
<li>上图中间的那条分支是解释执行的过程（即一条字节码一条字节码地解释执行，如 JavaScript）。</li>
<li>而下面的那条分支就是传统编译原理中从源代码到目标机器代码的生成过程。</li>
</ol>
<p>如今，基于物理机、虚拟机等的语言，大多都遵循这种基于现代经典编译原理的思路，在执行前先对程序源码进行词法解析和语法解析处理，把源码转化为抽象语法树。对于一门具体语言的实现来说，词法和语法分析乃至后面的优化器和目标代码生成器都可以选择独立于执行引擎，形成一个<strong>完整意义的编译器</strong>去实现，这类代表是 <code>C/C++</code>语言。<br>也可以把抽象语法树或指令流之前的步骤实现一个<strong>半独立的编译器</strong>，这类代表是<code>Java</code>语言。<br>又或者可以把这些步骤和执行引擎全部集中在一起实现，如大多数的 <code>JavaScript</code>执行器。</p>
<blockquote>
<p>javac 字节码编译器与虚拟机内的 JIT 编译器的执行过程合起来其实就等同于一个传统的编译器所执行的编译过程。<br>Java与C/C++的编译器对比实际上代表了最经典的<strong>即时编译器与静态编译器</strong>的对比，很大程度上也决定了Java与C/C++的性能。</p>
</blockquote>
<h1 id="Java和C-C-比较"><a href="#Java和C-C-比较" class="headerlink" title="Java和C/C++比较"></a>Java和C/C++比较</h1><p>JVM的即时编译器与C/C++的静态编译器相比，可能会由于以下原因存在导致输出的本地代码有一些劣势：</p>
<ol>
<li>即时编译器运行占用的是用户程序的运行时间。</li>
<li>Java语言是动态的类型安全语言，实现上回进行各种安全检查。</li>
<li>Java语言没有<code>virtual</code>关键字，但是使用<strong>虚方法</strong>的频率却远远大于C/C++，这意味着运行时对方法接收者进行多态选择的频率要远远大于C/C++。</li>
<li>Java语言是可以动态扩展的语言，运行时加载新的类可能改变程序类型的继承关系，使得很多全局优化难以进行，JIT编译器不得不时刻关注类型的变化并在运行时撤销或重新进行一些优化。</li>
<li>Java语言中对象的内存分配都是在堆上进行的，只有方法中的局部变量才能在栈上分配。而C/C++的对象有多种内存分配方式（栈上分配线程私有的对象，将减轻内存回收的压力）。</li>
</ol>
<blockquote>
<p>Java语言上性能的劣势换取开发效率上的优势，动态安全、动态扩展、垃圾回收都为开发效率做出了很大贡献。</p>
</blockquote>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="编译和连接过程"><a href="#编译和连接过程" class="headerlink" title="编译和连接过程"></a>编译和连接过程</h2><p>整个过程会有这样4个步骤：</p>
<ol>
<li><strong>预处理</strong>(Preprocessing)：静态替换，处理预编译指令。</li>
<li><strong>编译</strong>(Compilation)：预处理完的文件进行一系列的词法分析，语法分析，语义分析及优化后生成相应的汇编代码。</li>
<li><strong>汇编</strong>(Assembly)：汇编代码转变成机器可以执行的命令，每一个汇编语句几乎都对应一条机器指令。</li>
<li><strong>连接</strong>(Linking)：通过调用链接器ld来链接程序运行需要的一大堆目标文件，以及所依赖的其它库文件，最后生成可执行文件。</li>
</ol>
<blockquote>
<p>最终得到的是一个.exe(windows)或.out(linux)文件。</p>
</blockquote>
<h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>在运行的时候，是将整个输出文件（a.exe）读到内存里运行的。</p>
<p>可见，经过编译和汇编步骤，会生成直接给CPU执行的机器指令。机器码就是0101的二进制代码。所以，执行C语言的时候，实际上是运行最底层的语言，这样的代码高效，却和芯片，操作系统紧密耦合在一起了。</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>Java的平台无关性的基础：</p>
<ol>
<li><strong>字节码存储格式</strong>。Java编译器会将.java文件编译为.class文件，.class文件就是能被JVM执行的代码，它包含Java虚拟机的指令集，符号表和其他辅助信息。</li>
<li><strong>Java虚拟机（JVM）</strong>。顾名思义它是加在应用层的一层抽象。从上层看，它就是CPU：加载并运行字节码代码，屏蔽了操作系统和硬件细节，对下，它将字节码翻译为CPU能执行的机器指令。</li>
</ol>
<p>Java编译和执行整个过程：<br><img src="/images/jvm/java-compile-execution-process.png" alt=""></p>
<h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>Java的编译过程就是将.java文件编译成.class文件。</p>
<h2 id="执行过程-1"><a href="#执行过程-1" class="headerlink" title="执行过程"></a>执行过程</h2><p>当JVM运行时，再按需加载这些.class到内存中。</p>
<blockquote>
<p>Java和C在编译过程中的一个差异是：在Java语言里面，类型的加载，连接，和初始化是在运行期间完成的。</p>
</blockquote>
<p>JVM 是基于栈的体系结构来执行 class 字节码的。线程创建后，都会产生程序计数器（PC）和栈（Stack），程序计数器存放下一条要执行的指令在方法内的偏移量，栈中存放一个个栈帧，每个栈帧对应着每个方法的每次调用，而栈帧又是有局部变量区和操作数栈两部分组成，局部变量区用于存放方法中的局部变量和参数，操作数栈中用于存放方法执行过程中产生的中间结果。</p>
<hr>
<p>感谢：<br><a href="http://afghl.github.io/2016/10/23/java-jvm-classloader-1.html" target="_blank" rel="external">http://afghl.github.io/2016/10/23/java-jvm-classloader-1.html</a><br><a href="http://wiki.jikexueyuan.com/project/java-vm/javac-jit.html" target="_blank" rel="external">http://wiki.jikexueyuan.com/project/java-vm/javac-jit.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 几种引用]]></title>
      <url>https://rogerfang.github.io/2016/12/31/Java-%E5%87%A0%E7%A7%8D%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Java中存在四种引用：强引用、软引用、弱引用、虚引用。</p>
</blockquote>
<h1 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h1><p>强引用（Strong Reference）：是最普通的引用类型，只要强引用存在，GC就不会进行垃圾回收。当内存空间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足的问题。</p>
<p>强引用，例如<code>Object obj = new Object();</code><br>可以使用<code>obj = null;</code>来帮助垃圾收集器回收此对象。</p>
<h1 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h1><p>软引用（Soft Reference）：用来描述一些有用但是非必需的对象。如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。软引用可用来实现内存敏感的高速缓存。</p>
<p>软引用，例如<code>SoftReference&lt;Object&gt; softRef = new SoftReference&lt;&gt;(obj);</code></p>
<h1 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h1><p>弱引用（Weak Reference）：是一种生命周期比软引用更短的引用。当GC扫描启动时，只要扫描到只具有弱引用的对象，无论内存是否够用都会执行GC，但由于GC线程优先级很低，因此并不一定能迅速发现这些弱引用对象。弱引用也可以和一个引用队列联合使用。</p>
<h1 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h1><p>虚引用（Phantom Reference）：不同于其余三种引用，虚引用不会影响对象的生命周期，也无法通过虚引用获得对象的一个实例；如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。虚引用主要用来跟踪对象被垃圾回收器回收的活动，它必须和引用队列（ReferenceQueue）联合使用。</p>
<blockquote>
<p>程序可以通过检测与虚引用关联的虚引用队列是否已经包含了指定的虚引用，从而了解虚引用的对象是否即将被回收。</p>
</blockquote>
<hr>
<p>感谢：<br><a href="http://www.sczyh30.com/posts/Java/java-reference-type/" target="_blank" rel="external">http://www.sczyh30.com/posts/Java/java-reference-type/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 反射原理解析]]></title>
      <url>https://rogerfang.github.io/2016/12/31/Java-%E5%8F%8D%E5%B0%84%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Java的反射机制允许我们动态的调用某个对象的方法/构造函数、获取某个对象的属性等，而无需在编码时确定调用的对象。</p>
</blockquote>
<h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><blockquote>
<p>JDK中<code>Method.invoke()</code>实际上并不是自己实现的反射调用逻辑，而是委托给<code>sun.reflect.MethodAccessor</code>来处理的。</p>
</blockquote>
<p>首先要了解Method对象的基本构成，每个Java方法有且只有一个Method对象作为<code>root</code>，它相当于根对象，对用户不可见。当我们创建Method对象时，我们代码中获得的Method对象都相当于它的副本（或引用）。root对象持有一个MethodAccessor对象，所以所有获取到的Method对象都共享这一个MethodAccessor对象，因此必须保证它在内存中的可见性。</p>
<p>JDK 1.8中<code>Method.invoke()</code>源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Method</span> <span class="keyword">extends</span> <span class="title">Executable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> MethodAccessor methodAccessor;</div><div class="line">    <span class="keyword">private</span> Method root;</div><div class="line"></div><div class="line">    <span class="meta">@CallerSensitive</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></div><div class="line">        <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</div><div class="line">           InvocationTargetException</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!override) &#123;</div><div class="line">            <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</div><div class="line">                Class&lt;?&gt; caller = Reflection.getCallerClass();</div><div class="line">                checkAccess(caller, clazz, obj, modifiers);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        MethodAccessor ma = methodAccessor;             <span class="comment">// read volatile</span></div><div class="line">        <span class="keyword">if</span> (ma == <span class="keyword">null</span>) &#123;</div><div class="line">            ma = acquireMethodAccessor();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ma.invoke(obj, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> MethodAccessor <span class="title">acquireMethodAccessor</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// First check to see if one has been created yet, and take it</span></div><div class="line">        <span class="comment">// if so</span></div><div class="line">        MethodAccessor tmp = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) tmp = root.getMethodAccessor();</div><div class="line">        <span class="keyword">if</span> (tmp != <span class="keyword">null</span>) &#123;</div><div class="line">            methodAccessor = tmp;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Otherwise fabricate one and propagate it up to the root</span></div><div class="line">            tmp = reflectionFactory.newMethodAccessor(<span class="keyword">this</span>);</div><div class="line">            setMethodAccessor(tmp);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="MethodAccessor"><a href="#MethodAccessor" class="headerlink" title="MethodAccessor"></a>MethodAccessor</h1><p><code>MethodAccessor</code>的实例是由<code>sun.reflect.ReflectionFactory</code>创建的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionFactory</span></span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> noInflation = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> MethodAccessor <span class="title">newMethodAccessor</span><span class="params">(Method var1)</span> </span>&#123;</div><div class="line">        checkInitted();</div><div class="line">        <span class="keyword">if</span>(noInflation &amp;&amp; !ReflectUtil.isVMAnonymousClass(var1.getDeclaringClass())) &#123;</div><div class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> MethodAccessorGenerator()).generateMethod(var1.getDeclaringClass(), var1.getName(), var1.getParameterTypes(), var1.getReturnType(), var1.getExceptionTypes(), var1.getModifiers());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            NativeMethodAccessorImpl var2 = <span class="keyword">new</span> NativeMethodAccessorImpl(var1);</div><div class="line">            DelegatingMethodAccessorImpl var3 = <span class="keyword">new</span> DelegatingMethodAccessorImpl(var2);</div><div class="line">            var2.setParent(var3);</div><div class="line">            <span class="keyword">return</span> var3;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际的MethodAccessor实现有两个版本，一个是Java实现的，另一个是native code实现的。<br>Java实现的版本在初始化时需要较多时间，但长久来说性能较好；<br>native版本正好相反，启动时相对较快，但运行时间长了之后速度就比不过Java版了。</p>
<blockquote>
<p>为了权衡两个版本的性能，Sun的JDK使用了“inflation”的技巧：让Java方法在被反射调用时，开头若干次使用native版，等反射调用次数超过阈值时则生成一个专用的MethodAccessor实现类，生成其中的invoke()方法的字节码，以后对该Java方法的反射调用就会使用Java版。</p>
</blockquote>
<p><strong>invoke方法调用过程</strong><br><img src="/images/javase/java-reflection-method-invoke.png" alt=""></p>
<hr>
<p>感谢：<br><a href="http://www.sczyh30.com/posts/Java/java-reflection-2/" target="_blank" rel="external">http://www.sczyh30.com/posts/Java/java-reflection-2/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 动态代理与反射]]></title>
      <url>https://rogerfang.github.io/2016/12/31/Java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><p>代理模式的特征是代理类与委托类有相同的接口。</p>
<blockquote>
<p>为某个对象提供一个代理，通过代理类这一中间层，可以有效地隐藏和保护被代理的真实对象，以控制对这个对象的访问。</p>
</blockquote>
<p>代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类以及事后处理等。</p>
<p>根据代理类的创建时间不同可以分为静态代理和动态代理。<br><strong>静态代理</strong>：通过编写源代码，然后编译，在运行前代理类的字节码文件就已经存在了。<br><strong>动态代理</strong>：在程序运行时，运用<em>反射机制</em>动态创建而成。</p>
<blockquote>
<p><code>System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;,&quot;true&quot;);</code><br>在运行时加上这一句可以保存动态生成的代理类的字节码文件，再反编译后即可查看类文件。</p>
</blockquote>
<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>优点：业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。</p>
<p>缺点：</p>
<ol>
<li>代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。</li>
<li>如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了<strong>代码维护的复杂度</strong>。</li>
<li>如果要按照下面例子的方法使用代理模式，那么委托类必须是事先已经存在的，并将其作为代理对象的内部属性。但是实际使用时，一个委托类必须对应一个代理类，如果大量使用会导致类的急剧膨胀；此外，如果事先并不知道委托类，该如何使用代理呢？这个问题可以通过Java的动态代理类来解决。</li>
</ol>
<h2 id="代理接口"><a href="#代理接口" class="headerlink" title="代理接口"></a>代理接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 代理接口</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISubject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="委托类"><a href="#委托类" class="headerlink" title="委托类"></a>委托类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 委托类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Read Subject do something"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 代理类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectProxy</span> <span class="keyword">implements</span> <span class="title">ISubject</span> </span>&#123;</div><div class="line">    <span class="comment">// 代理类持有一个委托类的对象引用</span></div><div class="line">    <span class="keyword">private</span> RealSubject delegate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubjectProxy</span><span class="params">(RealSubject delegate)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.delegate = delegate;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="comment">// 将消息转发给委托类处理</span></div><div class="line">        delegate.doSomething();</div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"Time cost: "</span> + (end - start) + <span class="string">"ms"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="静态代理工厂"><a href="#静态代理工厂" class="headerlink" title="静态代理工厂"></a>静态代理工厂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 静态代理工厂</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectStaticFactory</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 客户类调用工厂方法获得代理对象</div><div class="line">     * 对客户类来说，并不知道返回的是代理类对象还是委托类对象</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ISubject <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubjectProxy(<span class="keyword">new</span> RealSubject());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="客户类"><a href="#客户类" class="headerlink" title="客户类"></a>客户类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ISubject proxy = SubjectStaticFactory.getInstance();</div><div class="line">        proxy.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><h2 id="动态代理的机制"><a href="#动态代理的机制" class="headerlink" title="动态代理的机制"></a>动态代理的机制</h2><p>动态生成的代理类本身的特点：</p>
<ol>
<li>包：如果所代理的接口都是 public 的，那么它将被定义在顶层包（即包路径为空），如果所代理的接口中有非 public 的接口（因为接口不能被定义为 protect 或 private，所以除 public 之外就是默认的 package 访问级别），那么它将被定义在该接口所在包（假设代理了 com.ibm.developerworks 包中的某非 public 接口 A，那么新生成的代理类所在的包就是 com.ibm.developerworks），这样设计的目的是为了最大程度的保证动态代理类不会因为包管理的问题而无法被成功定义并访问。</li>
<li>类修饰符：该代理类具有 final 和 public 修饰符，意味着它可以被所有的类访问，但是不能被再度继承。</li>
<li>类名：格式是“$ProxyN”，其中 N 是一个逐一递增的阿拉伯数字，代表 Proxy 类第 N 次生成的动态代理类，值得注意的一点是，并不是每次调用 Proxy 的静态方法创建动态代理类都会使得 N 值增加，原因是如果对同一组接口（包括接口排列的顺序相同）试图重复创建动态代理类，它会很聪明地返回先前已经创建好的代理类的类对象，而不会再尝试去创建一个全新的代理类，这样可以节省不必要的代码重复生成，提高了代理类的创建效率。</li>
<li>代理类的继承关系：继承<code>Proxy</code>类，并实现所有的代理接口。</li>
</ol>
<blockquote>
<p>代理类总是从排在最前面的接口中获取方法对象并分派给调用处理器，而无论代理类实例是否正在以该接口（或继承于该接口的某子接口）的形式被外部引用，因为在代理类内部无法区分其当前的被引用类型。</p>
</blockquote>
<p>代理类实现的代理接口的特点：</p>
<ol>
<li>要注意不能有重复的接口，以避免动态代理类代码生成时的编译错误。2，这些接口对于类装载器必须可见，否则类装载器将无法链接它们，将会导致类定义失败。</li>
<li>需被代理的所有非 public 的接口必须在同一个包中，否则代理类生成也会失败。</li>
<li>接口的数目不能超过 65535，这是 JVM 设定的限制。</li>
</ol>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p><strong>优点</strong>：<br>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</p>
<p><strong>缺点</strong>：<br>JDK动态代理始终无法摆脱仅支持 interface 代理的桎梏，因为它的设计注定了这个遗憾。回想一下那些动态生成的代理类的继承关系图，它们已经注定有一个共同的父类叫 Proxy。Java 的继承机制注定了这些动态代理类们无法实现对 class 的动态代理，原因是多继承在 Java 中本质上就行不通。</p>
<h2 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h2><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><p><code>java.lang.reflect.Proxy</code>是Java动态代理机制生成的所有代理类的父类，提供了一组静态方法为一组接口动态地生成代理对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Proxy类的静态方法</span></div><div class="line"></div><div class="line"><span class="comment">// 获取指定代理对象所关联的调用处理器</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InvocationHandler  <span class="title">getInvocationHandler</span><span class="params">(Object proxy)</span></span></div><div class="line"></div><div class="line"><span class="comment">// 获取指定类加载器和一组接口的动态代理类的类对象</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; <span class="title">getProxyClass</span><span class="params">(ClassLoader loader, Class&lt;?&gt;... interfaces)</span></div><div class="line"></div><div class="line"><span class="comment">// 判断指定类对象是否是一个动态代理类</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isProxyClass</span><span class="params">(Class&lt;?&gt; cl)</span></div><div class="line"></div><div class="line"><span class="comment">// 生成动态代理类的实例，传入指定的类加载器、一组接口及调用处理器</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span></div></pre></td></tr></table></figure></p>
<h3 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h3><p>调用处理器接口<code>java.lang.reflect.InvocationHandler</code>，自定义了一个<code>invoke</code>方法，用于集中处理在动态代理类对象上的方法调用，通常在该方法中实现对委托类的代理访问。每次生成动态代理类对象时都要指定一个对应的调用处理器对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * proxy: 代理类的实例</div><div class="line"> * method: 被调用的方法对象</div><div class="line"> * args: 调用参数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div></pre></td></tr></table></figure></p>
<h3 id="Classloader"><a href="#Classloader" class="headerlink" title="Classloader"></a>Classloader</h3><p>类加载器<code>java.lang.Classloader</code>，负责将字节码装在到Java虚拟机中并为其定义Class对象，然后该类才能被使用。</p>
<p>Proxy 静态方法生成动态代理类同样需要通过类装载器来进行装载才能使用，它与普通类的唯一区别就是其字节码是由 JVM 在运行时动态生成的而非预存在于任何一个 .class 文件中。<br>每次生成动态代理类对象时都需要指定一个类装载器对象</p>
<h2 id="动态代理实现步骤"><a href="#动态代理实现步骤" class="headerlink" title="动态代理实现步骤"></a>动态代理实现步骤</h2><p>具体步骤是：</p>
<ol>
<li>实现InvocationHandler接口创建自己的调用处理器</li>
<li>给Proxy类提供ClassLoader和代理接口类型数组创建动态代理类</li>
<li>以调用处理器类型为参数，利用反射机制得到动态代理类的构造函数</li>
<li>以调用处理器对象为参数，利用动态代理类的构造函数创建动态代理类对象</li>
</ol>
<h3 id="分步骤实现动态代理"><a href="#分步骤实现动态代理" class="headerlink" title="分步骤实现动态代理"></a>分步骤实现动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// Step 1</span></div><div class="line">InvocationHandler handler = <span class="keyword">new</span> InvocationHandlerImpl(..);</div><div class="line"><span class="comment">// Step 2</span></div><div class="line">Class clazz = Proxy.getProxyClass(classLoader, <span class="keyword">new</span> Class[] &#123; Interface.class, ... &#125;);</div><div class="line"><span class="comment">// Step 3</span></div><div class="line">Constructor constructor = clazz.getConstructor(<span class="keyword">new</span> Class[] &#123; InvocationHandler.class &#125;);</div><div class="line"><span class="comment">// Step 4</span></div><div class="line">Interface Proxy = (Interface)constructor.newInstance(<span class="keyword">new</span> Object[] &#123; handler &#125;);</div></pre></td></tr></table></figure>
<p><strong>完整实例</strong>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyTest</span> </span>&#123;</div><div class="line">	<span class="comment">// 可以通过代理工厂来屏蔽客户类具体的创建过程和返回的到底是代理类对象还是委托类对象。</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException </span>&#123;</div><div class="line">        <span class="comment">// Step 1. 实现InvocationHandler</span></div><div class="line">        InvocationHandler invocationHandler = <span class="keyword">new</span> MyInvocationHandler(<span class="keyword">new</span> RealSubject());</div><div class="line"></div><div class="line">        <span class="comment">// Step2. 获取代理类的Class对象</span></div><div class="line">        Class&lt;?&gt; cls = Proxy.getProxyClass(DynamicProxyTest.class.getClassLoader(), ISubject.class);</div><div class="line">        <span class="comment">// Step3. 反射得到构造函数对象</span></div><div class="line">        Constructor constructor = cls.getConstructor(InvocationHandler.class);</div><div class="line">        <span class="comment">// Step4. 反射创建代理类对象</span></div><div class="line">        ISubject proxy = (ISubject) constructor.newInstance(invocationHandler);</div><div class="line"></div><div class="line">        proxy.doSomething();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Object delegate;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object delegate)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.delegate = delegate;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">            <span class="comment">// 利用反射机制将请求分派给委托类处理。</span></div><div class="line">            <span class="comment">// Method的invoke返回Object对象作为方法执行结果</span></div><div class="line">            <span class="comment">// 因为示例程序没有返回值，所以这里忽略了返回值处理</span></div><div class="line">            method.invoke(delegate, args);</div><div class="line">            <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">            System.out.println(<span class="string">"Time cost: "</span>+(end - start)+<span class="string">"ms"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="简化的动态代理实现"><a href="#简化的动态代理实现" class="headerlink" title="简化的动态代理实现"></a>简化的动态代理实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Step 1. 实现调用处理器</span></div><div class="line">InvocationHandler handler = <span class="keyword">new</span> InvocationHandlerImpl(..);</div><div class="line"><span class="comment">// Step2. 创建代理类实例</span></div><div class="line">Interface proxy = (Interface)Proxy.newProxyInstance( classLoader, <span class="keyword">new</span> Class[] &#123; Interface.class &#125;,  handler );</div></pre></td></tr></table></figure>
<h1 id="Cglib动态代理"><a href="#Cglib动态代理" class="headerlink" title="Cglib动态代理"></a>Cglib动态代理</h1><p>JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理。<br>Cglib动态代理是<strong>继承代理</strong>，它的底层使用ASM（JAVA字节码处理框架）在内存中动态的生成被代理类的子类，重写并增强方法的功能。但因为采用的是继承，所以不能对final修饰的类进行代理。<br><strong>1.委托类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Real Subject: do something"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2.Cglib代理</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</div><div class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 创建代理对象</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(Object target)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</div><div class="line">        enhancer.setSuperclass(<span class="keyword">this</span>.target.getClass());</div><div class="line">        <span class="comment">// 回调方法，方法拦截器</span></div><div class="line">        enhancer.setCallback(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// 创建代理对象</span></div><div class="line">        <span class="keyword">return</span> enhancer.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 回调方法</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        methodProxy.invokeSuper(o, args);</div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">        System.out.println(<span class="string">"Cglib proxy, time cost:"</span> + (end - start) + <span class="string">"ms"</span>);</div><div class="line">        <span class="comment">// 这里调用的doSomething无返回值，故使用return null</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>感谢：<br><a href="http://blog.jrwang.me/2015/java-dynamic-proxy-and%20java-reflection/" target="_blank" rel="external">http://blog.jrwang.me/2015/java-dynamic-proxy-and%20java-reflection/</a><br><a href="http://blog.csdn.net/giserstone/article/details/17199755" target="_blank" rel="external">http://blog.csdn.net/giserstone/article/details/17199755</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 反射]]></title>
      <url>https://rogerfang.github.io/2016/12/31/Java-%E5%8F%8D%E5%B0%84/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>反射能够让运行在JVM中的程序检测和修改运行时的行为，使用反射API可以在运行时获取对象的内部结构信息。</p>
<blockquote>
<p>JVM的类加载机制允许从多种源动态地加载Java类，但是动态类加载有一个重要的缺点，即我们在使用动态加载的类对象时，往往对这个类知之甚少，甚至于一无所知。这种情况下就需要使用一种动态编程技术——反射。</p>
</blockquote>
<p>优点：<br>可以在运行时加载类，并获取类的内部结构，还可以创建新的对象和调用对象中的方法等，增加了运行时刻的灵活性。</p>
<p>缺点：<br>使用反射的一个最大的缺点就是性能稍差，需要在灵活性和性能之间进行权衡。</p>
<h1 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h1><p>反射使用<strong>Class对象</strong>提供的基本<strong>元数据</strong>，能够从Class对象中获取方法和字段的名称，并获取表示方法和对象的字段。基于此，我们就能在之前类型未知的对象上获取甚至调用它的任意方法。</p>
<p>Java中存在一个Class类，<strong>Class对象是在运行中的Java进程里表示实时类型的方式</strong>。Class对象包含了指定类型的元数据，包括这个类中定义的方法、字段、构造方法等。<br>在JVM中，每加载一个类，就会在堆内存中为这个类生成一个java.lang.Class 对象。Class类并没有提供public的构造方法，在类加载完成后，JVM会自动为其生成相应的Class对象。<em>要使用反射，首先就必须获取到Class对象</em>。</p>
<h1 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h1><h2 id="getClass-方式"><a href="#getClass-方式" class="headerlink" title="getClass()方式"></a><code>getClass()</code>方式</h2><p>通过一个类的实例来得到Class对象<br><code>Class&lt;?&gt; cls = obj.getClass();</code></p>
<h2 id="class方式"><a href="#class方式" class="headerlink" title=".class方式"></a><code>.class</code>方式</h2><p>如果在编译期知道类名，可以使用以下方式得到Class对象：<br><code>Class&lt;?&gt; cls = String.class;</code>或者<code>Class&lt;?&gt; cls = Integer.TYPE;</code></p>
<h2 id="Class-forName-方式"><a href="#Class-forName-方式" class="headerlink" title="Class.forName()方式"></a><code>Class.forName()</code>方式</h2><p>如果在编译期不知道类名，但是在运行期可以获得，可以使用以下方式得到Class对象：<br><code>Class&lt;?&gt; cls = Class.forName(&quot;类的全限定名&quot;);</code></p>
<blockquote>
<p>Class.forName()是调用当前所在类的类加载器来加载的。</p>
</blockquote>
<p>这种方式其实是利用反射API把指定字符串的类加载到内存中，所以也叫类加载器加载方法。<br>这样的话，它会把该类的静态方法、静态属性和静态代码全部加载到内存中。但这时候，对象还没有产生。所以为什么静态方法不能访问非静态属性和方法。因为静态方法和属性产生的时机在非静态属性和方法之前。</p>
<p>当接着运行<code>cls.newInstance();</code>时，会进行类的实例化操作（执行非静态的属性初始化和非静态代码块，然后调用构造方法完成实例化）。</p>
<h1 id="反射API"><a href="#反射API" class="headerlink" title="反射API"></a>反射API</h1><p>Java 反射API的主要作用体现在两个方面：在运行时刻获取类的内部结构和操作一个Java对象。</p>
<h2 id="获取类的内部结构"><a href="#获取类的内部结构" class="headerlink" title="获取类的内部结构"></a>获取类的内部结构</h2><p>通过Class对象，可以通过其中的方法来获取到该类中的构造方法、域和方法。对应的方法分别是<code>getConstructor</code>、<code>getField</code>和<code>getMethod</code>，只会获取所有public修饰的元素。这三个方法还有对应的<code>getDeclaredXXX</code>版本，区别在于<code>getDeclaredXXX</code>版本的方法只会获取该类自身所声明的元素（包括所有，不论public、protected和private还是默认的修饰符），而不会考虑继承下来的。</p>
<h2 id="操作Java对象"><a href="#操作Java对象" class="headerlink" title="操作Java对象"></a>操作Java对象</h2><p>对Java对象的操作包括：</p>
<ol>
<li>动态创建一个Java类的对象</li>
<li>获取某个域的值</li>
<li>调用某个方法<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testReflectAPI</span><span class="params">()</span></span>&#123;</div><div class="line">    Class&lt;?&gt; cls = MyClass.class;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 获取构造方法</span></div><div class="line">        Constructor constructor = cls.getConstructor(String.class, <span class="keyword">int</span>.class);</div><div class="line">        <span class="comment">// 创建对象</span></div><div class="line">        MyClass obj = (MyClass) constructor.newInstance(<span class="string">"Roger"</span>, <span class="number">23</span>);</div><div class="line">        <span class="comment">// 获取方法</span></div><div class="line">        Method method = cls.getMethod(<span class="string">"print"</span>, String.class);</div><div class="line">        <span class="comment">// 调用方法</span></div><div class="line">        method.invoke(obj, <span class="string">"method invoke"</span>);</div><div class="line">        <span class="comment">// 获取私有域</span></div><div class="line">        Field field = cls.getDeclaredField(<span class="string">"name"</span>);</div><div class="line">        field.setAccessible(<span class="keyword">true</span>);</div><div class="line">        System.out.println(<span class="string">"private field reflect: "</span> + field.get(obj));</div><div class="line">        <span class="comment">// 获取共有域</span></div><div class="line">        Field field1 = cls.getField(<span class="string">"age"</span>);</div><div class="line">        System.out.println(<span class="string">"public field reflect: "</span> + field1.getInt(obj));</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MyClass.print:method invoke</div><div class="line">private field reflect: Roger</div><div class="line">public field reflect: 23</div></pre></td></tr></table></figure></p>
<h1 id="反射对泛型的支持"><a href="#反射对泛型的支持" class="headerlink" title="反射对泛型的支持"></a>反射对泛型的支持</h1><p>Java 5中引入了泛型的概念之后，Java反射API也做了相应的修改，以提供对泛型的支持。由于类型擦除机制的存在，泛型类中的类型参数等信息，在运行时刻是不存在的。JVM看到的都是原始类型。对此，Java 5对Java类文件的格式做了修订，添加了Signature属性，用来包含不在JVM类型系统中的类型信息。比如以java.util.List接口为例，在其类文件中的Signature属性的声明是<e:ljava lang="" object;="">Ljava/lang/Object;Ljava/util/Collection<te;>;; ，这就说明List接口有一个类型参数E。在运行时刻，JVM会读取Signature属性的内容并提供给反射API来使用。</te;></e:ljava></p>
<h2 id="域类型"><a href="#域类型" class="headerlink" title="域类型"></a>域类型</h2><p>定义一个泛型域<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; list;</div></pre></td></tr></table></figure></p>
<p>比如在代码中声明了一个域是List<string>类型的，虽然在运行时刻其类型会变成原始类型List，但是仍然可以通过反射来获取到所用的实际的类型参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 反射获取域的泛型类型</span></div><div class="line">Field field = cls.getDeclaredField(<span class="string">"list"</span>); <span class="comment">// list的类型是List&lt;String&gt;</span></div><div class="line">Type type = field.getGenericType();</div><div class="line"><span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType)&#123;</div><div class="line">    ParameterizedType paramType = (ParameterizedType) type;</div><div class="line">    Type[] actualTypes = paramType.getActualTypeArguments();</div><div class="line">    <span class="keyword">for</span> (Type aType: actualTypes)&#123;</div><div class="line">        <span class="keyword">if</span> (aType <span class="keyword">instanceof</span>  Class)&#123;</div><div class="line">            Class aCls = (Class) aType;</div><div class="line">            System.out.println(<span class="string">"field: "</span> + aCls.getName()); <span class="comment">// 输出java.lang.String</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></string></p>
<h2 id="方法返回类型"><a href="#方法返回类型" class="headerlink" title="方法返回类型"></a>方法返回类型</h2><p>定义方法返回类型为泛型的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getList</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用反射获取方法返回类型的类型参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Method method1 = cls.getMethod(<span class="string">"getList"</span>);</div><div class="line">Type returnType = method1.getGenericReturnType();</div><div class="line"><span class="keyword">if</span> (returnType <span class="keyword">instanceof</span> ParameterizedType)&#123;</div><div class="line">    ParameterizedType paramType = (ParameterizedType) returnType;</div><div class="line">    Type[] typeArg = paramType.getActualTypeArguments();</div><div class="line">    <span class="keyword">for</span> (Type aType: typeArg)&#123;</div><div class="line">        Class aCls = (Class) aType;</div><div class="line">        System.out.println(<span class="string">"return: "</span> + aCls.getName()); <span class="comment">// 输出java.lang.String</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="方法参数类型"><a href="#方法参数类型" class="headerlink" title="方法参数类型"></a>方法参数类型</h2><p>定义方法参数为泛型的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用反射获取方法的泛型参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Method method2 = cls.getMethod(<span class="string">"setList"</span>, List.class);</div><div class="line">Type[] genericParameterTypes = method2.getGenericParameterTypes();</div><div class="line"><span class="keyword">for</span> (Type genericParameterType: genericParameterTypes)&#123;</div><div class="line">    <span class="keyword">if</span> (genericParameterType <span class="keyword">instanceof</span>  ParameterizedType)&#123;</div><div class="line">        ParameterizedType aType = (ParameterizedType) genericParameterType;</div><div class="line">        Type[] paramArgTypes = aType.getActualTypeArguments();</div><div class="line">        <span class="keyword">for</span> (Type paramArgType: paramArgTypes)&#123;</div><div class="line">            Class paramArgClass = (Class) paramArgType;</div><div class="line">            System.out.println(<span class="string">"arg: "</span> + paramArgClass.getName()); <span class="comment">// 输出java.lang.String</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Type接口"><a href="#Type接口" class="headerlink" title="Type接口"></a>Type接口</h2><p>Java里<code>Type</code>接口是所有类型的超接口，<code>Class</code>类时<code>Type</code>接口的一个实现。</p>
<blockquote>
<p>Type is the common superinterface for all types in the Java programming language. These include raw types, parameterized types, array types, type variables and primitive types.</p>
</blockquote>
<p>为了通过反射获取泛型信息，Java分别新增了几个Type接口的子接口，除了上面提到的<code>ParameterizedType</code>外，还有<code>GenericArrayType</code>,<code>TypeVariable</code>和<code>WildcardType</code>。</p>
<table>
<thead>
<tr>
<th>Class</th>
<th>通常的Class类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>ParameterizedType</td>
<td>参数化类型，List</td>
</tr>
<tr>
<td>TypeVariable</td>
<td>各种类型变量的通用接口，T</td>
</tr>
<tr>
<td>GenericArrayType</td>
<td>一种元素类型是参数化类型或者类型变量的数组类型，T[]</td>
</tr>
<tr>
<td>WildcardType</td>
<td>一种通配符类型表达式，如<code>?</code>，<code>? extends Number</code>， <code>? super Integer</code></td>
</tr>
</tbody>
</table>
<h1 id="反射对注解的支持"><a href="#反射对注解的支持" class="headerlink" title="反射对注解的支持"></a>反射对注解的支持</h1><p>同样可以通过反射来获取注解信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findDeprecatedMethods</span><span class="params">(Class&lt;?&gt; clz)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Method m : clz.getMethods()) &#123;</div><div class="line">        <span class="keyword">for</span> (Annotation a : m.getAnnotations()) &#123;</div><div class="line">            <span class="keyword">if</span> (a.annotationType() == Deprecated.class) &#123;</div><div class="line">                System.out.println(m.getName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>感谢：<br><a href="http://blog.jrwang.me/2015/java-reflection/" target="_blank" rel="external">http://blog.jrwang.me/2015/java-reflection/</a><br><a href="http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy" target="_blank" rel="external">http://www.infoq.com/cn/articles/cf-java-reflection-dynamic-proxy</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 泛型Generics]]></title>
      <url>https://rogerfang.github.io/2016/12/30/Java-%E6%B3%9B%E5%9E%8BGenerics/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Java泛型(Generics)是JDK 1.5中引入的一个新特性，允许在定义类和接口的时候使用类型参数（type parameter）。声明的类型参数在使用时用具体的类型来替换，泛型最主要的应用是在JDK 1.5中的新集合类框架中。</p>
<p>泛型使得编译器在编译时就可以发现很多错误，可以解决之前的集合类框架在使用过程中通常会出现的运行时类型错误。</p>
<h1 id="类型擦除-type-erasure"><a href="#类型擦除-type-erasure" class="headerlink" title="类型擦除(type erasure)"></a>类型擦除(type erasure)</h1><p>类型擦除：使用泛型的时候加上类型参数，会在编译器进行编译的时候去掉。</p>
<blockquote>
<p>Java 语言中的泛型基本上完全在编译器中实现，由编译器执行类型检查和类型推断，然后生成普通的非泛型的字节码。</p>
</blockquote>
<p>例如：代码中定义的<code>List&lt;Object&gt;</code>和<code>List&lt;String&gt;</code>在编译之后都会变成<code>List</code>。</p>
<h2 id="类型擦除的过程"><a href="#类型擦除的过程" class="headerlink" title="类型擦除的过程"></a>类型擦除的过程</h2><ol>
<li>找到用来替换类型参数的具体类<br>这个具体类一般是<code>Object</code>，如果指定了类型参数的上界，则使用这个上界。把代码中的类型参数都替换成具体的类，同时去掉出现的类型声明，即去掉<code>&lt;&gt;</code>的内容。比如，<code>T get()</code>方法声明就变成了<code>Object get()</code>，<code>List&lt;String&gt;</code>就变成了<code>List</code>。</li>
<li>生成桥接方法（bridge method）<br>这是由于擦除了类型之后的类可能缺少某些必须的方法。<br>比如下面的<code>MyString</code>类，当类型信息被擦除之后，就变成了<code>class MyString implements Comparable</code>，但是这样累<code>MyString</code>就会有编译错误，因为没有实现接口<code>Comparable</code>声明的<code>int compareTo(Object)</code>方法。这个时候就由<strong>编译器来动态生成</strong>这个方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyString</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(String str)</span></span>&#123;</div><div class="line">    	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>泛型类没有自己独有的Class类对象。<br>比如不存在<code>List&lt;String&gt;.class</code>或者<code>List&lt;Integer&gt;.class</code>，而只有<code>List.class</code>。经过类型擦除后只剩下原始类型。</li>
<li>静态变量是被泛型类的所有实例所共享的。<br>对于声明为<code>MyClass&lt;T&gt;</code>的类，访问其中的静态变量的方法仍然是<code>MyClass.staticVar</code>。不论是通过<code>new MyClass&lt;String&gt;</code>还是<code>new MyClass&lt;Integer&gt;</code>创建的对象，都共享一个静态变量。</li>
<li>泛型的类型参数不能用在异常处理的catch语句中。<br>异常处理是由JVM在运行时刻来进行的，异常类型被擦除后JVM将无法区分。</li>
</ol>
<h1 id="通配符与上下界"><a href="#通配符与上下界" class="headerlink" title="通配符与上下界"></a>通配符与上下界</h1><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>通配符代表的是一组类型，但是具体的类型是未知的。</p>
<p><code>List&lt;?&gt;</code>所声明的就是List中包含的元素类型是未知的，但是<code>List&lt;?&gt;</code>并不等同于<code>List&lt;Object&gt;</code>。<code>List&lt;Object&gt;</code>实际上确定了List中包含的是Object及其子类，而<code>List&lt;?&gt;</code>其中所包含的元素是不确定的。</p>
<p>因为<code>List&lt;?&gt;</code>的中元素类型是位置的，所以不能通过<code>new ArrayList&lt;?&gt;</code>的方式来创建一个新的ArrayList对象（因为编译器无法知道具体的类型是什么）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(List&lt;?&gt; list)</span></span>&#123;</div><div class="line">	list.add(<span class="number">1</span>); <span class="comment">// 编译错误</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="上下界"><a href="#上下界" class="headerlink" title="上下界"></a>上下界</h2><p><code>List&lt;?&gt;</code>中的元素类型是未知的，但是可以使用上下界来限制未知类型的范围。当引入了上界类之后，在使用类型的时候就可以使用上界类中定义的方法。</p>
<p><code>List&lt;? extends Number&gt;</code>说明List中可能包含的元素类型是Number及其子类。访问<code>List&lt;? extends Number&gt;</code>的时候，可以使用Number类的方法（比如<code>intValue()</code>等）。<br><code>List&lt;? super Number&gt;</code>说明List中包含的元素类型是Number及其父类。</p>
<blockquote>
<p>Tips：当你需要从一个数据结构中获取数据时(get)，那么就使用 ? extends T；如果你需要存储数据(put)到一个数据结构时，那么就使用 ? super T； 如果你又想存储数据，又想获取数据，那么就不要使用通配符 ? ，即直接使用具体泛型T。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&gt; List&lt;? extends Parent&gt; exParentlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">&gt; exParentlist.add(<span class="keyword">new</span> Child()); <span class="comment">// compile error, 编译器无法检测安全性</span></div><div class="line">&gt; exParentlist.add(<span class="keyword">new</span> Parent()); <span class="comment">// compile error</span></div><div class="line">&gt; exParentlist.add(<span class="keyword">new</span> GrandParent()); <span class="comment">// compile error</span></div><div class="line">&gt; </div><div class="line">&gt; List&lt;? <span class="keyword">super</span> Parent&gt; superParentList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">&gt; superParentList.add(<span class="keyword">new</span> GrandParent()); <span class="comment">// compile error</span></div><div class="line">&gt; superParentList.add(<span class="keyword">new</span> Parent()); <span class="comment">// ok</span></div><div class="line">&gt; superParentList.add(<span class="keyword">new</span> Child()); <span class="comment">// ok, Parent为下界，因此它的子类是安全的。</span></div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="泛型的类型系统"><a href="#泛型的类型系统" class="headerlink" title="泛型的类型系统"></a>泛型的类型系统</h1><p>引入泛型之后的类型系统增加了两个维度：一个是类型参数自身的继承体系结构，另外一个是泛型类或接口自身的继承体系结构。第一个指的是对于 List<string>和List<object>这样的情况，类型参数String是继承自Object的。而第二种指的是 List接口继承自Collection接口。对于这个类型系统，有如下的一些规则：</object></string></p>
<ul>
<li><strong>相同类型参数</strong>的泛型类的关系取决于泛型类自身的继承体系结构。即List<string>是Collection<string> 的子类型，List<string>可以替换Collection<string>。这种情况也适用于带有上下界的类型声明。</string></string></string></string></li>
<li>当泛型类的类型声明中使用了<strong>通配符</strong>的时候， 其子类型可以在两个维度上分别展开。如对Collection&lt;? extends Number&gt;来说，其子类型可以在Collection这个维度上展开，即List&lt;? extends Number&gt;和Set&lt;? extends Number&gt;等；也可以在Number这个层次上展开，即Collection<double>和 Collection<integer>等。如此循环下去，ArrayList<long>和 HashSet<double>等也都算是Collection&lt;? extends Number&gt;的子类型。</double></long></integer></double></li>
<li>如果泛型类中包含多个类型参数，则对于每个类型参数分别应用上面的规则。</li>
</ul>
<h1 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h1><p>一个类可以有多个类型参数，如 MyClass<x, y,="" z="">。 每个类型参数在声明的时候可以指定<strong>上界</strong>（不能指定下界super）。<br>所声明的类型参数在Java类中可以像一般的类型一样作为方法的参数和返回值，或是作为域和局部变量的类型。</x,></p>
<blockquote>
<p>但是由于类型擦除机制，类型参数并<strong>不能用来</strong>创建对象或是作为静态变量的类型。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassTest</span>&lt;<span class="title">X</span> <span class="keyword">extends</span> <span class="title">Number</span>, <span class="title">Y</span>, <span class="title">Z</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> X x;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Y y; <span class="comment">//编译错误，不能用在静态变量中    </span></div><div class="line">    <span class="function"><span class="keyword">public</span> X <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//正确用法</span></div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">wrong</span><span class="params">()</span> </span>&#123;</div><div class="line">        Z z = <span class="keyword">new</span> Z(); <span class="comment">//编译错误，不能创建对象</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="自定义泛型方法"><a href="#自定义泛型方法" class="headerlink" title="自定义泛型方法"></a>自定义泛型方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 一个简单的泛型方法</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">    System.out.println(t);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法的参数彻底泛化了，这个过程涉及到编译器的<strong>类型推导</strong>和<strong>自动打包</strong>，也就说原来需要我们自己对类型进行的判断和处理，现在编译器帮我们做了。这样在定义方法的时候不必考虑以后到底需要处理哪些类型的参数，大大增加了编程的灵活性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 泛型方法结合可变参数</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T... args)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (T t : args) &#123;</div><div class="line">        System.out.println(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    out(<span class="string">"findingsea"</span>, <span class="number">123</span>, <span class="number">11.11</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="泛型参数的自动推断"><a href="#泛型参数的自动推断" class="headerlink" title="泛型参数的自动推断"></a>泛型参数的自动推断</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericUtil</span></span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">    	System.out.println(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="显示指定泛型"><a href="#显示指定泛型" class="headerlink" title="显示指定泛型"></a>显示指定泛型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GenericUtil.&lt;String&gt;out(<span class="string">"aa"</span>);</div></pre></td></tr></table></figure>
<h2 id="隐式指定泛型"><a href="#隐式指定泛型" class="headerlink" title="隐式指定泛型"></a>隐式指定泛型</h2><p>隐式指定泛型，其实就是让编译器自己去推断。可以根据接收的参数类型来推断出T，或者根据方法赋值的目标参数来推断。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GenericUtil.out(<span class="string">"aa"</span>);</div></pre></td></tr></table></figure></p>
<hr>
<p>感谢：<br><a href="http://www.infoq.com/cn/articles/cf-java-generics" target="_blank" rel="external">http://www.infoq.com/cn/articles/cf-java-generics</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java 初始化顺序]]></title>
      <url>https://rogerfang.github.io/2016/12/30/Java-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>初始化操作的执行顺序：</p>
<ol>
<li>所有静态成员/初始块先执行</li>
<li>父类初始化完成（非静态成员/初始块执行 -&gt; 构造函数调用）</li>
<li>子类初始化完成（非静态成员/初始块执行 -&gt; 构造函数调用）</li>
</ol>
<p>例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 父类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a1 = intA1();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">intA1</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"1. Parent, static int a1 = intA1();"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"6. Parent, non-static initial block1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.out.println(<span class="string">"2. Parent, static initial block1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"7. Parent, non-static initial block2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.out.println(<span class="string">"3. Parent, static initial block2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a2 = intA2();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">intA2</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"4. Parent, static int a2 = intA2();"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"8. Parent, constructor method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 子类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"9. Child, non-static initial block1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> c1 = intC1();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">intC1</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"10. Child, int c1 = intC1();"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"11. Child, non-static initial block2"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        System.out.println(<span class="string">"5. Child, static initial block1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Child</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"12. Child, constructor method"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 测试类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExeSeqTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Child child = <span class="keyword">new</span> Child();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行顺序结果如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">1. Parent, static int a1 = intA1();</div><div class="line">2. Parent, static initial block1</div><div class="line">3. Parent, nonstatic initial block2</div><div class="line">4. Parent, static int a2 = intA2();</div><div class="line">5. Child, static initial block1</div><div class="line">6. Parent, non-static initial block1</div><div class="line">7. Parent, non-static initial block2</div><div class="line">8. Parent, constructor method</div><div class="line">9. Child, non-static initial block1</div><div class="line">10. Child, int c1 = intC1();</div><div class="line">11. Child, non-static initial block2</div><div class="line">12. Child, constructor method</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(15): HashMap和HashTable异同]]></title>
      <url>https://rogerfang.github.io/2016/12/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-15-HashMap%E5%92%8CHashTable%E5%BC%82%E5%90%8C/</url>
      <content type="html"><![CDATA[<h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><blockquote>
<p><code>HashMap</code>和<code>HashTable</code>都是存储“键值对”的散列表，都采用拉链法解决Hash冲突。</p>
</blockquote>
<p><strong>添加</strong>key-value键值对：首先，根据key值计算出哈希值，再计算出数组索引(即，该key-value在table中的索引)。然后，根据数组索引找到Entry(即，单向链表)，再遍历单向链表，将key和链表中的每一个节点的key进行对比。若key已经存在Entry链表中，则用该value值取代旧的value值；若key不存在Entry链表中，则新建一个key-value节点，并将该节点插入Entry链表的表头位置。</p>
<p><strong>删除</strong>key-value键值对：删除键值对，相比于“添加键值对”来说，简单很多。首先，还是根据key计算出哈希值，再计算出数组索引(即，该key-value在table中的索引)。然后，根据索引找出Entry(即，单向链表)。若节点key-value存在与链表Entry中，则删除链表中的节点即可。</p>
<h1 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h1><h2 id="继承和实现方式不同"><a href="#继承和实现方式不同" class="headerlink" title="继承和实现方式不同"></a>继承和实现方式不同</h2><p><code>HashMap</code> 继承于AbstractMap，实现了Map、Cloneable、java.io.Serializable接口。<br><code>Hashtable</code> 继承于Dictionary，实现了Map、Cloneable、java.io.Serializable接口。</p>
<h2 id="线程安全不同"><a href="#线程安全不同" class="headerlink" title="线程安全不同"></a>线程安全不同</h2><p><code>HashTable</code>是线程安全的，几乎所有函数都是同步的。<br><code>HashMap</code>不是线程安全的。可以使用<code>Collections.synchronizedMap</code>或者java.util.concurrent包里的<code>ConcurrentHashMap</code>类。</p>
<h2 id="null处理"><a href="#null处理" class="headerlink" title="null处理"></a>null处理</h2><p><code>HashMap</code>的key、value都可以为null。<br><code>HashTable</code>的key、value都不可以为null。当HashMap的key为null时，HashMap会将其固定的插入table[0]位置(即HashMap散列表的第一个位置)；而且table[0]处只会容纳一个key为null的值。</p>
<h2 id="遍历支持不同"><a href="#遍历支持不同" class="headerlink" title="遍历支持不同"></a>遍历支持不同</h2><p><code>HashMap</code>只支持Iterator(迭代器)遍历。<br><code>Hashtable</code>支持Iterator(迭代器)和Enumeration(枚举器)两种方式遍历。</p>
<p><code>Enumeration</code> 是JDK 1.0添加的接口，只有hasMoreElements(), nextElement() 两个API接口，不能通过Enumeration()对元素进行修改 。<br><code>Iterator</code> 是JDK 1.2才添加的接口，支持hasNext(), next(), remove() 三个API接口。HashMap也是JDK 1.2版本才添加的，所以用Iterator取代Enumeration，HashMap只支持Iterator遍历。</p>
<h2 id="Iterator迭代器遍历顺序不同"><a href="#Iterator迭代器遍历顺序不同" class="headerlink" title="Iterator迭代器遍历顺序不同"></a>Iterator迭代器遍历顺序不同</h2><p><code>HashMap</code>是“从前向后”的遍历数组；再对数组具体某一项对应的链表，从表头开始进行遍历。<br><code>Hashtable</code>是“从后往前”的遍历数组；再对数组具体某一项对应的链表，从表头开始进行遍历。</p>
<h2 id="初始容量不同"><a href="#初始容量不同" class="headerlink" title="初始容量不同"></a>初始容量不同</h2><p><code>HashMap</code>默认的容量大小是16<br><code>Hashtable</code>默认的容量大小是11</p>
<h2 id="扩容方式不同"><a href="#扩容方式不同" class="headerlink" title="扩容方式不同"></a>扩容方式不同</h2><p><code>HashMap</code>增加容量时，每次将容量变为“原始容量x2”。<br>扩容时，会将单链表拆分为高低两个链表（低链表还是保存在原索引，高链表保存在原索引+oldCap的位置）。</p>
<p><code>HashTable</code>增加容量时，每次将容量变为“原始容量x2 + 1”。<br>扩容时，会将每个元素遍历一遍重新计算hash值得到索引位置。</p>
<h2 id="hash算法不同"><a href="#hash算法不同" class="headerlink" title="hash算法不同"></a>hash算法不同</h2><p><code>HashMap</code> 使用自定义的哈希算法，<code>(key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>。</p>
<p><code>HashTable</code> 则是<code>(key.hashCode() &amp; 0x7FFFFFFF)</code>。</p>
<h2 id="部分API不同"><a href="#部分API不同" class="headerlink" title="部分API不同"></a>部分API不同</h2><p><code>HashMap</code>没有重写<code>toString()</code>方法。<br><code>HashTable</code>重写了<code>toString()</code>方法。</p>
<hr>
<p>感谢：<br><a href="http://wangkuiwu.github.io/2012/02/14/collection-14-mapsummary/" target="_blank" rel="external">http://wangkuiwu.github.io/2012/02/14/collection-14-mapsummary/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(14): HashTable源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-14-HashTable%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>HashTable</code>和<code>HashMap</code>一样都是实现了哈希表，存储的内容是key-value映射。<code>HashTable</code>采用<strong>拉链法</strong>处理Hash冲突。</p>
<ol>
<li><code>HashTable</code>是线程安全的。</li>
<li>key、value都不能为null。</li>
<li>不是有序的。</li>
<li>线程安全的。</li>
</ol>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 存放key-value的数组</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;</div><div class="line">   <span class="comment">// 表里保存的元素个数</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> count;</div><div class="line">   <span class="comment">// 阈值，用于扩容rehashed判断</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> threshold;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">float</span> loadFactor;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                           initialCapacity);</div><div class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load: "</span>+loadFactor);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</div><div class="line">        initialCapacity = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">    table = <span class="keyword">new</span> Entry&lt;?,?&gt;[initialCapacity];</div><div class="line">    threshold = (<span class="keyword">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(initialCapacity, <span class="number">0.75f</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 默认初始表的初始容量为11，装填因子为0.75</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);</div><div class="line">    putAll(t);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p><code>HashTable</code>中的每一个元素都是一个Entry，实际上table的每个桶里保存的都是一个单向链表，由Entry维护一个next引用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">    <span class="keyword">final</span> K key;</div><div class="line">    V value;</div><div class="line">    Entry&lt;K,V&gt; next;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Entry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.hash = hash;</div><div class="line">        <span class="keyword">this</span>.key =  key;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value,</div><div class="line">                              (next==<span class="keyword">null</span> ? <span class="keyword">null</span> : (Entry&lt;K,V&gt;) next.clone()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Map.Entry Ops</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line"></div><div class="line">        V oldValue = <span class="keyword">this</span>.value;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (key==<span class="keyword">null</span> ? e.getKey()==<span class="keyword">null</span> : key.equals(e.getKey())) &amp;&amp;</div><div class="line">           (value==<span class="keyword">null</span> ? e.getValue()==<span class="keyword">null</span> : value.equals(e.getValue()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hash ^ Objects.hashCode(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> key.toString()+<span class="string">"="</span>+value.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Entry&lt;?,?&gt; tab[] = table;</div><div class="line">    <span class="keyword">int</span> hash = key.hashCode();</div><div class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</div><div class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</div><div class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</div><div class="line">            <span class="keyword">return</span> (V)e.value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="comment">// Make sure the value is not null</span></div><div class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Makes sure the key is not already in the hashtable.</span></div><div class="line">    Entry&lt;?,?&gt; tab[] = table;</div><div class="line">    <span class="keyword">int</span> hash = key.hashCode();</div><div class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</div><div class="line">    <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</div><div class="line">        <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</div><div class="line">            V old = entry.value;</div><div class="line">            entry.value = value;</div><div class="line">            <span class="keyword">return</span> old;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    addEntry(hash, key, value, index);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line"></div><div class="line">    Entry&lt;?,?&gt; tab[] = table;</div><div class="line">    <span class="keyword">if</span> (count &gt;= threshold) &#123;</div><div class="line">        <span class="comment">// Rehash the table if the threshold is exceeded</span></div><div class="line">        rehash();</div><div class="line"></div><div class="line">        tab = table;</div><div class="line">        hash = key.hashCode();</div><div class="line">        index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Creates the new entry.</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</div><div class="line">    tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</div><div class="line">    count++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3><p>jdk 1.8中<code>HashMap</code>对扩容做了优化，将原链表分为高低链表进行迁移，始终保证table的大小是偶数2的幂次方。<br>而在此<code>HashTable</code>中可以看出扩容后，仍然需要重新计算每个元素的hash值。rehash方法会把table大小翻倍并加1，始终保证table的大小是奇数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> oldCapacity = table.length;</div><div class="line">    Entry&lt;?,?&gt;[] oldMap = table;</div><div class="line"></div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</div><div class="line">            <span class="comment">// Keep running with MAX_ARRAY_SIZE buckets</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        newCapacity = MAX_ARRAY_SIZE;</div><div class="line">    &#125;</div><div class="line">    Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> Entry&lt;?,?&gt;[newCapacity];</div><div class="line"></div><div class="line">    modCount++;</div><div class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</div><div class="line">    table = newMap;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</div><div class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="keyword">null</span> ; ) &#123;</div><div class="line">            Entry&lt;K,V&gt; e = old;</div><div class="line">            old = old.next;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</div><div class="line">            e.next = (Entry&lt;K,V&gt;)newMap[index];</div><div class="line">            newMap[index] = e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Entry&lt;?,?&gt; tab[] = table;</div><div class="line">    <span class="keyword">int</span> hash = key.hashCode();</div><div class="line">    <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</div><div class="line">    <span class="keyword">for</span>(Entry&lt;K,V&gt; prev = <span class="keyword">null</span> ; e != <span class="keyword">null</span> ; prev = e, e = e.next) &#123;</div><div class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</div><div class="line">            modCount++;</div><div class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</div><div class="line">                prev.next = e.next;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                tab[index] = e.next;</div><div class="line">            &#125;</div><div class="line">            count--;</div><div class="line">            V oldValue = e.value;</div><div class="line">            e.value = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="迭代和枚举"><a href="#迭代和枚举" class="headerlink" title="迭代和枚举"></a>迭代和枚举</h3><p><code>HashaTable</code>的内部类<code>Enumerator</code>实现了迭代器<code>Iterator</code>和枚举<code>Enumeration</code>两个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取枚举对象</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Enumeration&lt;T&gt; <span class="title">getEnumeration</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyEnumeration();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;&gt;(type, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取迭代器</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">Iterator&lt;T&gt; <span class="title">getIterator</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> Collections.emptyIterator();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;&gt;(type, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(13): fail-fast]]></title>
      <url>https://rogerfang.github.io/2016/12/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-13-fail-fast/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>fail-fast机制是java集合框架中的一种错误机制。当多个线程对同一个<strong>集合的结构</strong>进行操作时，可能会产生fail-fast，出现<code>java.util.ConcurrentModificationException</code>。</p>
<h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>fail-fast机制，是一种错误检测机制，只能被用来检测错误，因为JDK并不保证fail-fast机制一定发生。</p>
<ol>
<li>方法一：在多线程环境下，应该使用“java.util.concurrent”包下的类去取代“java.util”包下的类。</li>
<li>方法二：在遍历过程中，所有涉及改变modCount值得地方全部加上synchronized或直接使用Collections.synchronizedList（但是容器结构的更改操作造成的同步锁，可能会阻塞遍历操作，不推荐）。</li>
</ol>
<h1 id="ArrayList和CopyOnWriteArrayList"><a href="#ArrayList和CopyOnWriteArrayList" class="headerlink" title="ArrayList和CopyOnWriteArrayList"></a><code>ArrayList</code>和<code>CopyOnWriteArrayList</code></h1><p>这里采用<code>ArrayList</code>的fail-fast机制和<code>CopyOnWriteArrayList</code>来解决这个问题。</p>
<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList的Iterator会采用fail-fast机制抛出异常<code>ConcurrentModificationException</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// 容器的结构修改次数</span></div><div class="line">    <span class="comment">// 如果遍历时不相等，则抛出ConcurrentModificationException异常，产生fail-fast事件</span></div><div class="line">    <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><p><code>CopyOnWriteArrayList</code>的对容器结构的更改方法（add、remove、clear等，以add方法为例），都是对原底层结构array进行复制后，再在复制的数组上进行更改操作，这样就不会影响它的迭代器<code>COWIterator</code>中的array了。</p>
<h3 id="结构更改操作"><a href="#结构更改操作" class="headerlink" title="结构更改操作"></a>结构更改操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">    lock.lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Object[] elements = getArray();</div><div class="line">        <span class="keyword">int</span> len = elements.length;</div><div class="line">        <span class="comment">// 看这里</span></div><div class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</div><div class="line">        newElements[len] = e;</div><div class="line">        setArray(newElements);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p><code>CopyOnWriteArrayList</code>并不会进行fail-fast机制检测。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">COWIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/** Snapshot of the array */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] snapshot;</div><div class="line">    <span class="comment">/** Index of element to be returned by subsequent call to next.  */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cursor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">COWIterator</span><span class="params">(Object[] elements, <span class="keyword">int</span> initialCursor)</span> </span>&#123;</div><div class="line">        cursor = initialCursor;</div><div class="line">        snapshot = elements;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Not supported. Always throws UnsupportedOperationException.</div><div class="line">     * <span class="doctag">@throws</span> UnsupportedOperationException always; &#123;<span class="doctag">@code</span> remove&#125;</div><div class="line">     *         is not supported by this iterator.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Not supported. Always throws UnsupportedOperationException.</div><div class="line">     * <span class="doctag">@throws</span> UnsupportedOperationException always; &#123;<span class="doctag">@code</span> set&#125;</div><div class="line">     *         is not supported by this iterator.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Not supported. Always throws UnsupportedOperationException.</div><div class="line">     * <span class="doctag">@throws</span> UnsupportedOperationException always; &#123;<span class="doctag">@code</span> add&#125;</div><div class="line">     *         is not supported by this iterator.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(12): TreeSet源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-12-TreeSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">NavigableSet</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>TreeSet</code>是基于<code>TreeMap</code>实现的，它的作用是提供有序的Set集合，其中的元素支持两种排序方式：<strong>自然排序</strong>和<code>Comparator</code>方式。</p>
<p><code>TreeSet</code>为基本操作(add、remove和contains)提供受保证的复杂度$O(\log{N})$。是非线程安全的。</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>##　属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The backing map</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</div><div class="line">   <span class="comment">// Dummy value to associate with an Object in the backing Map</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure></p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * default修饰，不对外公开的</div><div class="line"> */</div><div class="line">TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</div><div class="line">    <span class="keyword">this</span>.m = m;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 默认底层实现使用TreeMap</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;E,Object&gt;());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; comparator)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="keyword">new</span> TreeMap&lt;&gt;(comparator));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>();</div><div class="line">    addAll(c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(s.comparator());</div><div class="line">    addAll(s);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回TreeSet的顺序排列的迭代器</div><div class="line"> * Returns an iterator over the elements in this set in ascending order.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> m.navigableKeySet().iterator();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回TreeSet的逆序排列的迭代器</div><div class="line"> * Returns an iterator over the elements in this set in descending order.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> m.descendingKeySet().iterator();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> m.containsKey(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> m.put(e, PRESENT)==<span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> m.remove(o)==PRESENT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(11): LinkedHashSet源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-11-LinkedHashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashSet</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>LinkedHashSet</code>继承自<code>HashSet</code>，<code>LinkedHashSet</code>调用父类<code>HashSet</code>的构造函数(default修饰)，让其底层实现为<code>LinkedHashMap</code>。</p>
<p><code>LinkedHashSet</code>的元素可以按照<strong>插入顺序</strong>来访问。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(10): HashSet源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-10-HashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Set</code>接口扩展自<code>Collection</code>接口，规定<code>Set</code>的实例不包含重复的元素。</p>
<ol>
<li><code>HashSet</code>是一个没有重复元素的集合。</li>
<li>不保证元素的顺序，允许使用null元素。</li>
<li>非线程安全的。</li>
</ol>
<p><code>HashSet</code>是基于<code>HashMap</code>来实现的，底层采用<code>HashMap</code>来保存元素。</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 底层使用HashMap来保存HashSet的元素</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</div><div class="line">   <span class="comment">// 由于Set只使用了HashMap的key，所以此处定义一个静态的常量Object类，来充当HashMap的vlaue</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure>
<p>这里的<code>PRESENT</code>使用<code>new Object()</code>来充当value，而不直接使用<code>null</code>，目的就是从根源上避免<code>NullPointerException</code>，代码中也不需要取校验value是否为空。</p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</div><div class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</div><div class="line">    addAll(c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 这个构造方法比较特殊，默认default修饰，不对外公开</div><div class="line"> * only used by LinkedHashSet</div><div class="line"> * 底层构造的是LinkedHashMap，dummy只是一个标示参数，无具体意义</div><div class="line"> */</div><div class="line">HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</div><div class="line">    map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>返回<code>HashMap</code>的键迭代器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> map.keySet().iterator();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> map.containsKey(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>当set不存在这个元素时添加成功返回true，否则返回false<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> map.remove(o)==PRESENT;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 浅拷贝</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        HashSet&lt;E&gt; newSet = (HashSet&lt;E&gt;) <span class="keyword">super</span>.clone();</div><div class="line">        newSet.map = (HashMap&lt;E, Object&gt;) map.clone();</div><div class="line">        <span class="keyword">return</span> newSet;</div><div class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://www.cnblogs.com/leesf456/p/5309809.html" target="_blank" rel="external">http://www.cnblogs.com/leesf456/p/5309809.html</a><br><a href="http://www.jianshu.com/p/c5f85e9c0098" target="_blank" rel="external">http://www.jianshu.com/p/c5f85e9c0098</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(9): IdentityHashMap源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-9-IdentityHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentityHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Cloneable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>IdentityHashMap</code>在平时并不常用，通过例子来简单感受下。</p>
<blockquote>
<p><code>IdentityHashMap</code>和<code>HashMap</code>没有任何关系，它俩使用的数据结构完全不同。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentityHashMapTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Map&lt;String, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        hashMap.put(<span class="keyword">new</span> String(<span class="string">"a"</span>), <span class="string">"aa"</span>);</div><div class="line">        hashMap.put(<span class="keyword">new</span> String(<span class="string">"a"</span>), <span class="string">"bb"</span>);</div><div class="line">        System.out.println(hashMap.size() + <span class="string">":"</span> + hashMap);</div><div class="line">        Map&lt;String, String&gt; identityHashMap = <span class="keyword">new</span> IdentityHashMap&lt;&gt;();</div><div class="line">        identityHashMap.put(<span class="keyword">new</span> String(<span class="string">"a"</span>), <span class="string">"aa"</span>);</div><div class="line">        identityHashMap.put(<span class="keyword">new</span> String(<span class="string">"a"</span>), <span class="string">"bb"</span>);</div><div class="line">        System.out.println(identityHashMap.size() + <span class="string">":"</span> + identityHashMap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1:&#123;a=bb&#125;</div><div class="line">2:&#123;a=aa, a=bb&#125;</div></pre></td></tr></table></figure></p>
<p>说明：IdentityHashMap只有在key是<strong>同一个引用</strong>时才会覆盖，而HashMap则不会。</p>
<blockquote>
<p><code>IdentityHashMap</code> using <strong>reference-equality</strong> in place of object-equality when comparing keys (and values)</p>
</blockquote>
<ul>
<li>reference-equality: <code>k1 == k2</code></li>
<li>object-equality: <code>k1==null ? k2==null : k1.equals(k2)</code></li>
</ul>
<ol>
<li><code>IdentityHashMap</code>的key和value都可以为null</li>
<li>无序的</li>
<li>非线程安全的</li>
</ol>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><code>IdentityHashMap</code>的数据结构很简单，底层就是一个Object数组，在逻辑上可以看成是一个环形的数组， 没有节点类型，数组的偶数位存放key，奇数位存放value。</p>
<blockquote>
<p>容量为16的哈希表实际申请数组大小为32，当元素的个数(11)大于数组大小(32)的三分之一时扩容。</p>
</blockquote>
<p>解决冲突的办法是开放定址法：也就是根据计算得到散列的位置索引，如果发现该位置上已有元素，则往后查找，直到找到空位置。当元素个数达到一定阈值时，Object数组会进行扩容。</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * The value 32 corresponds to the (specified) expected</div><div class="line">    * maximum size of 21, given a load factor of 2/3.</div><div class="line">    */</div><div class="line"><span class="comment">// 默认容量，大小为2的幂次方</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">32</span>;</div><div class="line">   <span class="comment">// 最小容量</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINIMUM_CAPACITY = <span class="number">4</span>;</div><div class="line">   <span class="comment">// 最大容量</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">29</span>;</div><div class="line">   <span class="comment">// 实际存储元素的数组</span></div><div class="line">   <span class="keyword">transient</span> Object[] table; <span class="comment">// non-private to simplify nested class access</span></div><div class="line">   <span class="comment">// 元素的数量</span></div><div class="line">   <span class="keyword">int</span> size;</div><div class="line">   <span class="comment">// 表结构修改的次数</span></div><div class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line">   <span class="comment">// null key所对应的的值(Use NULL_KEY for key if it is null.)</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> Object NULL_KEY = <span class="keyword">new</span> Object();</div></pre></td></tr></table></figure>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Constructs a new, empty identity hash map with a default expected</div><div class="line"> * maximum size (21).</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">IdentityHashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    init(DEFAULT_CAPACITY);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">IdentityHashMap</span><span class="params">(<span class="keyword">int</span> expectedMaxSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (expectedMaxSize &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"expectedMaxSize is negative: "</span></div><div class="line">                                           + expectedMaxSize);</div><div class="line">    init(capacity(expectedMaxSize));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">IdentityHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">    <span class="comment">// Allow for a bit of growth</span></div><div class="line">    <span class="keyword">this</span>((<span class="keyword">int</span>) ((<span class="number">1</span> + m.size()) * <span class="number">1.1</span>));</div><div class="line">    putAll(m);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="capacity"><a href="#capacity" class="headerlink" title="capacity"></a>capacity</h3><p>此函数返回的是最小的且大于expectedMaxSize的2次幂数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">capacity</span><span class="params">(<span class="keyword">int</span> expectedMaxSize)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert expectedMaxSize &gt;= 0;</span></div><div class="line">    <span class="keyword">return</span></div><div class="line">        (expectedMaxSize &gt; MAXIMUM_CAPACITY / <span class="number">3</span>) ? MAXIMUM_CAPACITY :</div><div class="line">        (expectedMaxSize &lt;= <span class="number">2</span> * MINIMUM_CAPACITY / <span class="number">3</span>) ? MINIMUM_CAPACITY :</div><div class="line">        Integer.highestOneBit(expectedMaxSize + (expectedMaxSize &lt;&lt; <span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>由于length总是2的幂次方，所以<code>&amp; (length - 1)</code>相当于取模运算。<br>这个hash方法得到的值始终都是偶数，以保证key始终会存放在偶数位置，而不会插入到value的位置上，value都是放在奇数位置上的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns index for Object x.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object x, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h = System.identityHashCode(x);</div><div class="line">    <span class="comment">// Multiply by -127, and left-shift to use least bit as part of hash</span></div><div class="line">    <span class="keyword">return</span> ((h &lt;&lt; <span class="number">1</span>) - (h &lt;&lt; <span class="number">8</span>)) &amp; (length - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">	<span class="comment">// 保证null的key会转化为Object(NULL_KEY)</span></div><div class="line">    Object k = maskNull(key);</div><div class="line">    Object[] tab = table;</div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line">    <span class="keyword">int</span> i = hash(k, len);</div><div class="line">    <span class="comment">// 遍历table，若冲突则往后寻找空闲区域</span></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        Object item = tab[i];</div><div class="line">        <span class="comment">// 判断是否相等</span></div><div class="line">        <span class="keyword">if</span> (item == k)</div><div class="line">        	<span class="comment">// 相等，即完全相等的两个对象</span></div><div class="line">            <span class="keyword">return</span> (V) tab[i + <span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 取下一个Key索引</span></div><div class="line">        i = nextKeyIndex(i, len);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="nextKeyIndex"><a href="#nextKeyIndex" class="headerlink" title="nextKeyIndex"></a>nextKeyIndex</h3><p>下一个Key的索引，用于发生冲突时，取下一个位置进行判断。<br>nextKeyIndex始终加2，如果key在当前位置已经存在值，那么继续寻找下一个位置，这个时候就会在此位置的基础上加2，如果加1就会和value冲突了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextKeyIndex</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (i + <span class="number">2</span> &lt; len ? i + <span class="number">2</span> : <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">	<span class="comment">// 保证null的key会转化为Object(NULL_KEY)</span></div><div class="line">    <span class="keyword">final</span> Object k = maskNull(key);</div><div class="line"></div><div class="line">    retryAfterResize: <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="keyword">final</span> Object[] tab = table;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> len = tab.length;</div><div class="line">        <span class="keyword">int</span> i = hash(k, len);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Object item; (item = tab[i]) != <span class="keyword">null</span>;</div><div class="line">             i = nextKeyIndex(i, len)) &#123;</div><div class="line">            <span class="keyword">if</span> (item == k) &#123;</div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                    V oldValue = (V) tab[i + <span class="number">1</span>];</div><div class="line">                tab[i + <span class="number">1</span>] = value;</div><div class="line">                <span class="keyword">return</span> oldValue;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> s = size + <span class="number">1</span>;</div><div class="line">        <span class="comment">// Use optimized form of 3 * s.</span></div><div class="line">        <span class="comment">// Next capacity is len, 2 * current capacity.</span></div><div class="line">        <span class="comment">// 如果3*size大于length，则会进行扩容</span></div><div class="line">        <span class="keyword">if</span> (s + (s &lt;&lt; <span class="number">1</span>) &gt; len &amp;&amp; resize(len))</div><div class="line">        	<span class="comment">// 扩容后重新计算元素的位置索引，寻找合适的位置进行存放</span></div><div class="line">            <span class="keyword">continue</span> retryAfterResize;</div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        tab[i] = k;</div><div class="line">        tab[i + <span class="number">1</span>] = value;</div><div class="line">        size = s;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert (newCapacity &amp; -newCapacity) == newCapacity; // power of 2</span></div><div class="line">    <span class="keyword">int</span> newLength = newCapacity * <span class="number">2</span>;</div><div class="line"></div><div class="line">    Object[] oldTable = table;</div><div class="line">    <span class="keyword">int</span> oldLength = oldTable.length;</div><div class="line">    <span class="comment">// 无法继续扩容</span></div><div class="line">    <span class="keyword">if</span> (oldLength == <span class="number">2</span> * MAXIMUM_CAPACITY) &#123; <span class="comment">// can't expand any further</span></div><div class="line">        <span class="keyword">if</span> (size == MAXIMUM_CAPACITY - <span class="number">1</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Capacity exhausted."</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 旧表长度大于新表长度，不进行扩容</span></div><div class="line">    <span class="keyword">if</span> (oldLength &gt;= newLength)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    Object[] newTable = <span class="keyword">new</span> Object[newLength];</div><div class="line"></div><div class="line">	<span class="comment">// 生产新表，将旧表元素重新hash到新表中</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldLength; j += <span class="number">2</span>) &#123;</div><div class="line">        Object key = oldTable[j];</div><div class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span>) &#123;</div><div class="line">            Object value = oldTable[j+<span class="number">1</span>];</div><div class="line">            oldTable[j] = <span class="keyword">null</span>;</div><div class="line">            oldTable[j+<span class="number">1</span>] = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">int</span> i = hash(key, newLength);</div><div class="line">            <span class="keyword">while</span> (newTable[i] != <span class="keyword">null</span>)</div><div class="line">                i = nextKeyIndex(i, newLength);</div><div class="line">            newTable[i] = key;</div><div class="line">            newTable[i + <span class="number">1</span>] = value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    table = newTable;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Object k = maskNull(key);</div><div class="line">    Object[] tab = table;</div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line">    <span class="keyword">int</span> i = hash(k, len);</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        Object item = tab[i];</div><div class="line">        <span class="comment">// 找到key相等的项</span></div><div class="line">        <span class="keyword">if</span> (item == k) &#123;</div><div class="line">            modCount++;</div><div class="line">            size--;</div><div class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                V oldValue = (V) tab[i + <span class="number">1</span>];</div><div class="line">            tab[i + <span class="number">1</span>] = <span class="keyword">null</span>;</div><div class="line">            tab[i] = <span class="keyword">null</span>;</div><div class="line">            <span class="comment">// 删除后需要进行后续处理，把之前由于冲突往后挪的元素移到前面来</span></div><div class="line">            closeDeletion(i);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 遍历到项为null时，结束遍历</span></div><div class="line">        <span class="keyword">if</span> (item == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 下一项</span></div><div class="line">        i = nextKeyIndex(i, len);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">closeDeletion</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    <span class="comment">// Adapted from Knuth Section 6.4 Algorithm R</span></div><div class="line">    Object[] tab = table;</div><div class="line">    <span class="keyword">int</span> len = tab.length;</div><div class="line"></div><div class="line">    <span class="comment">// Look for items to swap into newly vacated slot</span></div><div class="line">    <span class="comment">// starting at index immediately following deletion,</span></div><div class="line">    <span class="comment">// and continuing until a null slot is seen, indicating</span></div><div class="line">    <span class="comment">// the end of a run of possibly-colliding keys.</span></div><div class="line">    <span class="comment">// 把该元素后面符合移动规定的元素往前面移动</span></div><div class="line">    Object item;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nextKeyIndex(d, len); (item = tab[i]) != <span class="keyword">null</span>;</div><div class="line">         i = nextKeyIndex(i, len) ) &#123;</div><div class="line">        <span class="comment">// The following test triggers if the item at slot i (which</span></div><div class="line">        <span class="comment">// hashes to be at slot r) should take the spot vacated by d.</span></div><div class="line">        <span class="comment">// If so, we swap it in, and then continue with d now at the</span></div><div class="line">        <span class="comment">// newly vacated i.  This process will terminate when we hit</span></div><div class="line">        <span class="comment">// the null slot at the end of this run.</span></div><div class="line">        <span class="comment">// The test is messy because we are using a circular table.</span></div><div class="line">        <span class="keyword">int</span> r = hash(item, len);</div><div class="line">        <span class="keyword">if</span> ((i &lt; r &amp;&amp; (r &lt;= d || d &lt;= i)) || (r &lt;= d &amp;&amp; d &lt;= i)) &#123;</div><div class="line">            tab[d] = item;</div><div class="line">            tab[d + <span class="number">1</span>] = tab[i + <span class="number">1</span>];</div><div class="line">            tab[i] = <span class="keyword">null</span>;</div><div class="line">            tab[i + <span class="number">1</span>] = <span class="keyword">null</span>;</div><div class="line">            d = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://www.cnblogs.com/leesf456/p/5253094.html" target="_blank" rel="external">http://www.cnblogs.com/leesf456/p/5253094.html</a><br><a href="http://www.itdadao.com/articles/c15a645336p0.html" target="_blank" rel="external">http://www.itdadao.com/articles/c15a645336p0.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(8): TreeMap源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-8-TreeMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">NavigableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>TreeMap</code>是一种基于<strong>红黑树</strong>实现的key-value结构，非线程安全的。<br>如果没有使用自定义的Comparator对Key为null进行相应的处理，则不支持Key为null。</p>
<blockquote>
<p>关于红黑树的介绍可以参见：<a href="https://rogerfang.github.io/2016/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-9-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-%E7%BA%A2%E9%BB%91%E6%A0%91/">https://rogerfang.github.io/2016/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-9-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-%E7%BA%A2%E9%BB%91%E6%A0%91/</a></p>
</blockquote>
<p>在使用集合视图在<code>HashMap</code>中迭代时，是不能保证迭代顺序的；<code>LinkedHashMap</code>使用了双向链表，保证按照插入顺序或访问顺序进行迭代。<code>TreeMap</code>支持<strong>按键</strong>进行排序，可以由传入的比较器（Comparator）来控制（当然，自己也可以实现Comparator利用value进行排序）。</p>
<blockquote>
<p><code>SortedMap</code>对排序进行了相关说明：A Map that further provides a total ordering on its <strong>keys</strong>.</p>
</blockquote>
<h2 id="SortedMap"><a href="#SortedMap" class="headerlink" title="SortedMap"></a>SortedMap</h2><p><code>SortedMap</code>接口扩展自<code>Map</code>接口，对该接口的实现要保证所有的Key是完全有序的，这个顺序一般指key的自然序（实现<code>Comparable</code>接口）或在创建<code>SortedMap</code>时指定一个比较器（<code>Comparator</code>），当使用集合的视图（Collection View，由entrySet、keySet和values方法提供）来迭代时就可以按序访问其中的元素。</p>
<blockquote>
<p>插入<code>SortedMap</code>中的所有Key的类都必须实现<code>Comparable</code>接口（或者可以作为指定的<code>Comparator</code>的参数）。</p>
</blockquote>
<p><code>SortedMap</code>中的Key的顺序必须和equals保持一致，即<code>k1.compareTo(k2) == 0</code>(or <code>comparator.compare(k1, k2) == 0</code>)和<code>k1.equals(k2)</code>要有相同的布尔值。</p>
<blockquote>
<p>这是因为 Map 接口的定义中，比较 Key 是通过 equals 方法，而在 SortedMap 中比较 Key 则是通过 compareTo (or compare) 方法。如果不一致的，就破坏了 Map 接口的约定。</p>
</blockquote>
<h2 id="NavigableMap"><a href="#NavigableMap" class="headerlink" title="NavigableMap"></a>NavigableMap</h2><p><code>NavigableMap</code>时JDK 1.6之后新增的接口，扩展了<code>SortedMap</code>接口，提供了一些导航方法来返回最接近搜索目标的匹配结果。</p>
<ul>
<li><code>lowerEntry(K key)</code> (or <code>lowerKey(K key)</code>)，<strong>小于</strong>给定 Key 的 Entry (or Key)</li>
<li><code>floorEntry(K key)</code> (or <code>floorKey(K key)</code>)，<strong>小于等于</strong>给定 Key 的 Entry (or Key)</li>
<li><code>higherEntry(K key)</code> (or <code>higherKey(K key)</code>)，<strong>大于</strong>给定 Key 的 Entry (or Key)</li>
<li><code>ceilingEntry(K key)</code> (or <code>ceilingKey(K key)</code>)，<strong>大于等于</strong>给定 Key 的 Entry (or Key)</li>
</ul>
<p><code>NavigableMap</code> 可以按照 Key 的升序或降序进行访问和遍历。 <code>descendingMap()</code> 和 <code>descendingKeySet()</code> 则会获取和原来的顺序相反的集合，集合中的元素则是同样的引用，在该视图上的修改会影响到原始的数据。</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 比较器，没有指定的默认使用Key的自然序</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> K&gt; comparator;</div><div class="line"><span class="comment">// 红黑树的根节点</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</div><div class="line"><span class="comment">// 树种节点的数量</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line"><span class="comment">// 结构化修改的次数</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> EntrySet entrySet;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> KeySet&lt;K&gt; navigableKeySet;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;K,V&gt; descendingMap;</div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><h2 id="红黑树节点"><a href="#红黑树节点" class="headerlink" title="红黑树节点"></a>红黑树节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    K key;</div><div class="line">    V value;</div><div class="line">    Entry&lt;K,V&gt; left;</div><div class="line">    Entry&lt;K,V&gt; right;</div><div class="line">    Entry&lt;K,V&gt; parent;</div><div class="line">    <span class="keyword">boolean</span> color = BLACK;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Make a new cell with given key, value, and parent, and with</div><div class="line">     * &#123;<span class="doctag">@code</span> null&#125; child links, and BLACK color.</div><div class="line">     */</div><div class="line">    Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.parent = parent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the key.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> the key</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> key;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value associated with the key.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> the value associated with the key</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Replaces the value currently associated with the key with the given</div><div class="line">     * value.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> the value associated with the key before this method was</div><div class="line">     *         called</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">        V oldValue = <span class="keyword">this</span>.value;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> valEquals(key,e.getKey()) &amp;&amp; valEquals(value,e.getValue());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 哈希值的计算，Key和Value的哈希值进行位异或运算</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> keyHash = (key==<span class="keyword">null</span> ? <span class="number">0</span> : key.hashCode());</div><div class="line">        <span class="keyword">int</span> valueHash = (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());</div><div class="line">        <span class="keyword">return</span> keyHash ^ valueHash;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> key + <span class="string">"="</span> + value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="put添加及更新"><a href="#put添加及更新" class="headerlink" title="put添加及更新"></a>put添加及更新</h3><p>为了维持红黑树的有序，添加及更新的代价较高，复杂度位$O(\log{N})$。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; t = root;</div><div class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</div><div class="line">        compare(key, key); <span class="comment">// type (and possibly null) check</span></div><div class="line"></div><div class="line">        root = <span class="keyword">new</span> Entry&lt;&gt;(key, value, <span class="keyword">null</span>);</div><div class="line">        size = <span class="number">1</span>;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> cmp;</div><div class="line">    Entry&lt;K,V&gt; parent;</div><div class="line">    <span class="comment">// split comparator and comparable paths</span></div><div class="line">    Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;</div><div class="line">    <span class="comment">// 比较器，使用定制的排序方法</span></div><div class="line">    <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            parent = t;</div><div class="line">            cmp = cpr.compare(key, t.key);</div><div class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">                t = t.left;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</div><div class="line">                t = t.right;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> t.setValue(value);</div><div class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 比较器为空，Key必须实现Comparable接口</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">            Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            parent = t;</div><div class="line">            cmp = k.compareTo(t.key);</div><div class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">                t = t.left;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</div><div class="line">                t = t.right;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            	<span class="comment">// Key存在，更新Value</span></div><div class="line">                <span class="keyword">return</span> t.setValue(value);</div><div class="line">        &#125; <span class="keyword">while</span> (t != <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Key不存在，创建新节点，插入二叉树</span></div><div class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;&gt;(key, value, parent);</div><div class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">        parent.left = e;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        parent.right = e;</div><div class="line">	<span class="comment">// 插入后修复红黑树</span></div><div class="line">    fixAfterInsertion(e);</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>红黑树的删除较为复杂<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">	<span class="comment">// 先查找该节点</span></div><div class="line">    Entry&lt;K,V&gt; p = getEntry(key);</div><div class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    V oldValue = p.value;</div><div class="line">    <span class="comment">// 删除该节点</span></div><div class="line">    deleteEntry(p);</div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Delete node p, and then rebalance the tree.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteEntry</span><span class="params">(Entry&lt;K,V&gt; p)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    size--;</div><div class="line"></div><div class="line">    <span class="comment">// If strictly internal, copy successor's element to p and then make p</span></div><div class="line">    <span class="comment">// point to successor.</span></div><div class="line">    <span class="comment">// 被删除节点的左右子树都不为空</span></div><div class="line">    <span class="keyword">if</span> (p.left != <span class="keyword">null</span> &amp;&amp; p.right != <span class="keyword">null</span>) &#123;</div><div class="line">    	<span class="comment">// 用后继节点代替当前节点</span></div><div class="line">        Entry&lt;K,V&gt; s = successor(p);</div><div class="line">        p.key = s.key;</div><div class="line">        p.value = s.value;</div><div class="line">        p = s;</div><div class="line">    &#125; <span class="comment">// p has 2 children</span></div><div class="line"></div><div class="line">    <span class="comment">// Start fixup at replacement node, if it exists.</span></div><div class="line">    <span class="comment">// 左子节点存在，则replacement为左子节点，否则为右子节点</span></div><div class="line">    Entry&lt;K,V&gt; replacement = (p.left != <span class="keyword">null</span> ? p.left : p.right);</div><div class="line"></div><div class="line">	<span class="comment">// 至少有一个子节点存在</span></div><div class="line">    <span class="keyword">if</span> (replacement != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// Link replacement to parent</span></div><div class="line">        replacement.parent = p.parent;</div><div class="line">        <span class="comment">// p是根节点</span></div><div class="line">        <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>)</div><div class="line">            root = replacement;</div><div class="line">        <span class="comment">// p是父节点的左子节点</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.left)</div><div class="line">            p.parent.left  = replacement;</div><div class="line">        <span class="comment">// p是父节点的右子节点</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            p.parent.right = replacement;</div><div class="line"></div><div class="line">        <span class="comment">// Null out links so they are OK to use by fixAfterDeletion.</span></div><div class="line">        p.left = p.right = p.parent = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Fix replacement</span></div><div class="line">        <span class="keyword">if</span> (p.color == BLACK)</div><div class="line">            fixAfterDeletion(replacement);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.parent == <span class="keyword">null</span>) &#123; <span class="comment">// return if we are the only node.</span></div><div class="line">    	<span class="comment">// 没有父节点，则该节点是树中的唯一节点</span></div><div class="line">        root = <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//  No children. Use self as phantom replacement and unlink.</span></div><div class="line">    	<span class="comment">// 没有子节点</span></div><div class="line">        <span class="keyword">if</span> (p.color == BLACK)</div><div class="line">            fixAfterDeletion(p);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (p.parent != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (p == p.parent.left)</div><div class="line">                p.parent.left = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.right)</div><div class="line">                p.parent.right = <span class="keyword">null</span>;</div><div class="line">            p.parent = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>红黑树的查找复杂度为$O(\log{N})$。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; p = getEntry(key);</div><div class="line">    <span class="keyword">return</span> (p==<span class="keyword">null</span> ? <span class="keyword">null</span> : p.value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="comment">// Offload comparator-based version for sake of performance</span></div><div class="line">    <span class="comment">// 使用定制的比较器</span></div><div class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> getEntryUsingComparator(key);</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        Comparable&lt;? <span class="keyword">super</span> K&gt; k = (Comparable&lt;? <span class="keyword">super</span> K&gt;) key;</div><div class="line">    Entry&lt;K,V&gt; p = root;</div><div class="line">    <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">int</span> cmp = k.compareTo(p.key);</div><div class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">            p = p.left;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</div><div class="line">            p = p.right;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntryUsingComparator</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        K k = (K) key;</div><div class="line">    Comparator&lt;? <span class="keyword">super</span> K&gt; cpr = comparator;</div><div class="line">    <span class="keyword">if</span> (cpr != <span class="keyword">null</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; p = root;</div><div class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> cmp = cpr.compare(k, p.key);</div><div class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</div><div class="line">                p = p.left;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</div><div class="line">                p = p.right;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span> p;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = getFirstEntry(); e != <span class="keyword">null</span>; e = successor(e))</div><div class="line">        <span class="keyword">if</span> (valEquals(value, e.value))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * TreeMap中所有迭代器的基础</div><div class="line"> */</div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; next;</div><div class="line">    Entry&lt;K,V&gt; lastReturned;</div><div class="line">    <span class="keyword">int</span> expectedModCount;</div><div class="line"></div><div class="line">    PrivateEntryIterator(Entry&lt;K,V&gt; first) &#123;</div><div class="line">        expectedModCount = modCount;</div><div class="line">        lastReturned = <span class="keyword">null</span>;</div><div class="line">        next = first;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;</div><div class="line">        Entry&lt;K,V&gt; e = next;</div><div class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        <span class="comment">// 后继节点</span></div><div class="line">        next = successor(e);</div><div class="line">        lastReturned = e;</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">prevEntry</span><span class="params">()</span> </span>&#123;</div><div class="line">        Entry&lt;K,V&gt; e = next;</div><div class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        <span class="comment">// 前驱节点</span></div><div class="line">        next = predecessor(e);</div><div class="line">        lastReturned = e;</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        <span class="comment">// deleted entries are replaced by their successors</span></div><div class="line">        <span class="keyword">if</span> (lastReturned.left != <span class="keyword">null</span> &amp;&amp; lastReturned.right != <span class="keyword">null</span>)</div><div class="line">            next = lastReturned;</div><div class="line">        deleteEntry(lastReturned);</div><div class="line">        expectedModCount = modCount;</div><div class="line">        lastReturned = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</div><div class="line">    EntryIterator(Entry&lt;K,V&gt; first) &#123;</div><div class="line">        <span class="keyword">super</span>(first);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextEntry();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    ValueIterator(Entry&lt;K,V&gt; first) &#123;</div><div class="line">        <span class="keyword">super</span>(first);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextEntry().value;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</div><div class="line">    KeyIterator(Entry&lt;K,V&gt; first) &#123;</div><div class="line">        <span class="keyword">super</span>(first);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextEntry().key;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingKeyIterator</span> <span class="keyword">extends</span> <span class="title">PrivateEntryIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</div><div class="line">    DescendingKeyIterator(Entry&lt;K,V&gt; first) &#123;</div><div class="line">        <span class="keyword">super</span>(first);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> prevEntry().key;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        deleteEntry(lastReturned);</div><div class="line">        lastReturned = <span class="keyword">null</span>;</div><div class="line">        expectedModCount = modCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="前驱和后继"><a href="#前驱和后继" class="headerlink" title="前驱和后继"></a>前驱和后继</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 后继节点</div><div class="line"> * Returns the successor of the specified Entry, or null if no such.</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> &lt;K,V&gt; TreeMap.<span class="function">Entry&lt;K,V&gt; <span class="title">successor</span><span class="params">(Entry&lt;K,V&gt; t)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t.right != <span class="keyword">null</span>) &#123;</div><div class="line">    	<span class="comment">// 右子树存在，则取右子树的最小节点</span></div><div class="line">        Entry&lt;K,V&gt; p = t.right;</div><div class="line">        <span class="keyword">while</span> (p.left != <span class="keyword">null</span>)</div><div class="line">            p = p.left;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">// 右子树不存在</span></div><div class="line">        <span class="comment">// 若父节点为null，则该节点是最大节点，无后继，返回null</span></div><div class="line">        <span class="comment">// 若当前节点是父节点的左子节点，直接返回父节点</span></div><div class="line">        <span class="comment">// 若当前节点是父节点的右子节点，则当前节点是以其父节点为根的子树的最大节点</span></div><div class="line">        Entry&lt;K,V&gt; p = t.parent; <span class="comment">//父节点</span></div><div class="line">        Entry&lt;K,V&gt; ch = t; <span class="comment">//当前节点</span></div><div class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; ch == p.right) &#123;</div><div class="line">            ch = p;</div><div class="line">            p = p.parent;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 前驱节点</div><div class="line"> * Returns the predecessor of the specified Entry, or null if no such.</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> &lt;K,V&gt; <span class="function">Entry&lt;K,V&gt; <span class="title">predecessor</span><span class="params">(Entry&lt;K,V&gt; t)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (t == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="keyword">null</span>) &#123;</div><div class="line">        Entry&lt;K,V&gt; p = t.left;</div><div class="line">        <span class="keyword">while</span> (p.right != <span class="keyword">null</span>)</div><div class="line">            p = p.right;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Entry&lt;K,V&gt; p = t.parent;</div><div class="line">        Entry&lt;K,V&gt; ch = t;</div><div class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; ch == p.left) &#123;</div><div class="line">            ch = p;</div><div class="line">            p = p.parent;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://blog.jrwang.me/2016/java-collections-treemap/" target="_blank" rel="external">http://blog.jrwang.me/2016/java-collections-treemap/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(7): LinkedHashMap源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-7-LinkedHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>LinkedHashMap是HashMap的子类，也是对Map接口的一种基于链表和哈希表的实现，不过扩展了HashMap增加了双向链表的实现。</p>
<blockquote>
<p>相较于HashMap的迭代器中混乱的访问顺序，LinkedHashMap可以提供可以预测的迭代访问，即按照<strong>插入顺序</strong>(insertion-order)或<strong>访问序</strong>(access-order)来对哈希表中的元素进行迭代。</p>
</blockquote>
<ul>
<li>插入序(insertion-order)：就是Entry被添加到Map中的顺序。</li>
<li>访问序(access-order)：是对所有Entry按照最近访问(least-recently)到最远访问(most-recently)进行排序，读写都会影响到访问顺序，但是对迭代器(<code>entrySet()</code>、<code>keySet()</code>、<code>values()</code>)的访问不会影响到访问顺序。访问顺序使得可以通过LinkedHashMap来实现一个LRU(least-recently-used)Cache。</li>
</ul>
<p>LinkedHashMap 继承自 HashMap，并在其基本结构上增加了双向链表的实现，因而 LinkedHashMap 在内存占用上要比 HashMap 高出许多。<br>LinkedHashMap 仍然沿用了 HashMap 中基于桶数组、桶内单链表和红黑树结构的哈希表，在哈希计算、定位、扩容等方面都和 HashMAp 是一致的。LinkedHashMap 同样支持为 null 的键和值。</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The head (eldest) of the doubly linked list.</div><div class="line"> */</div><div class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The tail (youngest) of the doubly linked list.</div><div class="line"> */</div><div class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 迭代顺序，true使用最近被访问的顺序，false为插入顺序</div><div class="line"> * The iteration ordering method for this linked hash map:</div><div class="line"> * true for access-order,</div><div class="line"> * false for insertion-order.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@serial</span></div><div class="line"> */</div><div class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>LinkedHashMap的构造函数总是在第一行调用父类构造函数，accessOrder默认为false（即默认按照插入顺序访问）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</div><div class="line">    accessOrder = <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(initialCapacity);</div><div class="line">    accessOrder = <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    accessOrder = <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    accessOrder = <span class="keyword">false</span>;</div><div class="line">    putMapEntries(m, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></div><div class="line">                     <span class="keyword">float</span> loadFactor,</div><div class="line">                     <span class="keyword">boolean</span> accessOrder) &#123;</div><div class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</div><div class="line">    <span class="keyword">this</span>.accessOrder = accessOrder;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p><code>LinkedHashMap.Entry</code>继承自<code>HashMap.Node</code>，而<code>HashMap.TreeNode</code>又继承了<code>LinkedHashMap.Entry</code>。<br>LinkedHashMap只会对双向链表的关系进行管理，单向链表的关系仍由其父类进行管理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">	<span class="comment">// 仍保留父类HashMap的节点Node中存在的next引用，可以将每个桶的元素都当作一个单链表来看待</span></div><div class="line"></div><div class="line">	<span class="comment">// 实现双向链表，增加了before和after</span></div><div class="line">    Entry&lt;K,V&gt; before, after;</div><div class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">super</span>(hash, key, value, next);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>重写了父类HashMap的newNode和newTreeNode方法，并将创建的新节点插入到双链表末尾。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> </span>&#123;</div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class="line">        <span class="keyword">new</span> LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);</div><div class="line">    linkNodeLast(p);</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">TreeNode&lt;K,V&gt; <span class="title">newTreeNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">    TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(hash, key, value, next);</div><div class="line">    linkNodeLast(p);</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="链接变化"><a href="#链接变化" class="headerlink" title="链接变化"></a>链接变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// link at the end of list</span></div><div class="line"><span class="comment">// 将新节点p链接到双向链表的末尾</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkNodeLast</span><span class="params">(LinkedHashMap.Entry&lt;K,V&gt; p)</span> </span>&#123;</div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; last = tail;</div><div class="line">    tail = p;</div><div class="line">    <span class="keyword">if</span> (last == <span class="keyword">null</span>)</div><div class="line">    	<span class="comment">// 为空，则为头节点</span></div><div class="line">        head = p;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">// 修改尾节点</span></div><div class="line">        p.before = last;</div><div class="line">        last.after = p;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// apply src's links to dst</span></div><div class="line"><span class="comment">// 用dst替换src在双向链表中的位置</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transferLinks</span><span class="params">(LinkedHashMap.Entry&lt;K,V&gt; src,</span></span></div><div class="line">                           LinkedHashMap.Entry&lt;K,V&gt; dst) &#123;</div><div class="line">	<span class="comment">// 修改dst的前驱和后继</span></div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; b = dst.before = src.before;</div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; a = dst.after = src.after;</div><div class="line">    <span class="comment">// 将双向链表中原来指向src的链接改为指向dst</span></div><div class="line">    <span class="keyword">if</span> (b == <span class="keyword">null</span>)</div><div class="line">        head = dst;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        b.after = dst;</div><div class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</div><div class="line">        tail = dst;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        a.before = dst;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="节点变化"><a href="#节点变化" class="headerlink" title="节点变化"></a>节点变化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将节点由TreeNode转换为普通节点Node</div><div class="line"> */</div><div class="line"><span class="function">Node&lt;K,V&gt; <span class="title">replacementNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; q = (LinkedHashMap.Entry&lt;K,V&gt;)p;</div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; t =</div><div class="line">        <span class="keyword">new</span> LinkedHashMap.Entry&lt;K,V&gt;(q.hash, q.key, q.value, next);</div><div class="line">    transferLinks(q, t);</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 将节点由普通节点转换为TreeNode</div><div class="line"> */</div><div class="line"><span class="function">TreeNode&lt;K,V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; q = (LinkedHashMap.Entry&lt;K,V&gt;)p;</div><div class="line">    TreeNode&lt;K,V&gt; t = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(q.hash, q.key, q.value, next);</div><div class="line">    transferLinks(q, t);</div><div class="line">    <span class="keyword">return</span> t;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="维护插入序和访问序"><a href="#维护插入序和访问序" class="headerlink" title="维护插入序和访问序"></a>维护插入序和访问序</h3><p>在新建节点的时候，都是将新建节点链接到双向链表的末尾。从双向链表的尾部向头部遍历就可以保证插入顺序了。</p>
<p>在插入节点、删除节点和访问节点后会调用相应的回调函数（在HashMap中是空实现），LinkedHashMap通过实现这些回调函数实现了访问顺序的维护。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 插入节点的回调函数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></div><div class="line">	<span class="comment">// first头元素</span></div><div class="line">    <span class="comment">// 插入序：代表最先插入的元素</span></div><div class="line">    <span class="comment">// 访问序：代表最远被访问的元素</span></div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</div><div class="line">    <span class="comment">// removeEldestEntry始终返回false，即不删除最老的元素</span></div><div class="line">    <span class="comment">// 如果需要一个容量固定的cache，可调整removeEldestEntry的实现</span></div><div class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</div><div class="line">    	<span class="comment">// evict为true，表示非构造方法中调用</span></div><div class="line">        K key = first.key;</div><div class="line">        removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 移除节点的回调函数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// unlink</span></div><div class="line">	<span class="comment">// 移除节点，调整链表中的链接关系</span></div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class="line">        (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</div><div class="line">    p.before = p.after = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (b == <span class="keyword">null</span>)</div><div class="line">        head = a;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        b.after = a;</div><div class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</div><div class="line">        tail = b;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        a.before = b;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 访问节点的回调函数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</div><div class="line">    <span class="comment">// 如果是访问序，且当前节点不是尾节点，则将该节点设为尾节点</span></div><div class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</div><div class="line">    	<span class="comment">// p为当前节点</span></div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</div><div class="line">        p.after = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// p是头节点</span></div><div class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</div><div class="line">            head = a;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            b.after = a;</div><div class="line">        <span class="keyword">if</span> (a != <span class="keyword">null</span>)</div><div class="line">            a.before = b;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            last = b;</div><div class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</div><div class="line">            head = p;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            p.before = last;</div><div class="line">            last.after = p;</div><div class="line">        &#125;</div><div class="line">        tail = p;</div><div class="line">        ++modCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>LinkedHashMap的所有节点都在一个双向链表中，因此可以通过双向链表来遍历所有的Entry。</p>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashIterator</span> </span>&#123;</div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; next;</div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; current;</div><div class="line">    <span class="keyword">int</span> expectedModCount;</div><div class="line"></div><div class="line">    LinkedHashIterator() &#123;</div><div class="line">        next = head;</div><div class="line">        expectedModCount = modCount;</div><div class="line">        current = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> LinkedHashMap.<span class="function">Entry&lt;K,V&gt; <span class="title">nextNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; e = next;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        current = e;</div><div class="line">        next = e.after;</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; p = current;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        current = <span class="keyword">null</span>;</div><div class="line">        K key = p.key;</div><div class="line">        removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">        expectedModCount = modCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedKeyIterator</span> <span class="keyword">extends</span> <span class="title">LinkedHashIterator</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt; &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode().getKey(); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedValueIterator</span> <span class="keyword">extends</span> <span class="title">LinkedHashIterator</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">V</span>&gt; &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode().value; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedEntryIterator</span> <span class="keyword">extends</span> <span class="title">LinkedHashIterator</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</div><div class="line">    Set&lt;K&gt; ks = keySet;</div><div class="line">    <span class="keyword">if</span> (ks == <span class="keyword">null</span>) &#123;</div><div class="line">        ks = <span class="keyword">new</span> LinkedKeySet();</div><div class="line">        keySet = ks;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ks;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</div><div class="line">    Collection&lt;V&gt; vs = values;</div><div class="line">    <span class="keyword">if</span> (vs == <span class="keyword">null</span>) &#123;</div><div class="line">        vs = <span class="keyword">new</span> LinkedValues();</div><div class="line">        values = vs;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vs;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</div><div class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</div><div class="line">    <span class="keyword">return</span> (es = entrySet) == <span class="keyword">null</span> ? (entrySet = <span class="keyword">new</span> LinkedEntrySet()) : es;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedEntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>&#123; <span class="keyword">return</span> size; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>&#123; LinkedHashMap.<span class="keyword">this</span>.clear(); &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LinkedEntryIterator();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</div><div class="line">        Object key = e.getKey();</div><div class="line">        Node&lt;K,V&gt; candidate = getNode(hash(key), key);</div><div class="line">        <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</div><div class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</div><div class="line">            Object key = e.getKey();</div><div class="line">            Object value = e.getValue();</div><div class="line">            <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</div><div class="line">        <span class="keyword">return</span> Spliterators.spliterator(<span class="keyword">this</span>, Spliterator.SIZED |</div><div class="line">                                        Spliterator.ORDERED |</div><div class="line">                                        Spliterator.DISTINCT);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">int</span> mc = modCount;</div><div class="line">        <span class="keyword">for</span> (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != <span class="keyword">null</span>; e = e.after)</div><div class="line">            action.accept(e);</div><div class="line">        <span class="keyword">if</span> (modCount != mc)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://blog.jrwang.me/2016/java-collections-linkedhashmap/" target="_blank" rel="external">http://blog.jrwang.me/2016/java-collections-linkedhashmap/</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(6): HashMap源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/28/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-6-HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>HashMap是一种基于哈希表(hash table)实现的map，数组中每一个元素都是一个链表，把数组中的每一格成为一个（bin或bucket）。</p>
<p>HashTable 的实现和 HashMap 非常相似，不过 HashTable 对每个方法进行了 Synchronize 同步以保证在多线程场景下的数据一致性，这种实现比较低效。在多线程场景下可以使用 Map m = Collections.synchronizedMap(new HashMap(…)); 或并发包中的 ConcurrentHashMap。</p>
<h2 id="设计原理"><a href="#设计原理" class="headerlink" title="设计原理"></a>设计原理</h2><blockquote>
<p>桶 + 链表 + 红黑树</p>
</blockquote>
<p>由于每一个桶中都是一个单向链表，hash相同的键值对都会作为一个节点被加入这个链表。当桶中的键值对数量过多时，会将桶中的单向链表转化为一个树。通过TREEIFY_THRESHOLD、UNTREEIFY_THRESHOLD和MIN_TREEIFY_CAPACITY来控制转换需要的阈值。</p>
<blockquote>
<p>在JDK 8之前的 HashMap 中都只是采取了单向链表的方式，哈希碰撞会给查找带来灾难性的影响。在最差的情况下，HashMap 会退化为一个单链表，查找时间由 O(1) 退化为 O(n) 。而在JDK 8中，如果单链表过长则会转换为一颗红黑树，使得最坏情况下查找的时间复杂度为 O(log n) 。红黑树节点的空间占用相较于普通节点要高出许多，通常只有在比较极端的情况下才会由单链表转化为红黑树。</p>
</blockquote>
<p>哈希表（也叫关联数组）一种通用的数据结构。<br>哈希表的概念：key经过hash函数后得到一个槽（buckets或slots）的索引，槽中保存着想要获取的值。伴随哈希表的还有哈希冲突，也就是一些key经过同一hash函数后可能产生相同的索引。在使用哈希表这种数据结构实现具体类时，需要注意：（1）设计好的hash函数，尽量减少冲突；（2）解决冲突发生后如何处理。</p>
<blockquote>
<p>装填因子（load factor）为散列表中的元素个数对该表大小的比。</p>
</blockquote>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>线程非安全，并且允许key和value为null，HashTable的键值都不能为null。</li>
<li>不保证内部元素的顺序，随着元素增加，同一元素的位置也可能改变（resize的情况）。</li>
<li>遍历集合的时间复杂度与其容量（capacity， 槽的个数）和现有元素的大小（entry的个数）成正比</li>
</ol>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认初始容量（槽的数量）：16，容量必须为2的整数次幂</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</div><div class="line">   <span class="comment">// 最大容量</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line">   <span class="comment">// 默认装填因子</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line"><span class="comment">// 树的阈值，当链表长度超过这个值的时候，进行链表到树结构的转变</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div><div class="line">   <span class="comment">// 当低于这个值得时候，树转变成链表</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</div><div class="line">   <span class="comment">// 位桶（bin）处的数据要采用红黑树结构进行存储时，整个table的最小容量</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</div><div class="line"><span class="comment">// 存储桶的数组，table的长度总是2的幂次方</span></div><div class="line">   <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</div><div class="line"></div><div class="line">   <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div><div class="line">   <span class="comment">// 元素的个数，实际存在的键值对个数</span></div><div class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> size;</div><div class="line"><span class="comment">// 被修改的次数</span></div><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line"><span class="comment">// 临界值（所能容纳的key-value键值对极限），当实际大小（容量*装填因子）超过临界值时，会进行扩容</span></div><div class="line">   <span class="keyword">int</span> threshold;</div><div class="line">   <span class="comment">// 装填因子</span></div><div class="line">   <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>HashMap的构造方法默认容量为16，table数组初始化采用了延迟加载的方式，直到第一次调用put方法时才会真正地分配数组空间。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                           initialCapacity);</div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">        initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                           loadFactor);</div><div class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">    putMapEntries(m, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><h3 id="链表节点Node"><a href="#链表节点Node" class="headerlink" title="链表节点Node"></a>链表节点Node</h3><p>HashMap的Entry定义，其实就是单向链表的一个节点Node，实现了Map.Entry接口，包括了键、值以及下一个节点的引用。这个Node节点是在普通的桶中使用的，在树形桶中使用TreeNode。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</div><div class="line">    <span class="keyword">final</span> K key;</div><div class="line">    V value;</div><div class="line">    Node&lt;K,V&gt; next;</div><div class="line"></div><div class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.hash = hash;</div><div class="line">        <span class="keyword">this</span>.key = key;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</div><div class="line">        V oldValue = value;</div><div class="line">        value = newValue;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</div><div class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class="line">                Objects.equals(value, e.getValue()))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="红黑树节点TreeNode"><a href="#红黑树节点TreeNode" class="headerlink" title="红黑树节点TreeNode"></a>红黑树节点TreeNode</h3><p>树形桶中使用的节点TreeNode是LinkedHashMap.Entry的子类，而LinkedHashMap.Entry又是HashMap.Node的子类。</p>
<p>使用TreeNode构造一颗红黑树，在红黑树中查找时可以发挥二叉查找的优势。当然，由于TreeNode也可以被当做普通节点Node的扩展，红黑树也可以按照单链表的方式进行遍历。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></div><div class="line">    TreeNode&lt;K,V&gt; left;</div><div class="line">    TreeNode&lt;K,V&gt; right;</div><div class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></div><div class="line">    <span class="keyword">boolean</span> red;</div><div class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">super</span>(hash, key, val, next);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns root of tree containing this node.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">root</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="keyword">this</span>, p;;) &#123;</div><div class="line">            <span class="keyword">if</span> ((p = r.parent) == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> r;</div><div class="line">            r = p;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="hash算法"><a href="#hash算法" class="headerlink" title="hash算法"></a>hash算法</h3><p>确定哈希桶数组的索引位置是关键的一步，通过hash算法求得这个位置。<br>在计算哈希值时，使用key对象自身的哈希值，并让高位和地位进行异或操作。<br>jdk1.7，使用indexFor来定位哈希桶数组的索引位置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 方法一 哈希计算</div><div class="line"> * jdk1.8&amp;jdk1.7</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h;</div><div class="line">    <span class="comment">// 第一步：取key的hashCode</span></div><div class="line">    <span class="comment">// 第二步：高位参与运算</span></div><div class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 方法二 索引映射</div><div class="line"> * jdk1.7</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  <span class="comment">//jdk1.7的源码，jdk1.8没有这个方法，但实现原理一样</span></div><div class="line"> <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);  <span class="comment">//第三步：取模运算</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>HashMap的Hash算法本质上就是三步：取key的hashCode值、高位参与运算、取模运算。</p>
</blockquote>
<p>方法一其实是优化单纯使用key的hashCode值实现的Hash算法，其中第二步高位参与运算则是优化的核心。</p>
<blockquote>
<p>记得在数据结构的《算法》散列表那部分看到过这么一个说法：保证散列均匀性的最好办法也许就是保证键的每一位都在散列值得计算中起到了作用，实现散列函数最常见的错误也许就是忽略了键的高位。</p>
</blockquote>
<p>HashMap的取模运算并不是利用<code>%</code>来实现的（取模运算消耗比较大），HashMap实现的方法<code>h&amp; (table.length-1)</code>来得到相对应得table索引值。HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，<code>h&amp; (table.length-1)</code>运算等价于对length取模，也就是<code>h%length</code>，但是<code>&amp;</code>比<code>%</code>具有更高的效率。</p>
<h3 id="tableSizeFor"><a href="#tableSizeFor" class="headerlink" title="tableSizeFor"></a>tableSizeFor</h3><p>table数组的大小要求是2的幂次方，如果构造方法中指定的容量并不是2的幂次方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</div><div class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</div><div class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="put添加及更新"><a href="#put添加及更新" class="headerlink" title="put添加及更新"></a>put添加及更新</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Implements Map.put and related methods</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> hash hash for key</div><div class="line"> * <span class="doctag">@param</span> key the key</div><div class="line"> * <span class="doctag">@param</span> value the value to put</div><div class="line"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</div><div class="line"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</div><div class="line"> * <span class="doctag">@return</span> previous value, or null if none</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></div><div class="line">               <span class="keyword">boolean</span> evict) &#123;</div><div class="line">	<span class="comment">// 使用局部遍历tab而不是类成员，方法栈上访问更快</span></div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">    <span class="comment">// table数组延迟加载，通过resize初始化</span></div><div class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">        n = (tab = resize()).length;</div><div class="line">    <span class="comment">// hash算法定位桶的索引位置</span></div><div class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</div><div class="line">    	<span class="comment">// 桶位位空时，直接创建一个新的Node节点，将其放入桶位</span></div><div class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">    <span class="comment">// 桶中已经存在单链表或红黑树</span></div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        Node&lt;K,V&gt; e; K k;</div><div class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="comment">// 如果键hash值相等，且键也相等</span></div><div class="line">            e = p;</div><div class="line">        <span class="comment">// 插入到红黑树中</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</div><div class="line">        <span class="comment">// 插入到单链表中</span></div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        	<span class="comment">// 遍历链表，并统计该桶中的Node数量</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</div><div class="line">            	<span class="comment">// 该key不在链表中，插入末尾</span></div><div class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</div><div class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</div><div class="line">                    <span class="comment">// 桶中的节点数大于阈值，转换为红黑树</span></div><div class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></div><div class="line">                        treeifyBin(tab, hash);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 该key已经在链表中</span></div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                p = e;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// onlyIfAbsent参数主要决定是否执行替换，当键存在时。</span></div><div class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></div><div class="line">            V oldValue = e.value;</div><div class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</div><div class="line">                e.value = value;</div><div class="line">            <span class="comment">// 调用回调函数，HashMap中没有实现具体行为</span></div><div class="line">            afterNodeAccess(e);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ++modCount;</div><div class="line">    <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">    	<span class="comment">// 超过阈值，扩容</span></div><div class="line">        resize();</div><div class="line">    <span class="comment">// 插入完成后的回调，HashMap中没有实现具体行为</span></div><div class="line">    afterNodeInsertion(evict);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><ol>
<li>首先是调整capacity和threshold，非边际情况下，都变为原来的两倍。</li>
<li>将oldTable的元素逐个迁移到newTable里。</li>
<li>迁移优化<br>jdk1.7中需要重新计算每个元素的hash值和元素在数组中的位置。但是在jdk1.8中做了优化，因为capacity总是扩展为原来的两倍，只需要看看原来的hash值新增的那个bit是1还是0就可以，是0的话索引没变，是1的话索引变成“原索引+oldCap”。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class="line">    Node&lt;K,V&gt;[] oldTab = table;</div><div class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</div><div class="line">    <span class="keyword">int</span> oldThr = threshold;</div><div class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</div><div class="line">    	<span class="comment">// 超过最大值就不再扩充了</span></div><div class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</div><div class="line">            threshold = Integer.MAX_VALUE;</div><div class="line">            <span class="keyword">return</span> oldTab;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 没有超过最大值，就扩充为原来的2倍</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// oldCap &lt;= 0，table空间尚未分配，初始化分配空间</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></div><div class="line">        newCap = oldThr;</div><div class="line">    <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></div><div class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</div><div class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 计算新的resize上限</span></div><div class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</div><div class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</div><div class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</div><div class="line">    &#125;</div><div class="line">    threshold = newThr;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</div><div class="line">    	<span class="comment">// 分配新表空间</span></div><div class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</div><div class="line">    table = newTab;</div><div class="line">    <span class="comment">// 原来的表中有内容，表明这是一次扩容，把每个bucket都移动到新的桶中</span></div><div class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</div><div class="line">    	<span class="comment">// 遍历所有桶</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</div><div class="line">            Node&lt;K,V&gt; e;</div><div class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</div><div class="line">                oldTab[j] = <span class="keyword">null</span>;</div><div class="line">                <span class="comment">// 该桶中只有一个节点，直接散列到新的位置</span></div><div class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</div><div class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</div><div class="line">                <span class="comment">// 该桶中是一颗红黑树，通过红黑树的split方法处理</span></div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</div><div class="line">               	<span class="comment">// 单向链表，重新散列，保证原来的顺序</span></div><div class="line">                <span class="comment">// 因为容量加倍，散列时（取模运算得到散列的桶索引位置）使用的位数扩展了一位</span></div><div class="line">                <span class="comment">// 该链表中的Node散列后可能有两个位置，通过新扩展位为0或1区分</span></div><div class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></div><div class="line">                	<span class="comment">// 原链表分为两个链表，一高一低，通过新扩展位来确定</span></div><div class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                    Node&lt;K,V&gt; next;</div><div class="line">                    <span class="keyword">do</span> &#123;</div><div class="line">                        next = e.next;</div><div class="line">                        <span class="comment">// 原索引，新扩展位为0(oldCap为2^k)，低链表</span></div><div class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</div><div class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</div><div class="line">                                loHead = e;</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                loTail.next = e;</div><div class="line">                            loTail = e;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">// 原索引 + oldCap，高链表</span></div><div class="line">                        <span class="keyword">else</span> &#123;</div><div class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</div><div class="line">                                hiHead = e;</div><div class="line">                            <span class="keyword">else</span></div><div class="line">                                hiTail.next = e;</div><div class="line">                            hiTail = e;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</div><div class="line">                    <span class="comment">// 原索引（低链表）到桶里</span></div><div class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</div><div class="line">                        loTail.next = <span class="keyword">null</span>;</div><div class="line">                        newTab[j] = loHead;</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 原索引+oldCap 放到桶里（高链表的位置相对于低链表的偏移为oldCap）</span></div><div class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</div><div class="line">                        hiTail.next = <span class="keyword">null</span>;</div><div class="line">                        newTab[j + oldCap] = hiHead;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> newTab;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 根节点就命中</span></div><div class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></div><div class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">return</span> first;</div><div class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</div><div class="line">        	<span class="comment">// 在红黑树中查找</span></div><div class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">            <span class="comment">// 在单链表中查找</span></div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; V v;</div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</div><div class="line">    	<span class="comment">// 单链表方式进行遍历（包括红黑树）</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</div><div class="line">            <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">                <span class="keyword">if</span> ((v = e.value) == value ||</div><div class="line">                    (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</div><div class="line">        <span class="keyword">null</span> : e.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Implements Map.remove and related methods</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> hash hash for key</div><div class="line"> * <span class="doctag">@param</span> key the key</div><div class="line"> * <span class="doctag">@param</span> value the value to match if matchValue, else ignored</div><div class="line"> * <span class="doctag">@param</span> matchValue if true only remove if value is equal</div><div class="line"> * <span class="doctag">@param</span> movable if false do not move other nodes while removing</div><div class="line"> * <span class="doctag">@return</span> the node, or null if none</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></div><div class="line">                           <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable) &#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// p指向桶中的第一个节点Node</span></div><div class="line">        <span class="comment">// node指向目标节点</span></div><div class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</div><div class="line">        <span class="comment">// 桶中第一个Node节点命中</span></div><div class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            node = p;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</div><div class="line">        	<span class="comment">// 红黑树中查找目标节点</span></div><div class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">            	<span class="comment">// 单链表中查找目标节点</span></div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                        ((k = e.key) == key ||</div><div class="line">                         (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line">                        node = e;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    p = e;</div><div class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 找到目标节点并符合移除条件</span></div><div class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</div><div class="line">                             (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</div><div class="line">			<span class="comment">// 从红黑树中移除</span></div><div class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</div><div class="line">            <span class="comment">// 移除单链表的第一个节点</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</div><div class="line">                tab[index] = node.next;</div><div class="line">            <span class="comment">// 不是单链表的第一个节点</span></div><div class="line">            <span class="keyword">else</span></div><div class="line">                p.next = node.next;</div><div class="line">            ++modCount;</div><div class="line">            --size;</div><div class="line">            <span class="comment">// 删除回调</span></div><div class="line">            afterNodeRemoval(node);</div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</div><div class="line">        size = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i)</div><div class="line">            tab[i] = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>HashMap提供了三种方式遍历其中的Entry、Key和Value，分别是<code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code>，<code>Set&lt;K&gt; keySet()</code>和<code>Collection&lt;V&gt; values()</code>。</p>
<h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></div><div class="line">    Node&lt;K,V&gt; current;     <span class="comment">// current entry</span></div><div class="line">    <span class="keyword">int</span> expectedModCount;  <span class="comment">// for fast-fail</span></div><div class="line">    <span class="keyword">int</span> index;             <span class="comment">// current slot</span></div><div class="line"></div><div class="line">    HashIterator() &#123;</div><div class="line">    	<span class="comment">// 保存迭代器创建时的modCount</span></div><div class="line">        expectedModCount = modCount;</div><div class="line">        Node&lt;K,V&gt;[] t = table;</div><div class="line">        current = next = <span class="keyword">null</span>;</div><div class="line">        index = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 找到第一个有效的槽</span></div><div class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></div><div class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">nextNode</span><span class="params">()</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] t;</div><div class="line">        Node&lt;K,V&gt; e = next;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">        <span class="comment">// 单链表方式遍历</span></div><div class="line">        <span class="keyword">if</span> ((next = (current = e).next) == <span class="keyword">null</span> &amp;&amp; (t = table) != <span class="keyword">null</span>) &#123;</div><div class="line">        	<span class="comment">// 找到下一个有效的槽</span></div><div class="line">            <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; p = current;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        current = <span class="keyword">null</span>;</div><div class="line">        K key = p.key;</div><div class="line">        removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">        expectedModCount = modCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">K</span>&gt; &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode().key; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">V</span>&gt; &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode().value; &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span></span></div><div class="line">    <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; &#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextNode(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</div><div class="line">    Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</div><div class="line">    <span class="keyword">return</span> (es = entrySet) == <span class="keyword">null</span> ? (entrySet = <span class="keyword">new</span> EntrySet()) : es;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</div><div class="line">    Set&lt;K&gt; ks = keySet;</div><div class="line">    <span class="keyword">if</span> (ks == <span class="keyword">null</span>) &#123;</div><div class="line">        ks = <span class="keyword">new</span> KeySet();</div><div class="line">        keySet = ks;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ks;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</div><div class="line">    Collection&lt;V&gt; vs = values;</div><div class="line">    <span class="keyword">if</span> (vs == <span class="keyword">null</span>) &#123;</div><div class="line">        vs = <span class="keyword">new</span> Values();</div><div class="line">        values = vs;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> vs;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span>                 </span>&#123; <span class="keyword">return</span> size; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span>               </span>&#123; HashMap.<span class="keyword">this</span>.clear(); &#125;</div><div class="line">    <span class="comment">// 返回一个迭代器</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    	<span class="comment">// 这里会导致包含key为null的Map，在此返回false</span></div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</div><div class="line">        Object key = e.getKey();</div><div class="line">        Node&lt;K,V&gt; candidate = getNode(hash(key), key);</div><div class="line">        <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</div><div class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</div><div class="line">            Object key = e.getKey();</div><div class="line">            Object value = e.getValue();</div><div class="line">            <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="keyword">true</span>, <span class="keyword">true</span>) != <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EntrySpliterator&lt;&gt;(HashMap.<span class="keyword">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab;</div><div class="line">        <span class="keyword">if</span> (action == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">int</span> mc = modCount;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</div><div class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next)</div><div class="line">                    action.accept(e);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (modCount != mc)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://blog.jrwang.me/2016/java-collections-hashmap/" target="_blank" rel="external">http://blog.jrwang.me/2016/java-collections-hashmap/</a><br><a href="http://liujiacai.net/blog/2015/09/03/java-hashmap/" target="_blank" rel="external">http://liujiacai.net/blog/2015/09/03/java-hashmap/</a><br><a href="http://tech.meituan.com/java-hashmap.html" target="_blank" rel="external">http://tech.meituan.com/java-hashmap.html</a><br><a href="http://www.importnew.com/20321.html" target="_blank" rel="external">http://www.importnew.com/20321.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(5): Stack源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/28/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-5-Stack%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol>
<li>Stack是继承Vector，实现了栈相关的操作。</li>
<li>Stack也是线程安全的。</li>
</ol>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="push入栈"><a href="#push入栈" class="headerlink" title="push入栈"></a>push入栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 入栈，加入到容器末尾</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</div><div class="line">    addElement(item);</div><div class="line">    <span class="keyword">return</span> item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="pop出栈"><a href="#pop出栈" class="headerlink" title="pop出栈"></a>pop出栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出栈，删除栈顶元素并返回其值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">    E       obj;</div><div class="line">    <span class="keyword">int</span>     len = size();</div><div class="line"></div><div class="line">    obj = peek();</div><div class="line">    removeElementAt(len - <span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="peek获取栈顶元素"><a href="#peek获取栈顶元素" class="headerlink" title="peek获取栈顶元素"></a>peek获取栈顶元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取栈顶元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = size();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (len == <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</div><div class="line">    <span class="keyword">return</span> elementAt(len - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> size() == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 搜索元素的位置</div><div class="line"> * 返回元素在数组最后一次出现位置的索引</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = lastIndexOf(o);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> size() - i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(4): Vector源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/28/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-4-Vector%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol>
<li>Vector和ArrayList一样是基于<strong>数组</strong>实现的，是一个<strong>动态</strong>数组，其容量能自动增长。</li>
<li>Vector和ArrayList的区别在于，Vector是<strong>线程安全</strong>的。</li>
<li>和ArrayList实现了一样的接口</li>
</ol>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用该数组保存所有元素</span></div><div class="line">   <span class="keyword">protected</span> Object[] elementData;</div><div class="line">   <span class="comment">// 元素的数量</span></div><div class="line">   <span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</div><div class="line">   <span class="comment">// 每次扩容时的增量</span></div><div class="line">   <span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">int</span> capacityIncrement)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                           initialCapacity);</div><div class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">    <span class="keyword">this</span>.capacityIncrement = capacityIncrement;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(initialCapacity, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Vector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    elementData = c.toArray();</div><div class="line">    elementCount = elementData.length;</div><div class="line">    <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">        elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (minCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">        modCount++;</div><div class="line">        ensureCapacityHelper(minCapacity);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">        grow(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="comment">// overflow-conscious code</span></div><div class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</div><div class="line">                                     capacityIncrement : oldCapacity);</div><div class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">        newCapacity = minCapacity;</div><div class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">        newCapacity = hugeCapacity(minCapacity);</div><div class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</div><div class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">        Integer.MAX_VALUE :</div><div class="line">        MAX_ARRAY_SIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Vector：如果在构造函数中没有指定每次扩容时应该增加的容量大小，则每次扩容默认为容量加倍。<br>ArrayList对比：ArrayList每次扩容则是默认增加0.5倍左右。</p>
</blockquote>
<h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> newSize)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">if</span> (newSize &gt; elementCount) &#123;</div><div class="line">        ensureCapacityHelper(newSize);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize ; i &lt; elementCount ; i++) &#123;</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    elementCount = newSize;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> elementCount;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</div><div class="line">    elementData[elementCount++] = e;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">removeElement</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">int</span> i = indexOf(obj);</div><div class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</div><div class="line">        removeElementAt(i);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</div><div class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)</div><div class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Collections.synchronizedList(<span class="keyword">super</span>.subList(fromIndex, toIndex),</div><div class="line">                                        <span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Vector的线程安全是通过synchronized关键字来实现的，要么是方法上直接添加synchronized关键字，要么是嵌套调用同步的方法。<br>Vector也可以包含null元素。</p>
</blockquote>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Vector包括和ArrayList一样的Iterator和ListIterator迭代器，迭代器内部的方法也是同步的。同时还有独特的迭代方式Enumeration</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Enumeration&lt;E&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Enumeration&lt;E&gt;() &#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> count &lt; elementCount;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">nextElement</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (Vector.<span class="keyword">this</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (count &lt; elementCount) &#123;</div><div class="line">                    <span class="keyword">return</span> elementData(count++);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Vector Enumeration"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://blog.jrwang.me/2016/java-collections-vector-stack/" target="_blank" rel="external">http://blog.jrwang.me/2016/java-collections-vector-stack/</a><br><a href="http://blog.csdn.net/chdjj/article/details/38494183" target="_blank" rel="external">http://blog.csdn.net/chdjj/article/details/38494183</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(3): LinkedList源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/27/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-3-LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol>
<li>LinkedList是基于双向循环链表（从源码中可以很容易看出）实现的，实现了List和Deque接口，除了可以当做链表来操作外，它还可以当做栈、队列和双端队列来使用。</li>
<li>LinkedList同样是非线程安全的，只在单线程下适合使用。</li>
<li>LinkedList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了Cloneable接口，能被克隆。</li>
</ol>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LinkedList中元素的个数</span></div><div class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">   <span class="comment">// 链表的首节点</span></div><div class="line">   <span class="comment">// (first == null &amp;&amp; last == null) || (first.prev == null &amp;&amp; first.item != null)</span></div><div class="line">   <span class="keyword">transient</span> Node&lt;E&gt; first;</div><div class="line">   <span class="comment">// 链表的尾节点</span></div><div class="line">   <span class="comment">// (first == null &amp;&amp; last == null) || (last.next == null &amp;&amp; last.item != null)</span></div><div class="line">   <span class="keyword">transient</span> Node&lt;E&gt; last;</div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过一个集合初始化LinkedList</div><div class="line"> * 元素顺序由这个结合的迭代器返回顺序决定</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>();</div><div class="line">	addAll(c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="linkFirst"><a href="#linkFirst" class="headerlink" title="linkFirst"></a>linkFirst</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用参数e作为首节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">	<span class="comment">// 得到原首节点</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="comment">// 创建新节点，newNode的prev节点为null，元素为e，next节点为原首节点f</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</div><div class="line">    <span class="comment">// 首节点设为新节点</span></div><div class="line">    first = newNode;</div><div class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</div><div class="line">    	<span class="comment">// 如果原首节点为空，则尾节点就是首节点，也设为新节点</span></div><div class="line">        last = newNode;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    	<span class="comment">// 如果原首节点不为空，则原首节点的prev为新节点</span></div><div class="line">        f.prev = newNode;</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="linkLast"><a href="#linkLast" class="headerlink" title="linkLast"></a>linkLast</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用参数e作尾节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">	<span class="comment">// 得到原尾节点</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="comment">// 创建新节点，newNode的prev节点为原尾节点，元素为e，next节点为null</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</div><div class="line">    <span class="comment">// 尾节点设置为新节点</span></div><div class="line">    last = newNode;</div><div class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</div><div class="line">    	<span class="comment">// 如果原尾节点为空，则首节点就是尾节点，也设为新节点</span></div><div class="line">        first = newNode;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    	<span class="comment">// 如果原尾节点不为空，则原尾节点的next为新节点</span></div><div class="line">        l.next = newNode;</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="linkBefore"><a href="#linkBefore" class="headerlink" title="linkBefore"></a>linkBefore</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 在指定节点succ前插入新元素，指定节点succ不能为空</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert succ != null;</span></div><div class="line">    <span class="comment">// 获取指定节点的prev节点</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</div><div class="line">    <span class="comment">// 创建新节点，prev为指定节点的前一个节点，元素为e，next节点为指定节点</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</div><div class="line">    <span class="comment">// 指定节点succ向前指向新的节点</span></div><div class="line">    succ.prev = newNode;</div><div class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</div><div class="line">    	<span class="comment">// 如果指定节点的prev节点为空，则新的节点就是首节点</span></div><div class="line">        first = newNode;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    	<span class="comment">// 如果指定节点存在prev节点pred，则pred向后指向新节点</span></div><div class="line">        pred.next = newNode;</div><div class="line">    size++;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="unlinkFirst"><a href="#unlinkFirst" class="headerlink" title="unlinkFirst"></a>unlinkFirst</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除非空的首节点f并返回首节点元素值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></div><div class="line">    <span class="comment">// 获取首节点f的元素值</span></div><div class="line">    <span class="keyword">final</span> E element = f.item;</div><div class="line">    <span class="comment">// 得到首节点f的next节点</span></div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</div><div class="line">    f.item = <span class="keyword">null</span>;</div><div class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">    <span class="comment">// f的next节点作为首节点</span></div><div class="line">    first = next;</div><div class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</div><div class="line">        last = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        next.prev = <span class="keyword">null</span>;</div><div class="line">    size--;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="unlinkLast"><a href="#unlinkLast" class="headerlink" title="unlinkLast"></a>unlinkLast</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除非空的尾节点l并返回尾节点元素值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert l == last &amp;&amp; l != null;</span></div><div class="line">    <span class="keyword">final</span> E element = l.item;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</div><div class="line">    l.item = <span class="keyword">null</span>;</div><div class="line">    l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">    last = prev;</div><div class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</div><div class="line">        first = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        prev.next = <span class="keyword">null</span>;</div><div class="line">    size--;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除指定非空节点x，并返回其元素值</div><div class="line"> */</div><div class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert x != null;</span></div><div class="line">    <span class="keyword">final</span> E element = x.item;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</div><div class="line">        first = next;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        prev.next = next;</div><div class="line">        x.prev = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</div><div class="line">        last = prev;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        next.prev = prev;</div><div class="line">        x.next = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    x.item = <span class="keyword">null</span>;</div><div class="line">    size--;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">return</span> element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="getFirst"><a href="#getFirst" class="headerlink" title="getFirst"></a>getFirst</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取第一个元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> f.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="getLast"><a href="#getLast" class="headerlink" title="getLast"></a>getLast</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取最后一个元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> l.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="removeFirst"><a href="#removeFirst" class="headerlink" title="removeFirst"></a>removeFirst</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除第一个节点并返回其元素值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> unlinkFirst(f);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="removeLast"><a href="#removeLast" class="headerlink" title="removeLast"></a>removeLast</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除最后一个节点并返回其元素值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">    <span class="keyword">return</span> unlinkLast(l);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="addFirst"><a href="#addFirst" class="headerlink" title="addFirst"></a>addFirst</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 插入一个元素作为第一个元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    linkFirst(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="addLast"><a href="#addLast" class="headerlink" title="addLast"></a>addLast</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 插入一个元素作为最后一个元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    linkLast(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取指定元素首次出现的索引位置，不存在返回-1</div><div class="line"> * 从first开始</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> index;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">            <span class="keyword">if</span> (o.equals(x.item))</div><div class="line">                <span class="keyword">return</span> index;</div><div class="line">            index++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取指定元素首次出现的索引位置，不存在返回-1</div><div class="line"> * 从last开始</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> index = size;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</div><div class="line">            index--;</div><div class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> index;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</div><div class="line">            index--;</div><div class="line">            <span class="keyword">if</span> (o.equals(x.item))</div><div class="line">                <span class="keyword">return</span> index;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取指定位置的节点</div><div class="line"> */</div><div class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="comment">// assert isElementIndex(index);</span></div><div class="line">	<span class="comment">// 如果位置索引小于size的一半(或一半减一)，从first开始遍历</span></div><div class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</div><div class="line">        Node&lt;E&gt; x = first;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</div><div class="line">            x = x.next;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Node&lt;E&gt; x = last;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</div><div class="line">            x = x.prev;</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="size"><a href="#size" class="headerlink" title="size"></a>size</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加一个元素，默认添加到末尾</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    linkLast(e);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加一个元素到指定的索引位置</div><div class="line"> * 如果索引值等于size，则添加到末尾；</div><div class="line"> * 如果索引值不等于size，插入到该索引原节点之前。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    checkPositionIndex(index);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (index == size)</div><div class="line">        linkLast(element);</div><div class="line">    <span class="keyword">else</span></div><div class="line">        linkBefore(element, node(index));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除指定元素，默认从first开始，删除第一次出现的元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</div><div class="line">                unlink(x);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</div><div class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</div><div class="line">                unlink(x);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除指定索引的元素，并返回原索引值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    checkElementIndex(index);</div><div class="line">    <span class="keyword">return</span> unlink(node(index));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加指定集合的元素到LinkedList，默认从最后开始添加</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> addAll(size, c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 从指定位置开始添加集合</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">	<span class="comment">// 0&lt;= index &lt;= size</span></div><div class="line">    checkPositionIndex(index);</div><div class="line"></div><div class="line">    Object[] a = c.toArray();</div><div class="line">    <span class="keyword">int</span> numNew = a.length;</div><div class="line">    <span class="keyword">if</span> (numNew == <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	<span class="comment">// 插入集合所需的pred节点和succ节点</span></div><div class="line">    Node&lt;E&gt; pred, succ;</div><div class="line">    <span class="keyword">if</span> (index == size) &#123;</div><div class="line">    	<span class="comment">// 插入位置index原先没有节点</span></div><div class="line">        succ = <span class="keyword">null</span>;</div><div class="line">        pred = last;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">// 插入位置index原先有节点，则pred节点等于当前节点的prev节点，当前节点后移作为succ节点</span></div><div class="line">        succ = node(index);</div><div class="line">        pred = succ.prev;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (Object o : a) &#123;</div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) E e = (E) o;</div><div class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</div><div class="line">            first = newNode;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            pred.next = newNode;</div><div class="line">        <span class="comment">// 新加的节点作为下一次添加节点的pred节点</span></div><div class="line">        pred = newNode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</div><div class="line">        last = pred;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        pred.next = succ;</div><div class="line">        succ.prev = pred;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    size += numNew;</div><div class="line">    modCount++;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Clearing all of the links between nodes is "unnecessary", but:</span></div><div class="line">    <span class="comment">// - helps a generational GC if the discarded nodes inhabit</span></div><div class="line">    <span class="comment">//   more than one generation</span></div><div class="line">    <span class="comment">// - is sure to free memory even if there is a reachable Iterator</span></div><div class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; ) &#123;</div><div class="line">        Node&lt;E&gt; next = x.next;</div><div class="line">        x.item = <span class="keyword">null</span>;</div><div class="line">        x.next = <span class="keyword">null</span>;</div><div class="line">        x.prev = <span class="keyword">null</span>;</div><div class="line">        x = next;</div><div class="line">    &#125;</div><div class="line">    first = last = <span class="keyword">null</span>;</div><div class="line">    size = <span class="number">0</span>;</div><div class="line">    modCount++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取指定索引的元素值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    checkElementIndex(index);</div><div class="line">    <span class="keyword">return</span> node(index).item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 修改指定索引的元素值病返回之前的值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">    checkElementIndex(index);</div><div class="line">    Node&lt;E&gt; x = node(index);</div><div class="line">    E oldVal = x.item;</div><div class="line">    x.item = element;</div><div class="line">    <span class="keyword">return</span> oldVal;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="isElementIndex"><a href="#isElementIndex" class="headerlink" title="isElementIndex"></a>isElementIndex</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检查索引是否超出了范围，0&lt;=index&lt;size</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="isPositionIndex"><a href="#isPositionIndex" class="headerlink" title="isPositionIndex"></a>isPositionIndex</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检查位置是否超出范围，0&lt;=index&lt;=size</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="outOfBoundsMsg"><a href="#outOfBoundsMsg" class="headerlink" title="outOfBoundsMsg"></a>outOfBoundsMsg</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * IndexOutOfBoundsException异常详情</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="checkElementIndex"><a href="#checkElementIndex" class="headerlink" title="checkElementIndex"></a>checkElementIndex</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检查元素索引是否超出范围</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isElementIndex(index))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="checkPositionIndex"><a href="#checkPositionIndex" class="headerlink" title="checkPositionIndex"></a>checkPositionIndex</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 检查位置是否超出范围</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!isPositionIndex(index))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>Queue Operations: 提供普通队列和双向队列的功能，当然也可以实现栈，FIFO/FILO。</p>
</blockquote>
<h3 id="peek获取队首元素"><a href="#peek获取队首元素" class="headerlink" title="peek获取队首元素"></a>peek获取队首元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出队</div><div class="line"> * 1.从前端</div><div class="line"> * 2.**不会删除**元素（节点）</div><div class="line"> * 3.不存在**返回null**</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="element获取队首元素"><a href="#element获取队首元素" class="headerlink" title="element获取队首元素"></a>element获取队首元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出队</div><div class="line"> * 1.从前端</div><div class="line"> * 2.**不会删除**元素（节点）</div><div class="line"> * 3.不存在则**抛出异常**</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">element</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="poll出队"><a href="#poll出队" class="headerlink" title="poll出队"></a>poll出队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出队</div><div class="line"> * 1.从前端</div><div class="line"> * 2.会**删除元素**（节点）</div><div class="line"> * 3.不存在**返回null**</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="remove出队"><a href="#remove出队" class="headerlink" title="remove出队"></a>remove出队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出队</div><div class="line"> * 1.从前端</div><div class="line"> * 2.会**删除元素**</div><div class="line"> * 3.不存在**抛出异常**</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> removeFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="offer入队"><a href="#offer入队" class="headerlink" title="offer入队"></a>offer入队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 入队</div><div class="line"> * 从后端</div><div class="line"> * 始终返回true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> add(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="offerFirst入队"><a href="#offerFirst入队" class="headerlink" title="offerFirst入队"></a>offerFirst入队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 入队</div><div class="line"> * 从前端</div><div class="line"> * 始终返回true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    addFirst(e);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="offerLast"><a href="#offerLast" class="headerlink" title="offerLast"></a>offerLast</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 入队</div><div class="line"> * 从后端</div><div class="line"> * 始终返回true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    addLast(e);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="peekFirst获取队首元素"><a href="#peekFirst获取队首元素" class="headerlink" title="peekFirst获取队首元素"></a>peekFirst获取队首元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出队</div><div class="line"> * 1.从前端</div><div class="line"> * 2.不存在返回null</div><div class="line"> * 3.不会删除元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="peekLast获取栈队尾元素"><a href="#peekLast获取栈队尾元素" class="headerlink" title="peekLast获取栈队尾元素"></a>peekLast获取栈队尾元素</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出队</div><div class="line"> * 1.从后端</div><div class="line"> * 2.不存在返回null</div><div class="line"> * 3.不会删除元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : l.item;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="pollFirst出队"><a href="#pollFirst出队" class="headerlink" title="pollFirst出队"></a>pollFirst出队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出队</div><div class="line"> * 1.从前端</div><div class="line"> * 2.不存在返回null</div><div class="line"> * 3.会删除元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</div><div class="line">    <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="pollLast出队"><a href="#pollLast出队" class="headerlink" title="pollLast出队"></a>pollLast出队</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出队</div><div class="line"> * 1.从后端</div><div class="line"> * 2.不存在返回null</div><div class="line"> * 3.会删除元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</div><div class="line">    <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkLast(l);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>栈操作: 通过LinkedList实现栈</p>
</blockquote>
<h3 id="push入栈"><a href="#push入栈" class="headerlink" title="push入栈"></a>push入栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 入栈</div><div class="line"> * 从前面添加</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    addFirst(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="pop出栈"><a href="#pop出栈" class="headerlink" title="pop出栈"></a>pop出栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 出栈</div><div class="line"> * 返回栈顶元素，从前面删除，不存在抛出异常</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> removeFirst();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="removeFirstOccurrence"><a href="#removeFirstOccurrence" class="headerlink" title="removeFirstOccurrence"></a>removeFirstOccurrence</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *Removes the first occurrence of the specified element in this</div><div class="line"> *list (when traversing the list from head to tail).  If the list</div><div class="line"> *does not contain the element, it is unchanged.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> remove(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="removeLastOccurrence"><a href="#removeLastOccurrence" class="headerlink" title="removeLastOccurrence"></a>removeLastOccurrence</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Removes the last occurrence of the specified element in this</div><div class="line"> * list (when traversing the list from head to tail).  If the list</div><div class="line"> * does not contain the element, it is unchanged.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</div><div class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</div><div class="line">                unlink(x);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</div><div class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</div><div class="line">                unlink(x);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    checkPositionIndex(index);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Node&lt;E&gt; lastReturned;</div><div class="line">    <span class="keyword">private</span> Node&lt;E&gt; next;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line"></div><div class="line">    ListItr(<span class="keyword">int</span> index) &#123;</div><div class="line">        <span class="comment">// assert isPositionIndex(index);</span></div><div class="line">        next = (index == size) ? <span class="keyword">null</span> : node(index);</div><div class="line">        nextIndex = index;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextIndex &lt; size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        checkForComodification();</div><div class="line">        <span class="keyword">if</span> (!hasNext())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line"></div><div class="line">        lastReturned = next;</div><div class="line">        next = next.next;</div><div class="line">        nextIndex++;</div><div class="line">        <span class="keyword">return</span> lastReturned.item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextIndex &gt; <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</div><div class="line">        checkForComodification();</div><div class="line">        <span class="keyword">if</span> (!hasPrevious())</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line"></div><div class="line">        lastReturned = next = (next == <span class="keyword">null</span>) ? last : next.prev;</div><div class="line">        nextIndex--;</div><div class="line">        <span class="keyword">return</span> lastReturned.item;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextIndex;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> nextIndex - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        checkForComodification();</div><div class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line"></div><div class="line">        Node&lt;E&gt; lastNext = lastReturned.next;</div><div class="line">        unlink(lastReturned);</div><div class="line">        <span class="keyword">if</span> (next == lastReturned)</div><div class="line">            next = lastNext;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            nextIndex--;</div><div class="line">        lastReturned = <span class="keyword">null</span>;</div><div class="line">        expectedModCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">        checkForComodification();</div><div class="line">        lastReturned.item = e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        checkForComodification();</div><div class="line">        lastReturned = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>)</div><div class="line">            linkLast(e);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            linkBefore(e, next);</div><div class="line">        nextIndex++;</div><div class="line">        expectedModCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(action);</div><div class="line">        <span class="keyword">while</span> (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) &#123;</div><div class="line">            action.accept(next.item);</div><div class="line">            lastReturned = next;</div><div class="line">            next = next.next;</div><div class="line">            nextIndex++;</div><div class="line">        &#125;</div><div class="line">        checkForComodification();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DescendingIterator();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Adapter to provide descending iterators via ListItr.previous</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ListItr itr = <span class="keyword">new</span> ListItr(size());</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> itr.hasPrevious();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> itr.previous();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        itr.remove();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 浅拷贝</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">    LinkedList&lt;E&gt; clone = superClone();</div><div class="line"></div><div class="line">    <span class="comment">// Put clone into "virgin" state</span></div><div class="line">    clone.first = clone.last = <span class="keyword">null</span>;</div><div class="line">    clone.size = <span class="number">0</span>;</div><div class="line">    clone.modCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Initialize clone with our elements</span></div><div class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</div><div class="line">        clone.add(x.item);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> clone;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> LinkedList&lt;E&gt; <span class="title">superClone</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> (LinkedList&lt;E&gt;) <span class="keyword">super</span>.clone();</div><div class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Object[] toArray() &#123;</div><div class="line">    Object[] result = <span class="keyword">new</span> Object[size];</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</div><div class="line">        result[i++] = x.item;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class="line">    <span class="keyword">if</span> (a.length &lt; size)</div><div class="line">        a = (T[])java.lang.reflect.Array.newInstance(</div><div class="line">                            a.getClass().getComponentType(), size);</div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    Object[] result = a;</div><div class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</div><div class="line">        result[i++] = x.item;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (a.length &gt; size)</div><div class="line">        a[size] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></div><div class="line">    <span class="keyword">throws</span> java.io.IOException &#123;</div><div class="line">    <span class="comment">// Write out any hidden serialization magic</span></div><div class="line">    s.defaultWriteObject();</div><div class="line"></div><div class="line">    <span class="comment">// Write out size</span></div><div class="line">    s.writeInt(size);</div><div class="line"></div><div class="line">    <span class="comment">// Write out all elements in the proper order.</span></div><div class="line">    <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</div><div class="line">        s.writeObject(x.item);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></div><div class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</div><div class="line">    <span class="comment">// Read in any hidden serialization magic</span></div><div class="line">    s.defaultReadObject();</div><div class="line"></div><div class="line">    <span class="comment">// Read in size</span></div><div class="line">    <span class="keyword">int</span> size = s.readInt();</div><div class="line"></div><div class="line">    <span class="comment">// Read in all elements in the proper order.</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">        linkLast((E)s.readObject());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    E item;</div><div class="line">    Node&lt;E&gt; next;</div><div class="line">    Node&lt;E&gt; prev;</div><div class="line"></div><div class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</div><div class="line">        <span class="keyword">this</span>.item = element;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">        <span class="keyword">this</span>.prev = prev;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://blog.csdn.net/ns_code/article/details/35787253" target="_blank" rel="external">http://blog.csdn.net/ns_code/article/details/35787253</a><br><a href="http://blog.csdn.net/anxpp/article/details/51203591" target="_blank" rel="external">http://blog.csdn.net/anxpp/article/details/51203591</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(2): ArrayList源码分析]]></title>
      <url>https://rogerfang.github.io/2016/12/27/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-2-ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></div></pre></td></tr></table></figure>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ol>
<li>ArrayList是基于<strong>数组</strong>实现的，是一个<strong>动态</strong>数组，其容量能自动增长。</li>
<li>ArrayList<strong>非线程安全</strong>的，只能用在单线程环境下，多线程环境下可以考虑用Collections.synchronizedList(List l)函数返回一个线程安全的ArrayList类，也可以使用concurrent并发包下的CopyOnWriteArrayList类。</li>
<li>ArrayList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了RandomAccess接口，支持快速随机访问，实际上就是通过下标序号进行快速访问，实现了Cloneable接口，能被克隆。</li>
</ol>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 默认的初始容量</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div><div class="line">   <span class="comment">// 用该数组保存数据</span></div><div class="line">   <span class="keyword">transient</span> Object[] elementData;</div><div class="line">   </div><div class="line">   <span class="comment">// 空数组，初始容量为0</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line">   <span class="comment">// 空数组，并且代表使用默认的初始容量</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line">   <span class="comment">// ArrayList中元素的数量</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> size;</div></pre></td></tr></table></figure>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 无参构造方法</div><div class="line"> * 构造一个空列表，并且使用默认的初始容量</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用传入的初始容量构造一个列表</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                               initialCapacity);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 创建一个包含传入集合的ArrayList</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        elementData = c.toArray();</div><div class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></div><div class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</div><div class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// replace with empty array.</span></div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="trimToSize"><a href="#trimToSize" class="headerlink" title="trimToSize"></a>trimToSize</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将当前容量值设为实际元素个数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</div><div class="line">            elementData = (size == <span class="number">0</span>)</div><div class="line">              ? EMPTY_ELEMENTDATA</div><div class="line">              : Arrays.copyOf(elementData, size);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ensureCapacity"><a href="#ensureCapacity" class="headerlink" title="ensureCapacity"></a>ensureCapacity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 确定ArrayList的容量</div><div class="line"> * 确保能存储minCapacity最小容量的元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</div><div class="line">            <span class="comment">// any size if not default element table</span></div><div class="line">            ? <span class="number">0</span></div><div class="line">            <span class="comment">// larger than default for default empty table. It's already</span></div><div class="line">            <span class="comment">// supposed to be at default size.</span></div><div class="line">            : DEFAULT_CAPACITY;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</div><div class="line">            ensureExplicitCapacity(minCapacity);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 如果minCapacity最小容量大于elementData存储容量，就扩容</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line"></div><div class="line">        <span class="comment">// overflow-conscious code</span></div><div class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</div><div class="line">            grow(minCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ensureExplicitCapacity(minCapacity);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="grow"><a href="#grow" class="headerlink" title="grow"></a>grow</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="comment">// overflow-conscious code</span></div><div class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;</div><div class="line">        <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">            newCapacity = minCapacity;</div><div class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</div><div class="line">            newCapacity = hugeCapacity(minCapacity);</div><div class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></div><div class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</div><div class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">            Integer.MAX_VALUE :</div><div class="line">            MAX_ARRAY_SIZE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 正向查找，返回元素索引值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 反向查找，返回元素索引值</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将元素添加到尾部</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        elementData[size++] = e;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 将元素添加到指定索引位置,索引右侧所有元素右移</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line">        rangeCheckForAdd(index);</div><div class="line"></div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></div><div class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</div><div class="line">                         size - index);</div><div class="line">        elementData[index] = element;</div><div class="line">        size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除指定索引的元素</div><div class="line"> * （不知道这里为啥不调用私有方法fastRemove()，代码冗余）</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        rangeCheck(index);</div><div class="line"></div><div class="line">        modCount++;</div><div class="line">        E oldValue = elementData(index);</div><div class="line"></div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除指定元素，删除第一次出现的元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</div><div class="line">                    fastRemove(index);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</div><div class="line">                    fastRemove(index);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> * Private remove method that skips bounds checking and does not return</div><div class="line"> * the value removed.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        modCount++;</div><div class="line"></div><div class="line">        <span class="comment">// clear to let GC do its work</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        size = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 浅拷贝，ArrayList所包含的元素没有拷贝</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</div><div class="line">            v.elementData = Arrays.copyOf(elementData, size);</div><div class="line">            v.modCount = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回包含所有元素的Object数组</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> Object[] toArray() &#123;</div><div class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回包含所有元素的数组，数组类型通过运行时类型决定</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</div><div class="line">        <span class="comment">// 如果数组a大小 &lt; ArrayList的元素个数</span></div><div class="line">        <span class="keyword">if</span> (a.length &lt; size)</div><div class="line">            <span class="comment">// 新建一个T[]数组，并拷贝所有元素到新数组中</span></div><div class="line">            <span class="comment">// 运行时决定类型，运用了java的反射机制</span></div><div class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</div><div class="line">        <span class="comment">// 如果数组大小 &gt;= ArrayList元素个数</span></div><div class="line">        <span class="comment">// 则将所有元素拷贝到数组a中</span></div><div class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</div><div class="line">        <span class="keyword">if</span> (a.length &gt; size)</div><div class="line">            <span class="comment">// 当数组a还有剩余空间，则在添加完所有元素后增加一个null元素，在某些情况下可以用于判定元素的数量</span></div><div class="line">            a[size] = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="addAll"><a href="#addAll" class="headerlink" title="addAll"></a>addAll</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将集合c追加到ArrayList中，当c为null时会抛出空指针异常</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        Object[] a = c.toArray();</div><div class="line">        <span class="keyword">int</span> numNew = a.length;</div><div class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></div><div class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</div><div class="line">        size += numNew;</div><div class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * java.io.Serializable的写入函数</div><div class="line"> * 将ArrayList的“容量，所有的元素值”都写入到输出流中</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></div><div class="line">        <span class="keyword">throws</span> java.io.IOException&#123;</div><div class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></div><div class="line">        <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line">        s.defaultWriteObject();</div><div class="line"></div><div class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></div><div class="line">        s.writeInt(size);</div><div class="line"></div><div class="line">        <span class="comment">// Write out all elements in the proper order.</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</div><div class="line">            s.writeObject(elementData[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * java.io.Serializable的读取函数：根据写入方式读出</div><div class="line"> * 先将ArrayList的“容量”读出，然后将“所有的元素值”读出</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></div><div class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</div><div class="line">        elementData = EMPTY_ELEMENTDATA;</div><div class="line"></div><div class="line">        <span class="comment">// Read in size, and any hidden stuff</span></div><div class="line">        s.defaultReadObject();</div><div class="line"></div><div class="line">        <span class="comment">// Read in capacity</span></div><div class="line">        s.readInt(); <span class="comment">// ignored</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// be like clone(), allocate array based upon size not capacity</span></div><div class="line">            ensureCapacityInternal(size);</div><div class="line"></div><div class="line">            Object[] a = elementData;</div><div class="line">            <span class="comment">// Read in all elements in the proper order.</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</div><div class="line">                a[i] = s.readObject();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * index表示list iterator首次调用next方法时返回的元素</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * An optimized version of AbstractList.Itr</div><div class="line"> * 通用迭代器实现</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">		<span class="comment">// 下一个元素的索引，默认为0</span></div><div class="line">        <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></div><div class="line">        <span class="comment">// 上次访问的元素的位置</span></div><div class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></div><div class="line">        <span class="keyword">int</span> expectedModCount = modCount;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor != size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">if</span> (i &gt;= size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            cursor = i + <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ArrayList.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">                cursor = lastRet;</div><div class="line">                lastRet = -<span class="number">1</span>;</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">         * java8中Iterator新增的一个方法</div><div class="line">         * 在使用Iterator进行迭代后，能够将迭代剩余的元素传递给一个函数</div><div class="line">         */</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</div><div class="line">            Objects.requireNonNull(consumer);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> size = ArrayList.<span class="keyword">this</span>.size;</div><div class="line">            <span class="keyword">int</span> i = cursor;</div><div class="line">            <span class="keyword">if</span> (i &gt;= size) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</div><div class="line">                consumer.accept((E) elementData[i++]);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// update once at end of iteration to reduce heap write traffic</span></div><div class="line">            cursor = i;</div><div class="line">            lastRet = i - <span class="number">1</span>;</div><div class="line">            checkForComodification();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">     * An optimized version of AbstractList.ListItr</div><div class="line">     * 可以使用ListIterator对list进行正反方向遍历，以及modify操作</div><div class="line">     * 注意：cursor position索引值没有元素，位于元素之间</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">extends</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        ListItr(<span class="keyword">int</span> index) &#123;</div><div class="line">            <span class="keyword">super</span>();</div><div class="line">            cursor = index;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor != <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> cursor - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">            Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            cursor = i;</div><div class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ArrayList.<span class="keyword">this</span>.set(lastRet, e);</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">int</span> i = cursor;</div><div class="line">                ArrayList.<span class="keyword">this</span>.add(i, e);</div><div class="line">                cursor = i + <span class="number">1</span>;</div><div class="line">                lastRet = -<span class="number">1</span>;</div><div class="line">                expectedModCount = modCount;</div><div class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="subList"><a href="#subList" class="headerlink" title="subList"></a>subList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">        subListRangeCheck(fromIndex, toIndex, size);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, <span class="number">0</span>, fromIndex, toIndex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subListRangeCheck</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex, <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"fromIndex = "</span> + fromIndex);</div><div class="line">        <span class="keyword">if</span> (toIndex &gt; size)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"toIndex = "</span> + toIndex);</div><div class="line">        <span class="keyword">if</span> (fromIndex &gt; toIndex)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"fromIndex("</span> + fromIndex +</div><div class="line">                                               <span class="string">") &gt; toIndex("</span> + toIndex + <span class="string">")"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SubList</span> <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">RandomAccess</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parentOffset;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</div><div class="line">        <span class="keyword">int</span> size;</div><div class="line"></div><div class="line">        SubList(AbstractList&lt;E&gt; parent,</div><div class="line">                <span class="keyword">int</span> offset, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex) &#123;</div><div class="line">            <span class="keyword">this</span>.parent = parent;</div><div class="line">            <span class="keyword">this</span>.parentOffset = fromIndex;</div><div class="line">            <span class="keyword">this</span>.offset = offset + fromIndex;</div><div class="line">            <span class="keyword">this</span>.size = toIndex - fromIndex;</div><div class="line">            <span class="keyword">this</span>.modCount = ArrayList.<span class="keyword">this</span>.modCount;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</div><div class="line">            rangeCheck(index);</div><div class="line">            checkForComodification();</div><div class="line">            E oldValue = ArrayList.<span class="keyword">this</span>.elementData(offset + index);</div><div class="line">            ArrayList.<span class="keyword">this</span>.elementData[offset + index] = e;</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            rangeCheck(index);</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">return</span> ArrayList.<span class="keyword">this</span>.elementData(offset + index);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</div><div class="line">            rangeCheckForAdd(index);</div><div class="line">            checkForComodification();</div><div class="line">            parent.add(parentOffset + index, e);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            rangeCheck(index);</div><div class="line">            checkForComodification();</div><div class="line">            E result = parent.remove(parentOffset + index);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size--;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            parent.removeRange(parentOffset + fromIndex,</div><div class="line">                               parentOffset + toIndex);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size -= toIndex - fromIndex;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> addAll(<span class="keyword">this</span>.size, c);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">            rangeCheckForAdd(index);</div><div class="line">            <span class="keyword">int</span> cSize = c.size();</div><div class="line">            <span class="keyword">if</span> (cSize==<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            checkForComodification();</div><div class="line">            parent.addAll(parentOffset + index, c);</div><div class="line">            <span class="keyword">this</span>.modCount = parent.modCount;</div><div class="line">            <span class="keyword">this</span>.size += cSize;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> listIterator();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            rangeCheckForAdd(index);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="keyword">this</span>.offset;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListIterator&lt;E&gt;() &#123;</div><div class="line">                <span class="keyword">int</span> cursor = index;</div><div class="line">                <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</div><div class="line">                <span class="keyword">int</span> expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> cursor != SubList.<span class="keyword">this</span>.size;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">                    checkForComodification();</div><div class="line">                    <span class="keyword">int</span> i = cursor;</div><div class="line">                    <span class="keyword">if</span> (i &gt;= SubList.<span class="keyword">this</span>.size)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    cursor = i + <span class="number">1</span>;</div><div class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> cursor != <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</div><div class="line">                    checkForComodification();</div><div class="line">                    <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">                    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    cursor = i;</div><div class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; consumer)</span> </span>&#123;</div><div class="line">                    Objects.requireNonNull(consumer);</div><div class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> size = SubList.<span class="keyword">this</span>.size;</div><div class="line">                    <span class="keyword">int</span> i = cursor;</div><div class="line">                    <span class="keyword">if</span> (i &gt;= size) &#123;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</div><div class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</div><div class="line">                        consumer.accept((E) elementData[offset + (i++)]);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// update once at end of iteration to reduce heap write traffic</span></div><div class="line">                    lastRet = cursor = i;</div><div class="line">                    checkForComodification();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> cursor;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> cursor - <span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">                    checkForComodification();</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        SubList.<span class="keyword">this</span>.remove(lastRet);</div><div class="line">                        cursor = lastRet;</div><div class="line">                        lastRet = -<span class="number">1</span>;</div><div class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</div><div class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">                    checkForComodification();</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        ArrayList.<span class="keyword">this</span>.set(offset + lastRet, e);</div><div class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">                    checkForComodification();</div><div class="line"></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="keyword">int</span> i = cursor;</div><div class="line">                        SubList.<span class="keyword">this</span>.add(i, e);</div><div class="line">                        cursor = i + <span class="number">1</span>;</div><div class="line">                        lastRet = -<span class="number">1</span>;</div><div class="line">                        expectedModCount = ArrayList.<span class="keyword">this</span>.modCount;</div><div class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (expectedModCount != ArrayList.<span class="keyword">this</span>.modCount)</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">                &#125;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</div><div class="line">            subListRangeCheck(fromIndex, toIndex, size);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubList(<span class="keyword">this</span>, offset, fromIndex, toIndex);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="keyword">this</span>.size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="keyword">this</span>.size)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+<span class="keyword">this</span>.size;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (ArrayList.<span class="keyword">this</span>.modCount != <span class="keyword">this</span>.modCount)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</div><div class="line">            checkForComodification();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayListSpliterator&lt;E&gt;(ArrayList.<span class="keyword">this</span>, offset,</div><div class="line">                                               offset + <span class="keyword">this</span>.size, <span class="keyword">this</span>.modCount);</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢：<br><a href="http://blog.csdn.net/ns_code/article/details/35568011" target="_blank" rel="external">http://blog.csdn.net/ns_code/article/details/35568011</a><br><a href="http://blog.csdn.net/anxpp/article/details/51202290" target="_blank" rel="external">http://blog.csdn.net/anxpp/article/details/51202290</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java集合框架(1): 概述]]></title>
      <url>https://rogerfang.github.io/2016/12/27/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-1-%E6%A6%82%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>Java集合框架下大致可以分为如下五个部分：<strong>List列表</strong>、<strong>Set集合</strong>、<strong>Map映射</strong>、<strong>迭代器</strong>（Iterator、Enumeration）、<strong>工具类</strong>（Arrays、Collections）。</p>
<p><img src="/images/collections/java-collection-framework.png" alt=""></p>
<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>Collection是List、Set等集合高度抽象出来的接口，它包含了这些集合的基本操作，它主要又分为两大部分：List和Set。</p>
<h2 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h2><p>List接口通常表示一个列表（数组、队列、链表、栈等），其中的元素可以重复，常用实现类为ArrayList和LinkedList，另外还有不常用的Vector。另外，LinkedList还是实现了Queue接口，因此也可以作为队列使用。</p>
<h2 id="Set集合"><a href="#Set集合" class="headerlink" title="Set集合"></a>Set集合</h2><p>Set接口通常表示一个集合，其中的元素不允许重复（通过hashcode和equals函数保证），常用实现类有HashSet和TreeSet，HashSet是通过Map中的HashMap实现的，而TreeSet是通过Map中的TreeMap实现的。另外，TreeSet还实现了SortedSet接口，因此是有序的集合（集合中的元素要实现Comparable接口，并覆写Compartor函数才行）。</p>
<h1 id="Map映射"><a href="#Map映射" class="headerlink" title="Map映射"></a>Map映射</h1><p>Map是一个映射接口，其中的每个元素都是一个key-value键值对，同样抽象类AbstractMap通过适配器模式实现了Map接口中的大部分函数，TreeMap、HashMap、WeakHashMap等实现类都通过继承AbstractMap来实现，另外，不常用的HashTable直接实现了Map接口，它和Vector都是JDK1.0就引入的集合类。</p>
<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><p>Iterator是遍历集合的迭代器（不能遍历Map，只用来遍历Collection），Collection的实现类都实现了iterator()函数，它返回一个Iterator对象，用来遍历集合，ListIterator则专门用来遍历List。</p>
<h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h2><p>Enumeration则是JDK1.0时引入的，作用与Iterator相同，但它的功能比Iterator要少，它只能再Hashtable、Vector和Stack中使用。</p>
<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><p>Arrays和Collections是用来操作数组、集合的两个工具类，例如在ArrayList和Vector中大量调用了Arrays.Copyof()方法。</p>
<p>而Collections中有很多静态方法可以返回各集合类的synchronized版本，即线程安全的版本，当然了，如果要用线程安全的结合类，首选Concurrent并发包下的对应的集合类。</p>
<hr>
<p>感谢: <a href="http://blog.csdn.net/ns_code/article/details/35564663" target="_blank" rel="external">http://blog.csdn.net/ns_code/article/details/35564663</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Elasticsearch(1): windows环境下安装]]></title>
      <url>https://rogerfang.github.io/2016/12/21/Elasticsearch-1-windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="Elasticsearch安装"></a>Elasticsearch安装</h1><ol>
<li><p>官网下载: <code>https://www.elastic.co/downloads/elasticsearch</code></p>
</li>
<li><p>解压，修改配置文件</p>
</li>
</ol>
<p>在config/elasticsearch.yml配置文件中添加以下参数:</p>
<blockquote>
<p>http.cors.enabled:true</p>
<p>http.cors.allow-origin:”*”</p>
</blockquote>
<ol>
<li>启动</li>
</ol>
<p>运行bin/elasticsearch.bat, 访问<code>http://localhost:9200</code></p>
<h1 id="head插件安装"><a href="#head插件安装" class="headerlink" title="head插件安装"></a>head插件安装</h1><p>在5.0版本中不支持直接安装head插件，需要启动一个服务</p>
<ol>
<li>下载插件并解压</li>
</ol>
<p><code>https://github.com/mobz/elasticsearch-head</code></p>
<ol>
<li>安装grunt</li>
</ol>
<p>grunt是一个很方便的构建工具，可以进行打包压缩、测试、执行等等的工作，5.0里的head插件就是通过grunt启动的。</p>
<p><code>npm install grunt-cli</code></p>
<p>查看是否安装: <code>grunt -version</code></p>
<ol>
<li>修改head配置</li>
</ol>
<p>目录：<code>head/Gruntfile.js</code>，增加<code>hostname: &#39;*&#39;</code>实现跨机器访问。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">connect: &#123;</div><div class="line"></div><div class="line">			<span class="attr">server</span>: &#123;</div><div class="line"></div><div class="line">				<span class="attr">options</span>: &#123;</div><div class="line"></div><div class="line">					<span class="attr">port</span>: <span class="number">9100</span>,</div><div class="line"></div><div class="line">					<span class="attr">base</span>: <span class="string">'.'</span>,</div><div class="line"></div><div class="line">					<span class="attr">hostname</span>: <span class="string">'*'</span>,</div><div class="line"></div><div class="line">					<span class="attr">keepalive</span>: <span class="literal">true</span></div><div class="line"></div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<p>目录: <code>head/_site/app.js</code>，修改head的连接地址:<code>this.base_uri = this.config.base_uri || this.prefs.get(&quot;app-base_uri&quot;) || &quot;http://localhost:9200&quot;;</code></p>
<ol>
<li>安装依赖包</li>
</ol>
<p>在head目录中，执行<code>npm install</code>下载依赖的包。</p>
<ol>
<li>启动nodejs</li>
</ol>
<p><code>grunt server</code></p>
<ol>
<li>访问</li>
</ol>
<p>访问head插件：<code>http://localhost:9100</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Docker(1): 初步使用]]></title>
      <url>https://rogerfang.github.io/2016/12/09/Docker-1-%E5%88%9D%E6%AD%A5%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p>系统环境CentOS7</p>
<ol>
<li>安装：<code>yum install docker</code></li>
<li>Docker镜像加速：<br> 使用DaoCloud.io提供的镜像加速。<br> <code>curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://5dc86619.m.daocloud.io</code></li>
</ol>
<h1 id="编译自己的镜像"><a href="#编译自己的镜像" class="headerlink" title="编译自己的镜像"></a>编译自己的镜像</h1><h2 id="创建一个Spring-Boot项目"><a href="#创建一个Spring-Boot项目" class="headerlink" title="创建一个Spring Boot项目"></a>创建一个Spring Boot项目</h2><p>Hello, Docker!<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Hello, Docker!"</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(DemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>将项目打包 <code>mvn package</code>, demo-0.0.1-SNAPSHOT.jar</p>
</blockquote>
<h2 id="创建Dockerfile文件"><a href="#创建Dockerfile文件" class="headerlink" title="创建Dockerfile文件"></a>创建Dockerfile文件</h2><p>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">FROM java:8</div><div class="line"></div><div class="line">MAINTAINER roger</div><div class="line"></div><div class="line">ADD demo-0.0.1-SNAPSHOT.jar spring-boot-hello.jar</div><div class="line"></div><div class="line">EXPOSE 8080</div><div class="line"></div><div class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/spring-boot-hello.jar&quot;]</div></pre></td></tr></table></figure></p>
<ul>
<li>FROM：指明当前镜像的基镜像是Java，标签（版本）为8</li>
<li>MANINTAINER：作者roger</li>
<li>ADD：将demo-0.0.1-SNAPSHOT.jar添加到镜像，并重命名为spring-boot-hello.jar</li>
<li>EXPOSE：运行镜像的容器，监听8080端口</li>
<li>ENTRYPOINT：启动时执行命令<code>java -jar spring-boot-hello.jar</code></li>
</ul>
<h2 id="编译镜像"><a href="#编译镜像" class="headerlink" title="编译镜像"></a>编译镜像</h2><p>在包括demo-0.0.1-SNAPSHOT.jar和dockerfile文件的目录下执行镜像的编译命令<code>docker build -t roger/spring-boot-hello .</code>，<code>roger/spring-boot-hello</code>是镜像的名称，最后一个<code>.</code>指明dockerfile的路径（表明当前路径下）。</p>
<p>编译成功后，查看本地镜像<code>docker images</code></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行命令：<code>docker run --name spring-boot-hello -p 8080:8080 roger/spring-boot-hello</code></p>
<p>加上参数<code>-d</code>可以挂起在后台执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JPA 2.0 动态类型安全查询]]></title>
      <url>https://rogerfang.github.io/2016/12/07/JPA-2-0-%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<p>JPA 2.0版本(JSR 317)引入的关键特性之一就是Criteria API，所带来的好处就是：查询可以通过Java编译器来验证其正确性，而且还提供了能够在运行时动态地构建查询的机制。</p>
<p>使用Criteria API开发Java编译器能够检查其正确定的查询，从而减少运行时的错误，这种查询优于传统的基于字符串的Java Persistence Query Language(JPQL)查询。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p><strong>持久化单元</strong>（Persist Unit）就是关于一组Entity的命名配置。持久化单元是一个静态概念。<br><strong>持久化上下文</strong>（Persist Context）就是一个受管的Entity实例的集合。每一个持久化上下文都关联一个持久化单元，持久化上下文不可能脱离持久化单元独立存在。持久化上下文是一个动态概念。尽管持久化上下文非常重要，但是开发者不直接与之打交道，持久化上下文在程序中是透明的，我们通过<strong>EntityManager</strong>间接管理它。<br><strong>实体的生命周期</strong>：新实体（new），持久化态（managed），游离态（detached），删除状态（removed）。</p>
<h1 id="JPQL查询缺陷"><a href="#JPQL查询缺陷" class="headerlink" title="JPQL查询缺陷"></a>JPQL查询缺陷</h1><p>JPA 1.0引进了JPQL，这是一种强大的查询语言，在很大程度上导致了JPA的流行。不过，基于字符串并使用有限语法的JPQL存在一些限制。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例子: JPQL查询</span></div><div class="line">EntityManager entityManager = ...;</div><div class="line">String jpql = <span class="string">"select p from Person where p.age &gt; 20"</span>;</div><div class="line">Query query entityManager.createQuery(jpql);</div><div class="line">List result = query.getResultList();</div></pre></td></tr></table></figure></p>
<p>JPA 1.0的查询执行模型:</p>
<ol>
<li>JPQL查询被指定为一个字符串;</li>
<li>EntityManager是构造一个包含给定JPQL查询字符串的可执行查询实例的工厂，在一组实体类与底层数据源之间进行 O/R 映射的管理;</li>
<li>查询执行的结果包含无类型的List的元素。</li>
</ol>
<p><strong>注意</strong>：该例子存在一个验证错误，代码能够通过编译，但是运行会失败，因为JPQL查询字符串的语法有误。<br>正确的JPQL语句为：<code>String jpql = &quot;select p from Person p where p.age &gt; 20&quot;;</code></p>
<h1 id="类型安全检查"><a href="#类型安全检查" class="headerlink" title="类型安全检查"></a>类型安全检查</h1><p>Criteria API的最大优势之一就是禁止构造语法错误的查询。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例子: 类型安全查询</span></div><div class="line">EntityManager entityManager = ...;</div><div class="line">CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder();</div><div class="line">CriteriaQuery&lt;Person&gt; criteriaQuery = criteriaBuilder.createQuery(Person.class);</div><div class="line">Root&lt;Person&gt; root = criteriaQuery.from(Person.class);</div><div class="line">Predicate predicate = criteriaBuilder.gt(root.get(Person_.age), <span class="number">20</span>);</div><div class="line">criteriaQuery.where(predicate);</div><div class="line">TypedQuery&lt;Person&gt; typedQuery = entityManager.createQuery(criteriaQuery);</div><div class="line">List&lt;Person&gt; result = typerQuery.getResultList();</div></pre></td></tr></table></figure></p>
<p>JPA 2.0的Criteria API查询执行模型:</p>
<ol>
<li>EntityManager创建CriteriaBuilder的一个实例，CriteriaBuilder是CriteriaQuery的工厂。</li>
<li>CriteriaBuilder工厂构造一个CriteriaQuery实例，CriteriaQuery被赋予泛型类型。泛型类型声明CriteriaQuery在执行时返回的结果的类型。</li>
<li>在CriteriaQuery实例上设置查询表达式，CriteriaQuery 封装了传统查询的子句：<ul>
<li>将CriteriaQuery设置为从Person.class查询。</li>
<li>Root<t>是一个查询表达式，表示持久化实体的范围，实际上表示“对所有类型为T的实例计算这个查询”。类似于SQL查询的FROM子句。</t></li>
</ul>
</li>
<li>构造Predicate，Predicate是计算结果为true或false的常见查询表达式形式。<br>谓词由CriteriaBuilder构造，CriteriaBuilder不仅是CriteriaQuery的工厂，同时也是查询表达式的工厂。CriteriaBuilder提供了传统JPQL支持的所有查询表达式的API方法，这些方法签名能够检查查询表达式的正确性。例如: <code>Predicate predicate = criteriaBuilder.gt(root.get(Person_.age), 20);</code></li>
<li><code>criteriaBuilder.gt(root.get(Person_.age), 20);</code>，方法<code>gt()</code>的第一个参数:<code>root.get(Person_.age)</code>是一个路径表达式Expression<t>。路径表达式时通过一个或多个持久化属性从根表达式进行导航得到的结果。Person_.age将在Metamodel API中解释。</t></li>
<li>第6行，在 CriteriaQuery 上将谓词设置为其 WHERE 子句。</li>
<li>第7行，EntityManager 创建一个可执行查询，其输入为 CriteriaQuery。这类似于构造一个输入为 JPQL 字符串的可执行查询。</li>
</ol>
<h1 id="Metamodel元模型"><a href="#Metamodel元模型" class="headerlink" title="Metamodel元模型"></a>Metamodel元模型</h1><p><code>Person_.age</code>，它表示 Person 的持久化属性 age。Person<em>.age 是 Person</em> 类中的公共静态字段，Person_ 是静态、已实例化的规范元模型类，对应于原来的 Person 实体类。</p>
<blockquote>
<p>元模型类描述持久化类的元数据。规范的元模型类是静态的，因此它的所有成员变量都被声明为静态的（也是 public 的）。<code>Person_.age</code>是静态成员变量之一。</p>
</blockquote>
<h2 id="元模型Metamodel和Java-Reflection-API比较"><a href="#元模型Metamodel和Java-Reflection-API比较" class="headerlink" title="元模型Metamodel和Java Reflection API比较"></a>元模型Metamodel和Java Reflection API比较</h2><p><code>Person_</code>元模型类是引用 Person 的元信息的一种代替方法。这种方法类似于经常使用的 Java Reflection API，但概念上有很大的不同。<br><strong>问题</strong>：可以使用反射获得关于 java.lang.Class 的实例的元信息，但是不能以++编译器能够检查的方式++引用关于 Person.class 的元信息。<br>例如，使用反射时，使用<code>Field field = Person.class.getField(&quot;age&quot;);</code>来引用Person.class中的age字段。这种方式造成编译器能够顺利编译该代码，但是不能确定是否可以正常工作。</p>
<blockquote>
<ul>
<li>反射不能实现JPA 2.0的类型安全查询API要实现的功能。</li>
<li>类型安全查询 API 必须让您的代码能够引用 Person 类中的持久化属性 age，同时让编译器能够在编译期间检查错误。</li>
</ul>
</blockquote>
<p><strong>解决办法</strong>：JPA 2.0 提供的解决办法通过静态地公开相同的持久化属性实例化名为 Person_ 的元模型类（对应于 Person）。编译器可以根据元模型实施属性的类型检查。<br>JPA Metamodel API 提供接口（比如 MappedSuperclassType、EntityType 和 EmbeddableType，SingularAttribute 和 PluralAttribute）来描述元模型类的类型及其属性。</p>
<h3 id="简单的持久化实体类"><a href="#简单的持久化实体类" class="headerlink" title="简单的持久化实体类"></a>简单的持久化实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 简单的持久化实体类</div><div class="line"> */</div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span>　<span class="class"><span class="keyword">class</span>　<span class="title">Person</span>　</span>&#123;</div><div class="line">　 <span class="meta">@Id</span></div><div class="line">　 <span class="keyword">private</span>　<span class="keyword">long</span>　ssn;</div><div class="line">　 <span class="keyword">private</span>　string　name;</div><div class="line">　 <span class="keyword">private</span>　<span class="keyword">int</span>　age;</div><div class="line"></div><div class="line">　 <span class="comment">//　public　gettter/setter　methods</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="简单实体的规范元模型"><a href="#简单实体的规范元模型" class="headerlink" title="简单实体的规范元模型"></a>简单实体的规范元模型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 简单实体的规范元模型</div><div class="line"> */</div><div class="line"><span class="keyword">public</span>　<span class="class"><span class="keyword">class</span>　<span class="title">Person_</span>　</span>&#123;</div><div class="line">　 <span class="keyword">public</span>　<span class="keyword">static</span>　<span class="keyword">volatile</span>　SingularAttribute&lt;Person,Long&gt;　ssn;</div><div class="line">　 <span class="keyword">public</span>　<span class="keyword">static</span>　<span class="keyword">volatile</span>　SingularAttribute&lt;Person,String&gt;　name;</div><div class="line">　 <span class="keyword">public</span>　<span class="keyword">static</span>　<span class="keyword">volatile</span>　SingularAttribute&lt;Person,Integer&gt;　age;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="运行时作用域"><a href="#运行时作用域" class="headerlink" title="运行时作用域"></a>运行时作用域</h1><blockquote>
<p>将一组严格的可相互引用的类称为运行时作用域</p>
</blockquote>
<h2 id="Class实例的作用域"><a href="#Class实例的作用域" class="headerlink" title="Class实例的作用域"></a>Class实例的作用域</h2><p>一般而言，可以将 Java Reflection API 的传统接口与专门用于描述持久化元数据的 javax.persistence.metamodel 的接口进行比较。要进一步进行类比，则需要对元模型接口使用等效的运行时作用域概念。java.lang.Class 实例的作用域由 java.lang.ClassLoader 在运行时划分。一组相互引用的 Java 类实例必须在 ClassLoader 作用域下定义。作用域的边界是严格 或封闭 的，如果在 ClassLoader L 作用域下定义的类 A 试图引用不在 ClassLoader L 作用域之内的类 B，结果将收到可怕的 ClassNotFoundException 或 NoClassDef FoundError。</p>
<h2 id="JPA-运行时作用域"><a href="#JPA-运行时作用域" class="headerlink" title="JPA 运行时作用域"></a>JPA 运行时作用域</h2><blockquote>
<p>运行时作用域在 JPA 1.0 中称为持久化单元。持久化单元作用域的持久化实体在 META-INF/persistence.xml 文件的 <class> 子句中枚举。</class></p>
</blockquote>
<p>在 JPA 2.0 中，通过 javax.persistence.metamodel.Metamodel 接口让开发人员可以在运行时使用作用域。Metamodel 接口是特定持久化单元知道的所有持久化实体的容器。</p>
<blockquote>
<p>这个接口允许通过元模型元素的对应持久化实体类访问元模型元素。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 例子</span></div><div class="line">EntityManager entityManager = ...;</div><div class="line">Metamodel metamodel = entityManager.getMetamodel();</div><div class="line">EntityType&lt;Person&gt; entityType = metamodel.entity(Person.class);</div></pre></td></tr></table></figure>
<p>感谢：<a href="http://www.th7.cn/Program/java/201501/356865.shtml" target="_blank" rel="external">http://www.th7.cn/Program/java/201501/356865.shtml</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot:项目启动执行CommandLineRunner]]></title>
      <url>https://rogerfang.github.io/2016/12/06/Spring-Boot-%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8CCommandLineRunner/</url>
      <content type="html"><![CDATA[<p>Spring Boot提供了一个借口CommandLineRunner，实现这个接口可以使得在项目启动时去执行一些操作。@Order注解来规定调用所有CommandLineRunner实例的顺序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger.commandline;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</div><div class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Order</span>(value = <span class="number">1</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstCommandLineRunner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;first command line runner: "</span> + strings);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot:普通类调用Spring Bean对象]]></title>
      <url>https://rogerfang.github.io/2016/12/06/Spring-Boot-%E6%99%AE%E9%80%9A%E7%B1%BB%E8%B0%83%E7%94%A8Spring-Bean%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>编写的SpringUtil在Spring Boot可以扫描的包下或者使用@ComponentScan引入自定义的包了，只需要使得SpringUtil实现接口：ApplicationContextAware，然后加上@Component 注解即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 普通类使用Spring Bean对象</div><div class="line"> */</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext ctx = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (ctx == <span class="keyword">null</span>)&#123;</div><div class="line">            ctx = applicationContext;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取ApplicationContext</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> ctx;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过Bean name获取Bean</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> ctx.getBean(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过Bean class获取Bean</div><div class="line">     * <span class="doctag">@param</span> clazz</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> ctx.getBean(clazz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通过Bean name以及Class返回指定的Bean</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@param</span> clazz</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> ctx.getBean(name, clazz);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot(数据访问):JDBC和JPA]]></title>
      <url>https://rogerfang.github.io/2016/12/06/Spring-Boot-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE-JDBC%E5%92%8CJPA/</url>
      <content type="html"><![CDATA[<ul>
<li><strong>JDBC的自动配置</strong><br>spring-boot-starter-data-jpa依赖于spring-boot-starter-jdbc，而Spring Boot对JDBC做了一些自动配置，源码放置在org.springframework.boot.autoconfigure.jdbc下，通过”spring.datasource”为前缀的属性自动配置DataSouce；Spring Boot自动开启了注解事务的支持(@EnableTransactionManagement)；还配置了一个jdbcTemplate。</li>
<li><strong>JPA的自动配置</strong><br>Spring Boot默认JPA的实现者是Hibernate，使用JPA只需要添加spring-boot-starter-data-jpa，然后再定义DataSource、实体类和数据访问层，无需任何额外配置。</li>
</ul>
<h1 id="添加maven依赖"><a href="#添加maven依赖" class="headerlink" title="添加maven依赖"></a>添加maven依赖</h1><p>pom.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--Spring Boot提供的测试依赖--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h1 id="Spring-Boot配置文件"><a href="#Spring-Boot配置文件" class="headerlink" title="Spring Boot配置文件"></a>Spring Boot配置文件</h1><ul>
<li>application.properties</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 激活profile, application-&#123;profile&#125;.properties</div><div class="line">spring.profiles.active=prod</div><div class="line"></div><div class="line"># server</div><div class="line">server.port=80</div><div class="line"></div><div class="line"># spring-data-jpq</div><div class="line"># update: 启动时会根据实体类生成数据表,当实体类属性变动时,表结构也会更新</div><div class="line">spring.jpa.hibernate.ddl-auto=update</div><div class="line">spring.jpa.show-sql=true</div><div class="line"></div><div class="line"># log</div><div class="line">logging.file=log/demo.log</div><div class="line">logging.level.org.springframework.web=debug</div></pre></td></tr></table></figure>
<ul>
<li>application-dev.properties 使用默认的数据源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 数据库配置</div><div class="line"># Spring Boot默认的数据源是：org.apache.tomcat.jdbc.pool.DataSource</div><div class="line">#spring.datasouce.type=</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/spring_boot_test</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div></pre></td></tr></table></figure>
<ul>
<li>application-prod.properties 配置使用Druid数据源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 数据库配置</div><div class="line"># Spring Boot默认的数据源是：org.apache.tomcat.jdbc.pool.DataSource</div><div class="line">spring.datasouce.type=com.alibaba.druid.pool.DruidDataSource</div><div class="line">spring.datasource.url=jdbc:mysql://localhost:3306/spring_boot_test</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line"></div><div class="line"># 连接池设置</div><div class="line"># 初始化大小，最小，最大</div><div class="line">spring.datasouce.initialSize=10</div><div class="line">spring.datasouce.minIdle=5</div><div class="line">spring.datasouce.maxActive=20</div><div class="line"># 配置获取连接超时时间</div><div class="line">spring.datasouce.maxWait=60000</div><div class="line">spring.datasouce.validationQuery=SELECT 1</div><div class="line">#配置监控统计拦截的filters</div><div class="line">spring.datasouce.filters=stat,wall</div></pre></td></tr></table></figure>
<h1 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger.model;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.Entity;</div><div class="line"><span class="keyword">import</span> javax.persistence.GeneratedValue;</div><div class="line"><span class="keyword">import</span> javax.persistence.Id;</div><div class="line"></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line">    <span class="keyword">private</span> Double price;</div><div class="line"></div><div class="line">	...setter/gettter</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Product&#123;"</span> +</div><div class="line">                <span class="string">"id="</span> + id +</div><div class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", description='"</span> + description + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", price="</span> + price +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="填充初始数据"><a href="#填充初始数据" class="headerlink" title="填充初始数据"></a>填充初始数据</h1><p>在resources目录下增加一个data.sql,程序运行时会自动往表里插入数据。</p>
<blockquote>
<p>Spring JDBC has a DataSource initializer feature.Spring Boot enables it by default and loads SQL from the standard locations <strong>schema.sql</strong> and <strong>data.sql</strong> (in the root of the classpath)</p>
</blockquote>
<p>schema.sql: 自动用来初始化表结构<br>data.sql: 自动用来填充数据</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product (<span class="keyword">id</span>, <span class="keyword">name</span>, description, price) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">"电脑"</span>, <span class="string">"电脑系列产品"</span>, <span class="number">10000</span>)</div></pre></td></tr></table></figure>
<h1 id="DAO层-JDBC-JPA"><a href="#DAO层-JDBC-JPA" class="headerlink" title="DAO层: JDBC/JPA"></a>DAO层: JDBC/JPA</h1><ul>
<li>ProductDao</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger.dao.jdbc;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.roger.model.Product;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.BeanPropertyRowMapper;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.RowMapper;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用JDBC实现DAO层</div><div class="line"> */</div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</div><div class="line">        String sql = <span class="string">"select * from Product where id = ?"</span>;</div><div class="line">        RowMapper&lt;Product&gt; rowMapper = <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Product.class);</div><div class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, rowMapper, id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>ProductRepository</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger.dao.jpa;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.roger.model.Product;</div><div class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 使用JPA实现DAO层</div><div class="line"> * Created by Roger on 2016/12/6.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Product</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// 排序</span></div><div class="line">    <span class="function">List&lt;Product&gt; <span class="title">findByName</span><span class="params">(String name, Sort sort)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">// 分页</span></div><div class="line">    <span class="function">Page&lt;Product&gt; <span class="title">findByName</span><span class="params">(String name, Pageable pageable)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.roger.dao.jdbc.ProductDao;</div><div class="line"><span class="keyword">import</span> com.roger.dao.jpa.ProductRepository;</div><div class="line"><span class="keyword">import</span> com.roger.model.Product;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ProductDao productDao;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ProductRepository productRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findByIdJdbc</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> productDao.findById(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">findByIdJpa</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> productRepository.findOne(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 排序</div><div class="line">     * 根据价格降序</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Product&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> productRepository.findByName(name, <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"price"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 分页</div><div class="line">     * <span class="doctag">@param</span> name</div><div class="line">     * <span class="doctag">@param</span> pageNumber</div><div class="line">     * <span class="doctag">@param</span> pageSize</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Page&lt;Product&gt; <span class="title">pageByName</span><span class="params">(String name, <span class="keyword">int</span> pageNumber, <span class="keyword">int</span> pageSize)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> productRepository.findByName(name, <span class="keyword">new</span> PageRequest(pageNumber, pageSize));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="配置监控统计功能"><a href="#配置监控统计功能" class="headerlink" title="配置监控统计功能"></a>配置监控统计功能</h1><h2 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h2><p>使用了原生的servlet, filter方式，然后通过<strong>在Application.java上添加注解@ServletComponentScan</strong>进行启动扫描包的方式进行处理的。</p>
<ul>
<li>配置servlet</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger.servlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</div><div class="line"></div><div class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/druid/*"</span>,</div><div class="line">        initParams = &#123;</div><div class="line">                <span class="comment">// IP白名单, 没有配置则允许所有访问</span></div><div class="line">                <span class="comment">// @WebInitParam(name = "allow", value = "192.168.1.72,192.168.1.73"),</span></div><div class="line">                <span class="comment">// IP黑名单, 存在时deny优先于allow</span></div><div class="line">                <span class="comment">// @WebInitParam(name = "deny", value = "192.168.1.71"),</span></div><div class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"loginUsername"</span>, value = <span class="string">"admin"</span>),</div><div class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"loginPassword"</span>, value = <span class="string">"admin"</span>)</div><div class="line">        &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidStatViewServlet</span> <span class="keyword">extends</span> <span class="title">StatViewServlet</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>配置filter</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger.filter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</div><div class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</div><div class="line"></div><div class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"druidWebStatFilter"</span>,</div><div class="line">        urlPatterns = <span class="string">"/*"</span>,</div><div class="line">        initParams = &#123;</div><div class="line">                <span class="comment">// 配置忽略资源</span></div><div class="line">                <span class="meta">@WebInitParam</span>(name = <span class="string">"exclusions"</span>, value = <span class="string">"*.js, *.css, *.jpg"</span>)</div><div class="line">        &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidStatFilter</span> <span class="keyword">extends</span> <span class="title">WebStatFilter</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>Application.java上添加@ServletComponentScan注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletComponentScan;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="comment">// @ServletComponentScan是的spring能够扫描到自己编写的servlet和filter</span></div><div class="line"><span class="meta">@ServletComponentScan</span>(basePackages = &#123;<span class="string">"com.roger.servlet"</span>,<span class="string">"com.roger.filter"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(DemoApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>访问：<a href="http://localhost/druid/index.html" target="_blank" rel="external">http://localhost/druid/index.html</a></p>
</blockquote>
<h2 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h2><p>使用代码注册servlet, filter。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.roger.config;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.StatViewServlet;</div><div class="line"><span class="keyword">import</span> com.alibaba.druid.support.http.WebStatFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * druid监控配置方式二</div><div class="line"> */</div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册一个StatViewServlet</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">DruidStatViewServlet2</span><span class="params">()</span></span>&#123;</div><div class="line">        ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid2/*"</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 添加初始化参数: initParams</span></div><div class="line"></div><div class="line">        <span class="comment">// IP白名单</span></div><div class="line">        <span class="comment">// servletRegistrationBean.addInitParameter("allow", "");</span></div><div class="line">        <span class="comment">// IP黑名单</span></div><div class="line">        <span class="comment">// servletRegistrationBean.addInitParameter("deny", "");</span></div><div class="line">        <span class="comment">// 登录查看信息的账号密码</span></div><div class="line">        servletRegistrationBean.addInitParameter(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</div><div class="line">        servletRegistrationBean.addInitParameter(<span class="string">"loginPassword"</span>, <span class="string">"admin"</span>);</div><div class="line">        <span class="comment">// 是否能够重置数据</span></div><div class="line">        <span class="comment">// servletRegistrationBean.addInitParameter("resetEnabled", "false");</span></div><div class="line">        <span class="keyword">return</span> servletRegistrationBean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 注册一个StatFilter</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">druidStatFilter2</span><span class="params">()</span></span>&#123;</div><div class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> WebStatFilter());</div><div class="line">        <span class="comment">// 添加过滤规则</span></div><div class="line">        filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</div><div class="line">        <span class="comment">// 添加忽略的格式信息</span></div><div class="line">        filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.css,*.jpg"</span>);</div><div class="line">        <span class="keyword">return</span> filterRegistrationBean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>访问：<a href="http://localhost/druid2/index.html" target="_blank" rel="external">http://localhost/druid2/index.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spring: IoC原理]]></title>
      <url>https://rogerfang.github.io/2016/11/15/Spring-IoC%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="IoC控制反转"><a href="#IoC控制反转" class="headerlink" title="IoC控制反转"></a>IoC控制反转</h1><p>&emsp;&emsp;1996年，Michael Mattson在一篇有关探讨面向对象框架的文章中，首先提出了IOC(Inversion of Control)这个概念。IOC理论提出的观点：借助于“第三方”实现具有依赖关系的对象之间的解耦。全部对象的控制权全部上缴给“第三方”IOC容器，所以，IOC容器成了整个系统的关键核心，它起到了一种类似“粘合剂”的作用，把系统中的所有对象粘合在一起发挥作用。</p>
<blockquote>
<p>控制反转为了解决<strong>对象之间耦合度过高</strong>的问题。</p>
</blockquote>
<p>&emsp;&emsp;<strong>控制权的转移</strong>：应用程序本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护。</p>
<p>&emsp;&emsp;假设对象A依赖于对象B，那么对象A在初始化或者运行到某一点的时候，自己必须主动去创建对象B或者使用已经创建的对象B。无论是创建还是使用对象B，控制权都在自己手上。由于IOC容器的加入，对象A与对象B之间失去了直接联系，所以，当对象A运行到需要对象B的时候，IOC容器会主动创建一个对象B注入到对象A需要的地方。</p>
<h1 id="DI依赖注入"><a href="#DI依赖注入" class="headerlink" title="DI依赖注入"></a>DI依赖注入</h1><p>&emsp;&emsp;2004年，Martin Fowler探讨了同一个问题，既然IOC是控制反转，那么到底是“哪些方面的控制被反转了呢？”，经过详细地分析和论证后，他得出了答案：“获得依赖对象的过程被反转了”。控制被反转之后，获得依赖对象的过程由自身管理变为了由IOC容器主动注入。于是，他给“控制反转”取了一个更合适的名字叫做“依赖注入（Dependency Injection）”。他的这个答案，实际上给出了实现IOC的方法：注入。所谓依赖注入，就是由IOC容器在运行期间，动态地将某种依赖关系注入到对象之中。</p>
<p>&emsp;&emsp;DI依赖注入是IoC的一种实现方式，用来反转依赖（IoC的具体实现方式），就是将依赖对象的创建和绑定转移到被依赖对象类的外部来实现，创建对象并且组装对象之间的关系。<br>&emsp;&emsp;依赖对象A不创建被依赖对象B，但是在对象A中描述创建对象B的方式（setter或构造器）。在代码中不直接与被依赖的对象和服务连接，可以在配置文件中描述哪一个组件需要哪一项服务。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(36): 图- 最小生成树Prim]]></title>
      <url>https://rogerfang.github.io/2016/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-36-%E5%9B%BE-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91Prim/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;Kruskal算法是一步步将森林中的树进行合并；而Prim算法是通过每次增加一条边来建立一棵树。</p>
<p>&emsp;&emsp;Prim算法基本思想：首先选择任意一个顶点，从该顶点开始构造生成树；接下来要找出一条边添加到生成树，这需要枚举每一个树顶点到每一个非树顶点的所有边，然后找到最短边加入到生成树。重复以上步骤，直到所有顶点都加入到生成树中。</p>
<p><strong>难点</strong>：如何找出下一个添加到树的边。</p>
<p><strong>优化</strong>：使用邻接矩阵的时间复杂度$O(N^2)$，如果借助堆，每次选边的时间复杂度是$O(\log{E})$，然后用邻接表来存储图的话，整个算法的时间复杂度会降到$O(E\log{V})$。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prim</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> vlen = <span class="number">7</span>;</div><div class="line">        <span class="keyword">int</span>[][] edges = &#123;&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">11</span>&#125;,&#123;<span class="number">2</span>,<span class="number">4</span>,<span class="number">13</span>&#125;,&#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>&#125;,&#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>&#125;&#125;;</div><div class="line">        <span class="keyword">int</span>[][] e = <span class="keyword">new</span> <span class="keyword">int</span>[vlen][vlen];</div><div class="line">        <span class="keyword">int</span>[] dis = <span class="keyword">new</span> <span class="keyword">int</span>[vlen];</div><div class="line">        <span class="keyword">int</span> inf = <span class="number">9999</span>;</div><div class="line">        <span class="keyword">boolean</span>[] book = <span class="keyword">new</span> <span class="keyword">boolean</span>[vlen];</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 初始化</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vlen; j++)&#123;</div><div class="line">                <span class="keyword">if</span> (i == j)&#123;</div><div class="line">                    e[i][j] = <span class="number">0</span>;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    e[i][j] = inf;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 读入边</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edges.length; i++)&#123;</div><div class="line">            e[edges[i][<span class="number">0</span>]][edges[i][<span class="number">1</span>]] = edges[i][<span class="number">2</span>];</div><div class="line">            <span class="comment">// 无向图, 所以邻接矩阵将边反向再存储一遍</span></div><div class="line">            e[edges[i][<span class="number">1</span>]][edges[i][<span class="number">0</span>]] = edges[i][<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 首先选择第一个顶点0加入生成树, 并初始化dis数组</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen; i++)&#123;</div><div class="line">            dis[i] = e[<span class="number">0</span>][i];</div><div class="line">            book[i] = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        book[<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line">        count++;</div><div class="line"></div><div class="line">        <span class="comment">// Prim算法核心</span></div><div class="line">        <span class="keyword">while</span> (count &lt; vlen)&#123;</div><div class="line">            <span class="keyword">int</span> min = inf;</div><div class="line">            <span class="keyword">int</span> minIndex = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen; i++)&#123;</div><div class="line">                <span class="keyword">if</span> (!book[i] &amp;&amp; dis[i] &lt; min)&#123;</div><div class="line">                    min = dis[i];</div><div class="line">                    minIndex = i;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            book[minIndex] = <span class="keyword">true</span>;</div><div class="line">            count++;</div><div class="line">            sum += dis[minIndex];</div><div class="line"></div><div class="line">            <span class="comment">// 再以minIndex为中间点, 扫描minIndex顶点的所有边, 更新生成树到每一个非树顶点的距离</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; vlen; k++)&#123;</div><div class="line">                <span class="keyword">if</span> (!book[k] &amp;&amp; dis[k] &gt; e[minIndex][k])&#123;</div><div class="line">                    dis[k] = e[minIndex][k];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"sum= "</span> + sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(35): 图- 最小生成树Kruskal]]></title>
      <url>https://rogerfang.github.io/2016/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-35-%E5%9B%BE-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91Kruskal/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最小生成树：在含有n个顶点的连通图中选择n-1条边，构成一棵极小连通子图，并使该连通子图中n-1条边上权值之和达到最小，则称其为连通图的最小生成树。</p>
</blockquote>
<p>&emsp;&emsp;Kruskal算法基本思想：首先按照边的权值进行从小到大排序，每次从剩余的边中选择权值较小的且边的两个顶点不在同一个集合内的边（就是不会产生回路），加入到生成树中，直到加入了n-1条边为止。<br>&emsp;&emsp;判断两个顶点是否已连通可以利用深度优先或广度优先搜索，但是效率低，可以采用并查集来解决。<br>&emsp;&emsp;Kruskal算法中，对边进行快速排序的复杂度是$O(E\log{E})$，在E条边中找出V-1条边的复杂度是$O(E\log{V})$，所以Kruskal算法的复杂度是$O(E\log{(E+V)})$。通常边数E大于顶点数V，最终时间复杂度为$O(E\log{E})$。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kruskal</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(List&lt;Edge&gt; a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (low &gt;= high) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> i = low;</div><div class="line">        <span class="keyword">int</span> j = high;</div><div class="line">        Edge tmp = a.get(low);</div><div class="line">        <span class="keyword">while</span> (i != j) &#123;</div><div class="line">            <span class="comment">// 顺序很重要, 先从右往左找</span></div><div class="line">            <span class="keyword">while</span> (a.get(j).compareTo(tmp) &gt;= <span class="number">0</span> &amp;&amp; i &lt; j) &#123;</div><div class="line">                j--;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 再从左往右找</span></div><div class="line">            <span class="keyword">while</span> (a.get(i).compareTo(tmp) &lt;= <span class="number">0</span> &amp;&amp; i &lt; j) &#123;</div><div class="line">                i++;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 交换两个数在数组中的位置</span></div><div class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</div><div class="line">                Edge t = a.get(i);</div><div class="line">                a.set(i, a.get(j));</div><div class="line">                a.set(j, t);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 基准数归位</span></div><div class="line">        a.set(low, a.get(i));</div><div class="line">        a.set(i, tmp);</div><div class="line"></div><div class="line">        quicksort(a, low, i - <span class="number">1</span>);</div><div class="line">        quicksort(a, i + <span class="number">1</span>, high);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Edge</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> v1;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> v2;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> weight;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2, <span class="keyword">int</span> weight)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.v1 = v1;</div><div class="line">            <span class="keyword">this</span>.v2 = v2;</div><div class="line">            <span class="keyword">this</span>.weight = weight;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Edge o)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> weight - o.weight;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> vlen = <span class="number">6</span>;</div><div class="line">        <span class="keyword">int</span> elen = <span class="number">9</span>;</div><div class="line"></div><div class="line">        List&lt;Edge&gt; edges = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        edges.add(<span class="keyword">new</span> Edge(<span class="number">1</span>, <span class="number">3</span>, <span class="number">11</span>));</div><div class="line">        edges.add(<span class="keyword">new</span> Edge(<span class="number">2</span>, <span class="number">4</span>, <span class="number">13</span>));</div><div class="line">        edges.add(<span class="keyword">new</span> Edge(<span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>));</div><div class="line">        edges.add(<span class="keyword">new</span> Edge(<span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>));</div><div class="line">        edges.add(<span class="keyword">new</span> Edge(<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>));</div><div class="line">        edges.add(<span class="keyword">new</span> Edge(<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>));</div><div class="line">        edges.add(<span class="keyword">new</span> Edge(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">        edges.add(<span class="keyword">new</span> Edge(<span class="number">2</span>, <span class="number">3</span>, <span class="number">9</span>));</div><div class="line">        edges.add(<span class="keyword">new</span> Edge(<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>));</div><div class="line">        <span class="comment">// 对边进行快排</span></div><div class="line">        quicksort(edges, <span class="number">0</span>, edges.size() - <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Edge edge: edges)&#123;</div><div class="line">            System.out.println(edge.weight);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 最小生成树的边数</span></div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 最小生成树的权重和</span></div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line"></div><div class="line">        DisjointSet disjointSet = <span class="keyword">new</span> DisjointSet(vlen);</div><div class="line"></div><div class="line">        <span class="comment">// Kruskal算法核心</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elen; i++)&#123;</div><div class="line">            <span class="comment">// 判断顶点v1, v2是否尚未连通</span></div><div class="line">            <span class="keyword">if</span> (disjointSet.union(edges.get(i).v1, edges.get(i).v2))&#123;</div><div class="line">                count++;</div><div class="line">                sum += edges.get(i).weight;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (count == vlen - <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"sum= "</span> + sum);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(34): 不相交集（并查集）]]></title>
      <url>https://rogerfang.github.io/2016/11/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-34-%E4%B8%8D%E7%9B%B8%E4%BA%A4%E9%9B%86%EF%BC%88%E5%B9%B6%E6%9F%A5%E9%9B%86%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>&emsp;&emsp;不相交集（Disjoint-set）也称并查集（Union-find set），对于n个不同且不相交元素， 不相交集为支持以下两种操作的数据结构。</p>
<ul>
<li>找出给定元素所属的集合</li>
<li>合并两个集合</li>
</ul>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>不相交集的操作：</p>
<ul>
<li>MAKE-SET(x)：建立一个有唯一元素x的集合，并且x不在其他集合中。</li>
<li>UNION(x,y)：合并x和y所在的集合，x和y所在的原集合都不再存在，产生一个合并后的新集合。<blockquote>
<p>合并两个不相交集合比较简单的方法就是，找到其中一个集合根节点，将另外一个集合的根节点指向它。</p>
</blockquote>
</li>
<li>FIND-SET(x)：返回包含x的集合。<blockquote>
<p>查找集合时，一般采用递归查找得到集合的根节点。</p>
</blockquote>
</li>
</ul>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h2><p>&emsp;&emsp;FIND-SET(x)：采用递归查找时，整棵树可能变为一条链，这时每次查找都是$O(n)$的复杂度。<br>&emsp;&emsp;为了避免这种情况，需要对路径进行压缩，即当经过“递归”找到祖先节点后，在“回溯”的时候顺便将它的子孙节点直接指向祖先，这样以后每次查找操作的复杂度都变成了$O(1)$。</p>
<h2 id="合并优化"><a href="#合并优化" class="headerlink" title="合并优化"></a>合并优化</h2><p>&emsp;&emsp;合并的时候将元素少的集合合并到元素多的集合中，这样合并之后树的高度会相对较小。</p>
<ul>
<li>按大小合并<br>使得较小的树成为较大的树的子树。</li>
<li>按高度合并<br>使得较浅的树成为较深的树的子树。</li>
<li>按秩合并<br>路径压缩不完全与按高度求并兼容，因为路径压缩可以改变树的高度。按秩合并就是对每棵树存储的高度是其估计高度（称为秩），也就是按高度合并的时候不去重新计算树的高度。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 不相交集</div><div class="line"> * 路径压缩和按秩合并：m次union/find操作复杂度最坏为：O(mlog(n))</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisjointSet</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] s;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DisjointSet</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">        s = <span class="keyword">new</span> <span class="keyword">int</span>[size];</div><div class="line">        <span class="comment">// 初始化，让每个根的数组元素存储它的树的秩的负值(这样就不需要额外的存储空间来存储秩rank)</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)&#123;</div><div class="line">            s[i] = -<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用路径压缩进行查找优化</div><div class="line">     * <span class="doctag">@param</span> x</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (s[x] &lt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> x;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> s[x] = find(s[x]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 按秩合并</div><div class="line">     * <span class="doctag">@param</span> x</div><div class="line">     * <span class="doctag">@param</span> y</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> root1 = find(x);</div><div class="line">        <span class="keyword">int</span> root2 = find(y);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (root1 != root2)&#123;</div><div class="line">            <span class="keyword">if</span> (s[root1] &lt; s[root2])&#123;</div><div class="line">                <span class="comment">// root1的秩大, 将秩小的树合并到秩大的树的子树中</span></div><div class="line">                s[root2] = root1;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (s[root1] == s[root2])&#123;</div><div class="line">                    <span class="comment">// 两个数的秩一样时,增加合并后的树的秩</span></div><div class="line">                    s[root2]--;</div><div class="line">                &#125;</div><div class="line">                s[root1] = root2;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: s)&#123;</div><div class="line">            System.out.print(i + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(33): 图- 最短路径(解决负权边)Bellman-Ford]]></title>
      <url>https://rogerfang.github.io/2016/11/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-33-%E5%9B%BE-%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-%E8%A7%A3%E5%86%B3%E8%B4%9F%E6%9D%83%E8%BE%B9-Bellman-Ford/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Dijkstra算法虽然好，但是不能解决带负权边的图。</p>
</blockquote>
<p>&emsp;&emsp;想想Floyd-Warshall和Dijkstra算法，它们都是基于这样的事实：求两点之间的最短路径，看能否可以在路径中<strong>添加k个顶点</strong>来缩短路径。Dijkstra则是通过对dis数组进行V(顶点个数)轮松弛，得到单源最短路径。<br>&emsp;&emsp;而Bellman-Ford算法求最短路径是基于这样的事实：求两点之间的最短路径，看能否可以在路径中通过<strong>添加k条边</strong>来缩短路径。Bellman-Ford则是通过对dis数组进行E(边个数)轮松弛，得到单源最短路径。</p>
<blockquote>
<p>Bellman-Ford算法可以用于检测是否有负权回路。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 单源最短路径：解决负权边</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BellmanFord</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] edges = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, -<span class="number">3</span>&#125;&#125;;</div><div class="line">        <span class="keyword">int</span> vlen = <span class="number">4</span>;</div><div class="line">        <span class="keyword">int</span> elen = edges.length;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> inf = <span class="number">9999</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 存储起点到个顶点的最短路程的“估计值”</span></div><div class="line">        <span class="keyword">int</span>[] dis = <span class="keyword">new</span> <span class="keyword">int</span>[vlen];</div><div class="line"></div><div class="line">        <span class="comment">// 初始化dis, 起始顶点为0号顶点; 初始化booked数组</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen; i++)&#123;</div><div class="line">            dis[i] = inf;</div><div class="line">        &#125;</div><div class="line">        dis[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// Bellman-Ford算法核心语句</span></div><div class="line">        <span class="comment">// 进行k轮松弛，最多经过vlen-1条边求得最短路径</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; vlen - <span class="number">1</span>; k++)&#123;</div><div class="line">            <span class="comment">// 用来标记本轮松弛中数组dis是否发生更新</span></div><div class="line">            <span class="keyword">boolean</span> check = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elen; i++)&#123;</div><div class="line">                <span class="keyword">if</span> (dis[edges[i][<span class="number">1</span>]] &gt; dis[edges[i][<span class="number">0</span>]] + edges[i][<span class="number">2</span>])&#123;</div><div class="line">                    dis[edges[i][<span class="number">1</span>]] = dis[edges[i][<span class="number">0</span>]] + edges[i][<span class="number">2</span>];</div><div class="line">                    check = <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 实际操作中，常会在未到达vlen-1轮松弛前就已经计算出最短路径</span></div><div class="line">            <span class="keyword">if</span> (!check) <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 检测负权回路: 再进行一次松弛, 如果还可以松弛则存在负权回路</span></div><div class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elen; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (dis[edges[i][<span class="number">1</span>]] &gt; dis[edges[i][<span class="number">0</span>]] + edges[i][<span class="number">2</span>])&#123;</div><div class="line">                flag = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (flag)&#123;</div><div class="line">            System.out.println(<span class="string">"此图含有负权回路"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 输出结果</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d: dis)&#123;</div><div class="line">                System.out.print(d + <span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Bellman-Ford算法的队列优化：在每实施一次松弛操作后，就会有一些顶点已经求得最短路径，此后这些顶点的最短路径也不会变，这在后续松弛操作上浪费了时间，因而可以在每次松弛操作后，仅对最短路径估计值发生了变化的顶点的所有出边进行松弛操作。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(32): 图- 单源最短路径Dijkstra]]></title>
      <url>https://rogerfang.github.io/2016/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-32-%E5%9B%BE-%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84Dijkstra/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;迪杰斯特拉(Dijkstra)算法是典型最短路径算法，用于计算一个节点到其他节点的最短路径。它的主要特点是以起始点为中心向外层层扩展(广度优先搜索思想)，直到扩展到终点为止。<br>&emsp;&emsp;Dijkstra算法每次找到离源点最近的一个顶点，然后以该顶点为中心进行扩展，最终得到源点到其余所有点的最短路径。</p>
<p>算法的<strong>基本思想</strong>：</p>
<ol>
<li>通过Dijkstra计算图G中的最短路径时，需要指定起点s(即从顶点s开始计算)。</li>
<li>此外，引进两个集合S和U。S的作用是记录已求出最短路径的顶点(以及相应的最短路径长度)，而U则是记录还未求出最短路径的顶点(以及该顶点到起点s的距离)。</li>
<li>初始时，S中只有起点s；U中是除s之外的顶点，并且U中顶点的路径是”起点s到该顶点的路径”。<br>3.1. 然后，从U中找出路径最短的顶点k，并将其加入到S中；<br>3.2. 接着，利用3.1中选出的顶点k更新U中的顶点和顶点对应的路径，例如(s,v)的距离可能大于(s,k)+(k,v)的距离；<br>3.3. 重复3.1~3.2操作，直到遍历完所有顶点。</li>
</ol>
<blockquote>
<p>使用邻接矩阵实现的时间复杂度为$O(V^2)$，使用邻接表实现的复杂度为$O(E+V)\log{V}$</p>
</blockquote>
<p><strong>缺点</strong>：Dijkstra算法求最短路径的图是<strong>不能有负权边</strong>的，因为扩展到负权边的时候会产生更短的路程，有可能就破坏了已经更新的点路程不会改变的性质。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dijkstra</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] edges = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>&#125;&#125;;</div><div class="line">        <span class="keyword">int</span> vlen = <span class="number">4</span>;</div><div class="line">        <span class="keyword">int</span> elen = edges.length;</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[][] e = <span class="keyword">new</span> <span class="keyword">int</span>[vlen][vlen];</div><div class="line">        <span class="keyword">int</span> inf = <span class="number">9999</span>;</div><div class="line"></div><div class="line">        <span class="comment">// true: 已知起点到该点的最短路径; false: 未知起点到该点的最短路径</span></div><div class="line">        <span class="keyword">boolean</span>[] booked = <span class="keyword">new</span> <span class="keyword">boolean</span>[vlen];</div><div class="line"></div><div class="line">        <span class="comment">// 存储起点到个顶点的最短路程的“估计值”</span></div><div class="line">        <span class="keyword">int</span>[] dis = <span class="keyword">new</span> <span class="keyword">int</span>[vlen];</div><div class="line"></div><div class="line">        <span class="comment">// 初始化 边的权重矩阵</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vlen; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (i == j)&#123;</div><div class="line">                    e[i][j] = <span class="number">0</span>;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    e[i][j] = inf;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 读入边</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elen; i++)&#123;</div><div class="line">            e[edges[i][<span class="number">0</span>]][edges[i][<span class="number">1</span>]] = edges[i][<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 初始化dis, 起始顶点为0号顶点; 初始化booked数组</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen; i++)&#123;</div><div class="line">            dis[i] = e[<span class="number">0</span>][i];</div><div class="line">            booked[i] = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        booked[<span class="number">0</span>] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// Dijkstra算法核心语句</span></div><div class="line">        <span class="comment">// 除去起点, 需要确定n-1个顶点到起点的最短路径</span></div><div class="line">        <span class="keyword">int</span> u = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen - <span class="number">1</span>; i ++)&#123;</div><div class="line">            <span class="keyword">int</span> min = inf;</div><div class="line">            <span class="comment">// 找到离起点最近的顶点</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vlen; j++)&#123;</div><div class="line">                <span class="keyword">if</span> (!booked[j] &amp;&amp; dis[j] &lt; min)&#123;</div><div class="line">                    min = dis[j];</div><div class="line">                    u = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 标记"顶点u"为已经获取到最短路径</span></div><div class="line">            booked[u] = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 修正dis</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vlen; v++)&#123;</div><div class="line">                <span class="keyword">if</span> (dis[v] &gt; dis[u] + e[u][v])&#123;</div><div class="line">                    dis[v] = dis[u] + e[u][v];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 输出结果</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> d: dis)&#123;</div><div class="line">            System.out.print(d + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0 2 5 4</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(31): 图- 多源最短路径Floyd-Warshall]]></title>
      <url>https://rogerfang.github.io/2016/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-31-%E5%9B%BE-%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84Floyd-Warshall/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;Floyd-Warshall 算法采用动态规划方案来解决在一个<strong>有向图</strong> G = (V, E) 上每对顶点间的最短路径问题，即全源最短路径问题（All-Pairs Shortest Paths Problem），其中图G允许存在权值为负的边，但不存在权值为负的回路。Floyd-Warshall 算法的时间复杂度为$O(V^3)$。</p>
<p>&emsp;&emsp;算法的<strong>基本思想</strong>：求两个顶点间的最短路径，允许经过一个或多个顶点进行中转。例如，最开始只允许经过1号顶点进行中转，接下来只允许经过1号和2号顶点进行中转······允许经过1~n号所有顶点进行中转，求得任意两点之间的最短路径。</p>
<blockquote>
<p>一句话概括：从i号顶点到j号顶点只经过前k号点的最短路径。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FloydWarshall</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[][] edges = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">6</span>&#125;, &#123;<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">2</span>, <span class="number">0</span>, <span class="number">7</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>&#125;, &#123;<span class="number">3</span>, <span class="number">0</span>, <span class="number">5</span>&#125;, &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>&#125;&#125;;</div><div class="line">        <span class="keyword">int</span> vlen = <span class="number">4</span>;</div><div class="line">        <span class="keyword">int</span> elen = edges.length;</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[][] e = <span class="keyword">new</span> <span class="keyword">int</span>[vlen][vlen];</div><div class="line">        <span class="keyword">int</span> inf = <span class="number">1000</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 初始化 边的权重矩阵</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen; i++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vlen; j++) &#123;</div><div class="line">                <span class="keyword">if</span> (i == j)&#123;</div><div class="line">                    e[i][j] = <span class="number">0</span>;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    e[i][j] = inf;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 读入边</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; elen; i++)&#123;</div><div class="line">            e[edges[i][<span class="number">0</span>]][edges[i][<span class="number">1</span>]] = edges[i][<span class="number">2</span>];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Floyd-Warshall算法核心语句</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; vlen; k++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen; i++)&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vlen; j++)&#123;</div><div class="line">                    <span class="keyword">if</span> (e[i][j] &gt; e[i][k]+e[k][j])&#123;</div><div class="line">                        e[i][j] = e[i][k] + e[k][j];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 输出结果</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vlen; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vlen; j++)&#123;</div><div class="line">                System.out.print(e[i][j] + <span class="string">" "</span>);</div><div class="line">            &#125;</div><div class="line">            System.out.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0 2 5 4</div><div class="line">9 0 3 4</div><div class="line">6 8 0 1</div><div class="line">5 7 10 0</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(30): 图- 广度优先搜索(BFS)]]></title>
      <url>https://rogerfang.github.io/2016/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-30-%E5%9B%BE-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-BFS/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;从图中某顶点v出发，在访问了v之后依次访问v的各个未曾访问过的邻接点，然后分别从这些邻接点出发依次访问它们的邻接点，并使得“先被访问的顶点的邻接点先于后被访问的顶点的邻接点被访问，直至图中所有已被访问的顶点的邻接点都被访问到。如果此时图中尚有顶点未被访问，则需要另选一个未曾被访问过的顶点作为新的起始点，重复上述过程，直至图中所有顶点都被访问到为止。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(29): 图- 深度优先搜索(DFS)]]></title>
      <url>https://rogerfang.github.io/2016/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-29-%E5%9B%BE-%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2-DFS/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;假设初始状态是图中所有顶点均未被访问，则从某个顶点v出发，首先访问该顶点，然后依次从它的各个未被访问的邻接点出发深度优先搜索遍历图，直至图中所有和v有路径相通的顶点都被访问到。 若此时尚有其他顶点未被访问到，则另选一个未被访问的顶点作起始点，重复上述过程，直至图中所有顶点都被访问到为止。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(28): 图- 拓扑排序]]></title>
      <url>https://rogerfang.github.io/2016/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-28-%E5%9B%BE-%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>&emsp;&emsp;拓扑排序(Topological Order)是指：将一个有向无环图(Directed Acyclic Graph, DAG)进行排序而得到一个有序的线性序列。拓扑排序不必是唯一的，任何合理的排序都是可以的。</p>
<h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><ol>
<li>构造一个队列Q和拓扑排序的结果队列T；</li>
<li>把所有没有依赖顶点的节点放入Q；</li>
<li>当Q还有顶点的时候<br> 3.1. 从Q中取出一个顶点i（将i从Q中删除），并放入T；<br> 3.2. 对顶点i的每一个邻接点j（i是起点，j是终点），去掉边(i, j)，如果j没有依赖顶点，则把j放入Q。</li>
</ol>
<blockquote>
<p>注：顶点j没有依赖顶点，是指不存在以j为终点的边。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(27): 图- 理论基础]]></title>
      <url>https://rogerfang.github.io/2016/11/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-27-%E5%9B%BE-%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote>
<p>一个图(graph)G=(V, E)由顶点(vertex)的集V和边(edge)的的集E组成。</p>
</blockquote>
<ol>
<li><p>无向图<br>无向图所有的边都是不区分方向的。</p>
</li>
<li><p>有向图<br>有向图所有的边都是有方向的。</p>
</li>
</ol>
<ul>
<li><strong>邻接</strong>：顶点w和顶点v邻接当且仅当$(v, w) \in E$。</li>
<li><strong>度</strong>：在无向图中，顶点的度是邻接到该顶点的边的数目。在有向图中，入度是指以该顶点为终点的边的数目；出度是指以该顶点为起点的边的数目。</li>
<li><strong>路径</strong>：如果顶点w到顶点v之间存在一个顶点序列，则表示w到v的一条路径。</li>
<li><strong>简单路径</strong>：路径上所有的顶点都是互异的，但第一个顶点和最后一个顶点可能相同。</li>
<li><strong>路径的长度</strong>：路径中边的数量。</li>
<li><strong>回路</strong>：路径的第一个顶点和最后一个顶点相同。</li>
<li><strong>简单回路</strong>：路径的第一个顶点和最后一个顶点相同，但是其他各顶点不重复。</li>
<li><strong>连通图</strong>：在无向图中，任意两个顶点之间存在一条无向路径，则该无向图为<strong>连通图</strong>。在有向图中，任意两个顶点之间存在一条有向路径，则该有向图为<strong>强连通图</strong>。如果一个有向图不是强连通的，但是它的基础图，即去边上去掉方向所形成的图，是连通的，则该有向图为<strong>弱连通图</strong>。</li>
<li><strong>完全图</strong>：图中每一对顶点都存在一条边。</li>
<li><strong>连通分量</strong>：非连通图中的各个连通子图称为该图的连通分量。</li>
<li><strong>权</strong>：图中边的权值。</li>
</ul>
<h1 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h1><h2 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h2><p>邻接矩阵是指用矩阵来表示图，采用矩阵来描述途中顶点之间的关系。<br>邻接矩阵定义为：<br>$$ A[i][j]= \begin{cases} 1, &amp; \text {顶点i和顶点j之间有边存在} \\ 0, &amp; \text {顶点i和顶点j之间没有边存在} \end{cases} $$</p>
<h2 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h2><p>邻接表示图的一种链式存储表示方法，对每个顶点，使用一个表存放所有邻接的顶点。缺点是不方便判断两个顶点之间是否有边，但是相对邻接矩阵来说更省空间。</p>
<blockquote>
<p>有向图的邻接表易于计算顶点的出度，逆邻接表易于计算顶点的入度。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(26): 散列]]></title>
      <url>https://rogerfang.github.io/2016/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-26-%E6%95%A3%E5%88%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>散列是一种用于以常数平均时间执行插入、删除和查找的技术。</p>
</blockquote>
<p>散列表(Hash Table)就是一种以<strong>键-值</strong>存储数据的结构。</p>
<p>使用哈希查找有两个步骤:<br>&emsp;&emsp;1. 使用散列函数将被查找的键转换为存储单元的索引。在理想的情况下，不同的键会被转换为不同的索引值，但是在有些情况下多个键被散列到同一个索引值，所以第二个步骤就是处理冲突。<br>&emsp;&emsp;2. 处理散列碰撞冲突。拉链法（分离链接法）和线性探测法（开放定址法）。</p>
<h1 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h1><p>&emsp;&emsp;散列函数将键映射成存储单元的索引。如果我们有一个保存0-M数组，那么我们就需要一个能够将任意键转换为该数组范围内的索引（0~M-1）的哈希函数。散列函数需要易于计算并且能够均匀分布所有键。</p>
<ol>
<li><p>整数<br>获取整数的哈希值一般使用除留余数法。即大小为素数M的数组，对于任意整数K，计算K除以M的余数。</p>
<blockquote>
<p>表的大小M取素数，使得可以充分利用键中所包含的信息，从而均匀的散列哈希值。<br>例如：如果键是十进制而M为$10^k$，使用除留余数法则只能利用键的后k位。</p>
</blockquote>
</li>
<li><p>字符串<br>将字符串作为键的时候，也可以将它作为一个大的整数，采用保留除余法。可以将组成字符串的每一个字符取值然后进行散列。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(String s)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> hash = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++&#123;</div><div class="line">    	hash = s[i] + <span class="number">31</span> * hash;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> hash;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h1><h2 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a>拉链法</h2><blockquote>
<p>拉链法：将大小为M的数组的每一个元素指向一个条链表，链表中的每一个节点都存储散列值为该索引的键值对。</p>
</blockquote>
<p>该方法的基本思想就是选择足够大的M，使得所有的链表都尽可能的短小，以保证查找的效率。</p>
<h2 id="线性探测法"><a href="#线性探测法" class="headerlink" title="线性探测法"></a>线性探测法</h2><blockquote>
<p>线性探测法：使用大小为M的数组来保存N个键值对，其中M&gt;N，我们需要使用数组中的空位解决碰撞冲突。</p>
</blockquote>
<p>开放寻址法中最简单的是线性探测法：当碰撞发生时即一个键的散列值被另外一个键占用时，直接检查散列表中的下一个位置即将索引值加1，这样的线性探测会出现三种结果：</p>
<ul>
<li>命中，该位置的键和被查找的键相同；</li>
<li>未命中，键为空；</li>
<li>继续查找，该位置和键被查找的键不同。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(25): 排序- 外部排序]]></title>
      <url>https://rogerfang.github.io/2016/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-25-%E6%8E%92%E5%BA%8F-%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;外部排序指的是大文件的排序，即待排序的记录存储在外存储器上，待排序的文件无法一次装入内存，需要在内存和外部存储器之间进行多次数据交换，以达到排序整个文件的目的。外部排序最常用的算法是多路归并排序，即将原文件分解成多个能够一次性装入内存的部分，分别把每一部分调入内存完成排序。然后，对已经排序的子文件进行多路归并排序。</p>
<p>&emsp;&emsp;大部分内部排序算法都用到内存可直接寻址的事实。如果输入数据再磁盘上，那么所有这些操作都失去了它们的效率，因为磁带上的元素只能被顺序访问。<br>&emsp;&emsp;外排序通常采用的是一种“排序-归并”的策略。在排序阶段，先读入能放在内存中的数据量，将其排序输出到一个临时文件，依次进行，将待排序数据组织为多个有序的临时文件。而后在归并阶段将这些个临时文件组合成一个大的有序文件，也即排序结果。</p>
<p>感谢：<a href="http://noteton.com/u/%E5%85%94%E7%88%B7%E7%88%B1%E5%90%83%E7%82%B8%E9%85%B1%E9%9D%A2/684/external-sorting" target="_blank" rel="external">http://noteton.com/u/%E5%85%94%E7%88%B7%E7%88%B1%E5%90%83%E7%82%B8%E9%85%B1%E9%9D%A2/684/external-sorting</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(24): 排序- 桶排序]]></title>
      <url>https://rogerfang.github.io/2016/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-24-%E6%8E%92%E5%BA%8F-%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;桶排序(Bucket Sort)的原理很简单，它是将数组分到有限数量的桶子里。</p>
<p>&emsp;&emsp;假设待排序的数组a中共有N个整数，并且已知数组a中数据的范围[0, MAX)。在桶排序时，创建容量为MAX的桶数组r，并将桶数组元素都初始化为0；将容量为MAX的桶数组中的每一个单元都看作一个”桶”。<br>&emsp;&emsp;在排序时，逐个遍历数组a，将数组a的值，作为”桶数组r”的下标。当a中数据被读取时，就将桶的值加1。例如，读取到数组a[3]=5，则将r[5]的值+1。</p>
<p>感谢:<a href="http://www.cnblogs.com/skywang12345/p/3602737.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3602737.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(23): 排序- 快速排序]]></title>
      <url>https://rogerfang.github.io/2016/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-23-%E6%8E%92%E5%BA%8F-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;快速排序的<strong>基本思想</strong>：选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程递归进行，以达到有序序列。</p>
<blockquote>
<p>快速排序的每一轮处理其实就是将一轮的基准数归位。</p>
</blockquote>
<p>&emsp;&emsp;时间<strong>复杂度</strong>：O($N\log{N}$)。<br>&emsp;&emsp;快速排序是<strong>不稳定</strong>的。</p>
<blockquote>
<p><strong>partition</strong>函数用来解决这样一个问题：给定一个数组data[]和数组中任意一个元素a，重排数组使得a左边都小于它，右边都不小于它。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] data1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</div><div class="line">        <span class="keyword">int</span>[] data2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">8</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>&#125;;</div><div class="line"></div><div class="line">        QuickSort sort = <span class="keyword">new</span> QuickSort();</div><div class="line">        sort.quickSort(data1, <span class="number">0</span> , data1.length-<span class="number">1</span>);</div><div class="line">        sort.quickSort(data2, <span class="number">0</span> , data2.length-<span class="number">1</span>);</div><div class="line">        </div><div class="line">        print(data1);</div><div class="line">        print(data2);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> start ,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (start &gt;= end)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">		<span class="comment">// pivotIndex可以取随机数</span></div><div class="line">        <span class="comment">// int index = partition1(data, start, end, end);</span></div><div class="line">        <span class="keyword">int</span> index = partition2(data, start, end, end);</div><div class="line">        <span class="keyword">if</span> (index &gt; start)</div><div class="line">            quickSort(data, start, index - <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (index &lt; end)</div><div class="line">            quickSort(data, index + <span class="number">1</span>, end);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition1</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> pivotIndex)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> pivot = data[pivotIndex];</div><div class="line">        swap(data, pivotIndex, end);</div><div class="line">        <span class="keyword">int</span> small = start;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; end; ++i) &#123;</div><div class="line">            <span class="keyword">if</span>(data[i] &lt; pivot) &#123;</div><div class="line">                <span class="keyword">if</span>(small != i)&#123;</div><div class="line">                    swap(data, i, small);</div><div class="line">                &#125;</div><div class="line">                ++small;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 基数归位</span></div><div class="line">        swap(data, small, end);</div><div class="line">        <span class="keyword">return</span> small;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition2</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> pivotIndex)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> small = start;</div><div class="line">        <span class="keyword">int</span> large = end;</div><div class="line">        <span class="keyword">int</span> pivot = data[pivotIndex];</div><div class="line">        swap(data, end, pivotIndex);</div><div class="line">        <span class="keyword">while</span> (small != large)&#123;</div><div class="line">            <span class="keyword">while</span> (data[small] &lt;= pivot &amp;&amp; small &lt; large)</div><div class="line">                small++;</div><div class="line">            <span class="keyword">while</span> (data[large] &gt;= pivot &amp;&amp; small &lt; large)</div><div class="line">                large--;</div><div class="line">            </div><div class="line">            <span class="keyword">if</span> (small &lt; large)</div><div class="line">                swap(data, small, large);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 基数归位</span></div><div class="line">        swap(data, end, small);</div><div class="line">        <span class="keyword">return</span> small;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp = data[i];</div><div class="line">        data[i] = data[j];</div><div class="line">        data[j] = tmp;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span>[] data)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i: data)&#123;</div><div class="line">            System.out.print(i + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感谢:<a href="http://www.cnblogs.com/skywang12345/p/3596746.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3596746.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(22): 排序- 归并排序]]></title>
      <url>https://rogerfang.github.io/2016/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-22-%E6%8E%92%E5%BA%8F-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;归并排序的<strong>基本思想</strong>：将两个有序数列合并成一个有序数列，具体实现包括“从上往下”和“从下往上”2种方式。<br>&emsp;&emsp;时间<strong>复杂度</strong>：O($N\log{N}$)。<br>&emsp;&emsp;归并排序是<strong>稳定</strong>的。</p>
<ol>
<li><strong>从下往上</strong>的归并排序：将待排序的数列分成若干个长度为1的子数列，然后将这些数列两两合并；得到若干个长度为2的有序数列，再将这些数列两两合并；重复下去直到合并成一个数列为止。</li>
<li><strong>从下往上</strong>的归并排序：<ul>
<li>分解：将当前区间一分为二，即求分裂点 mid = (low + high)/2;</li>
<li>求解：递归地对两个子区间a[low…mid] 和 a[mid+1…high]进行归并排序。递归的终结条件是子区间长度为1。</li>
<li>合并：将已排序的两个子区间a[low…mid]和 a[mid+1…high]归并为一个有序的区间a[low…high]。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 归并排序：从大到小</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> <span class="keyword">extends</span> <span class="title">Sort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] tmpArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自上而下：利用递归实现的分治思想</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortTopDown</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (high &lt;= low) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">int</span> mid = low + (high - low) / <span class="number">2</span>;</div><div class="line">        sortTopDown(a, low, mid);</div><div class="line">        sortTopDown(a, mid + <span class="number">1</span>, high);</div><div class="line">        merge(a, low, mid, high);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自下而上</div><div class="line">     * 先归并那些微型数组, 然后再成对归并得到的子数组。</div><div class="line">     * 1、首先进行两两归并(把每个元素想象成一个大小为1的数组)</div><div class="line">     * 2、然后四四归并(将两个大小为2的数组归并成一个有4个元素的数组)</div><div class="line">     * 3、然后是八八归并....一直下去</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortDownTop</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; a.length; sz *= <span class="number">2</span>) &#123;</div><div class="line">            System.out.println(<span class="string">"-------每组"</span> + sz + <span class="string">"个元素------"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - sz; i += sz * <span class="number">2</span>) &#123;</div><div class="line">                merge(a, i, i + sz - <span class="number">1</span>, Math.min(i + sz * <span class="number">2</span> - <span class="number">1</span>, a.length - <span class="number">1</span>));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = low; i &lt;= high; i++) &#123;</div><div class="line">            tmpArray[i] = a[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> i = low;</div><div class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; k++) &#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; mid) a[k] = tmpArray[j++];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; high) a[k] = tmpArray[i++];</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tmpArray[i] &lt; tmpArray[j]) a[k] = tmpArray[j++];</div><div class="line">            <span class="keyword">else</span> a[k] = tmpArray[i++];</div><div class="line">        &#125;</div><div class="line">        print(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感谢:<a href="http://www.cnblogs.com/skywang12345/p/3602369.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3602369.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(21): 排序- 堆排序]]></title>
      <url>https://rogerfang.github.io/2016/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-21-%E6%8E%92%E5%BA%8F-%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;堆排序是指利用堆这种数据结构所涉及的一种排序算法。最大堆通常被用来进行”升序”排序，而最小堆通常被用来进行”降序”排序。<br>&emsp;&emsp;最小堆进行降序的<strong>基本思想</strong>：<br>&emsp;&emsp;1. 初始化堆：将数据构造成最小堆。<br>&emsp;&emsp;2. 交换数据：将a[0] (最小值)和a[n-1]进行交换，并重新调整最小堆。每次deleteMin都确定一个数的顺序。</p>
<p>&emsp;&emsp;时间<strong>复杂度</strong>：O($N\log{N}$)。<br>&emsp;&emsp;堆排序是<strong>不稳定</strong>的。它在交换数据的时候，是比较父结点和子节点之间的数据，所以，即便是存在两个数值相等的兄弟节点，它们的相对顺序在排序也可能发生变化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">     * 堆排序：从大到小(最小堆)</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> <span class="keyword">extends</span> <span class="title">Sort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            percolateDown(a, i, a.length);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = a.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="comment">// deleteMin 放到数组最后</span></div><div class="line">            swap(a, <span class="number">0</span>, i);</div><div class="line">            percolateDown(a, <span class="number">0</span>, i);</div><div class="line">            System.out.println(<span class="string">"--------第"</span>+(a.length - i)+<span class="string">"趟---------"</span>);</div><div class="line">            print(a);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用于buildHeap和deleteMin</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> a</div><div class="line">     * <span class="doctag">@param</span> index 开始下滤的索引</div><div class="line">     * <span class="doctag">@param</span> n     堆的逻辑大小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">percolateDown</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> index, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> child;</div><div class="line">        <span class="keyword">int</span> tmp;</div><div class="line">        <span class="keyword">for</span> (tmp = a[index]; leftChild(index) &lt; n; index = child) &#123;</div><div class="line">            child = leftChild(index);</div><div class="line">            <span class="keyword">if</span> (child != n - <span class="number">1</span> &amp;&amp; a[child] &gt; a[child + <span class="number">1</span>]) &#123;</div><div class="line">                <span class="comment">// 右儿子</span></div><div class="line">                child++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (tmp &gt; a[child]) &#123;</div><div class="line">                a[index] = a[child];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        a[index] = tmp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">leftChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感谢:<a href="http://www.cnblogs.com/skywang12345/p/3602162.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3602162.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(20): 排序- 希尔排序]]></title>
      <url>https://rogerfang.github.io/2016/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-20-%E6%8E%92%E5%BA%8F-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>希尔排序是插入排序的一种，它是针对直接插入排序算法的改进。该方法又称缩减增量排序，因DL．Shell于1959年提出而得名。</p>
</blockquote>
<p>&emsp;&emsp;希尔排序实质上是一种分组插入方法。它的基本思想是：对于n个待排序的数列，取一个小于n的整数gap(gap被称为步长)将待排序元素分成若干个组子序列，所有距离为gap的倍数的记录放在同一个组中；然后，对各组内的元素进行插入排序。 这一趟排序完成之后，每一个组的元素都是有序的。然后减小gap的值，并重复执行上述的分组和排序。重复这样的操作，当gap=1时，整个数列就是有序的。<br>&emsp;&emsp;时间<strong>复杂度</strong>：与增量有关，Hibbard增量为O($N_{3/2}$)。（亚二次时间界）<br>&emsp;&emsp;希尔排序是<strong>不稳定</strong>的。对于相同的两个数，可能由于分在不同的组中而导致它们的顺序发生变化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/**</span></div><div class="line">     * 希尔排序：从大到小</div><div class="line">     * Hibbard增量：1,3,7,...,2^k-1</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> <span class="keyword">extends</span> <span class="title">Sort</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> N = a.length;</div><div class="line">        <span class="keyword">int</span> maxK = (<span class="keyword">int</span>)(Math.log(N + <span class="number">1</span>)/Math.log(<span class="number">2</span>));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = maxK; k &gt;= <span class="number">1</span>; k--)&#123;</div><div class="line">            <span class="keyword">int</span> gap = (<span class="keyword">int</span>) Math.pow(<span class="number">2</span>, k) - <span class="number">1</span>;</div><div class="line">            <span class="comment">// 将数组变成gap有序</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; N; i++)&#123;</div><div class="line">                <span class="comment">// 将a[i]插入到a[i-gap],a[i-2*gap],a[i-3*gap]...子数组之中</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= gap; j-=gap)&#123;</div><div class="line">                    <span class="keyword">if</span> (a[j] &gt; a[j - gap])&#123;</div><div class="line">                        swap(a, j, j-gap);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"------"</span>+gap+<span class="string">"排序后-------"</span>);</div><div class="line">            print(a);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感谢:<a href="http://www.cnblogs.com/skywang12345/p/3597597.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3597597.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(19): 排序- 插入排序]]></title>
      <url>https://rogerfang.github.io/2016/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-19-%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;插入排序的<strong>基本思想</strong>：把n个待排序的元素看成为一个有序表和一个无序表。开始时有序表中只包含1个元素，无序表中包含有n-1个元素，排序过程中每次从无序表中取出第一个元素，将它插入到有序表中的适当位置，使之成为新的有序表，重复n-1次可完成排序过程。<br>&emsp;&emsp;时间<strong>复杂度</strong>：O($N^{2}$)。<br>&emsp;&emsp;插入排序是<strong>稳定</strong>的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 插入排序：从大到小</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> <span class="keyword">extends</span> <span class="title">Sort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.length; i++)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; j--)&#123;</div><div class="line">                <span class="keyword">if</span> (a[j] &gt; a[j-<span class="number">1</span>])&#123;</div><div class="line">                    swap(a, j, j-<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"------第"</span>+i+<span class="string">"趟-------"</span>);</div><div class="line">            print(a);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感谢:<a href="http://www.cnblogs.com/skywang12345/p/3596881.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3596881.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(18): 排序- 选择排序]]></title>
      <url>https://rogerfang.github.io/2016/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-18-%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;选择排序的<strong>基本思想</strong>：首先在未排序的数列中找到最小(or最大)元素，然后将其存放到数列的起始位置；接着，再从剩余未排序的元素中继续寻找最小(or最大)元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。<br>&emsp;&emsp;时间<strong>复杂度</strong>：O($N^{2}$)。<br>&emsp;&emsp;选择排序是<strong>稳定</strong>的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 选择排序：从大到小</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> <span class="keyword">extends</span> <span class="title">Sort</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++)&#123;</div><div class="line">            <span class="keyword">int</span> max = i;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; a.length; j++)&#123;</div><div class="line">                <span class="keyword">if</span> (a[j] &gt; a[max])&#123;</div><div class="line">                    max = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            swap(a, i, max);</div><div class="line"></div><div class="line">            System.out.println(<span class="string">"------第"</span>+(i+<span class="number">1</span>)+<span class="string">"趟-------"</span>);</div><div class="line">            print(a);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感谢:<a href="http://www.cnblogs.com/skywang12345/p/3597641.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3597641.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(17): 排序- 冒泡排序]]></title>
      <url>https://rogerfang.github.io/2016/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-17-%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>&emsp;&emsp;冒泡排序的<strong>基本思想</strong>：每次比较相邻的两个元素，如果它们顺序错误就把它们交换过来。其中每一趟排序只能将一个数归位。<br>&emsp;&emsp;时间<strong>复杂度</strong>是O($N^{2}$)。<br>&emsp;&emsp;冒泡排序是<strong>稳定</strong>的。</p>
<blockquote>
<p>算法稳定性 – 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 冒泡排序：从大到小</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> <span class="keyword">extends</span> <span class="title">Sort</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</div><div class="line">        <span class="comment">// n个数排序, 只需要n-1趟</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++)&#123;</div><div class="line">            System.out.println(<span class="string">"------第"</span>+(i+<span class="number">1</span>)+<span class="string">"趟-------"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length - <span class="number">1</span> - i; j++)&#123;</div><div class="line">                <span class="keyword">if</span> (a[j] &lt; a[j+<span class="number">1</span>])&#123;</div><div class="line">                    swap(a, j, j+<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">                print(a);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感谢:<a href="http://www.cnblogs.com/skywang12345/p/3596232.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3596232.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(15): 堆- 斐波那契堆]]></title>
      <url>https://rogerfang.github.io/2016/11/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-15-%E5%A0%86-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(16): 堆- 二项队列]]></title>
      <url>https://rogerfang.github.io/2016/11/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-16-%E5%A0%86-%E4%BA%8C%E9%A1%B9%E9%98%9F%E5%88%97/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(13): 堆- 斜堆]]></title>
      <url>https://rogerfang.github.io/2016/11/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-13-%E5%A0%86-%E6%96%9C%E5%A0%86/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(14): 堆- 左式堆]]></title>
      <url>https://rogerfang.github.io/2016/11/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-14-%E5%A0%86-%E5%B7%A6%E5%BC%8F%E5%A0%86/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(12): 堆- 二叉堆]]></title>
      <url>https://rogerfang.github.io/2016/10/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-12-%E5%A0%86-%E4%BA%8C%E5%8F%89%E5%A0%86/</url>
      <content type="html"><![CDATA[<p>堆有两个性质，即结构性和堆序性。将任意节点不大于（不小于）其子节点的堆叫做最小堆（最大堆）。</p>
<ul>
<li>结构性<blockquote>
<p>堆中任意节点的值总是不大于（不小于）其子节点的值。</p>
</blockquote>
</li>
<li>堆序性<blockquote>
<p>堆总是一棵完全树。</p>
</blockquote>
</li>
</ul>
<p>二叉堆的结构是一棵完全二叉树。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">import</span> java.util.ArrayList;</div><div class="line">    <span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 二叉堆：最小堆</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryHeap</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;? <span class="title">super</span> <span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;T&gt; heap;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryHeap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.heap = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 插入</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T ele)</span> </span>&#123;</div><div class="line">        heap.add(ele);</div><div class="line">        percolateUp(heap.size() - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除最小元</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deleteMin</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isEmpty())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"堆为空"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        T ele = heap.get(<span class="number">0</span>);</div><div class="line">        heap.set(<span class="number">0</span>, heap.get(size() - <span class="number">1</span>));</div><div class="line">        heap.remove(size() - <span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span> (size() &gt; <span class="number">1</span>)&#123;</div><div class="line">            percolateDown(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> ele;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 上滤</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">percolateUp</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> parentIndex = (index - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">        T tmpEle = heap.get(index);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (tmpEle.compareTo(heap.get(parentIndex)) &gt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                heap.set(index, heap.get(parentIndex));</div><div class="line">                index = parentIndex;</div><div class="line">                parentIndex = (index - <span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        heap.set(index, tmpEle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 下滤</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">percolateDown</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="comment">// 先设置为左儿子索引</span></div><div class="line">        <span class="keyword">int</span> childIndex = <span class="number">2</span> * index + <span class="number">1</span>;</div><div class="line">        T tmpEle = heap.get(index);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (childIndex &lt; size())&#123;</div><div class="line">            <span class="comment">// 左右儿子大小比较, 选择较小者</span></div><div class="line">            <span class="keyword">if</span> (childIndex &lt; size() - <span class="number">1</span>)&#123;</div><div class="line">                <span class="keyword">int</span> cmp = heap.get(childIndex).compareTo(heap.get(childIndex + <span class="number">1</span>));</div><div class="line">                <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</div><div class="line">                    <span class="comment">// 右儿子较小</span></div><div class="line">                    childIndex++;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> cmp = tmpEle.compareTo(heap.get(childIndex));</div><div class="line">            <span class="keyword">if</span> (cmp &lt;= <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                heap.set(index, heap.get(childIndex));</div><div class="line">                index = childIndex;</div><div class="line">                childIndex = <span class="number">2</span> * index + <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        heap.set(index, tmpEle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> heap.size() == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> heap.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(11): 树形结构- B树]]></title>
      <url>https://rogerfang.github.io/2016/10/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-11-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-B%E6%A0%91/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(10): 树形结构- 哈夫曼树]]></title>
      <url>https://rogerfang.github.io/2016/10/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-10-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>&emsp;&emsp;给定n个权值作为n个叶子结点，构造一棵二叉树，若树的带权路径长度达到最小，则这棵树被称为哈夫曼树。</p>
<ul>
<li>路径和路径长度<blockquote>
<p>在一棵树中，从一个结点往下可以达到的孩子或孙子结点之间的通路，称为路径。通路中分支的数目称为路径长度。若规定根结点的层数为1，则从根结点到第L层结点的路径长度为L-1。</p>
</blockquote>
</li>
<li>节点的权及带权路径长度<blockquote>
<p>若将树中结点赋给一个有着某种含义的数值，则这个数值称为该结点的权。结点的带权路径长度为：从根结点到该结点之间的路径长度与该结点的权的乘积。</p>
</blockquote>
</li>
<li>树的带权路径长度<blockquote>
<p>树的带权路径长度规定为所有叶子结点的带权路径长度之和，记为WPL。</p>
</blockquote>
</li>
</ul>
<h1 id="构造规则"><a href="#构造规则" class="headerlink" title="构造规则"></a>构造规则</h1><p>&emsp;&emsp;假设有n个权值，则构造出的哈夫曼树有n个叶子结点， n个权值分别设为 w1、w2、…、wn。哈夫曼树的构造规则为：</p>
<ol>
<li>将w1、w2、…，wn看成是有n 棵树的森林(每棵树仅有一个结点)；</li>
<li>在森林中选出根结点的权值最小的两棵树进行合并，作为一棵新树的左、右子树，且新树的根结点权值为其左、右子树根结点权值之和；</li>
<li>从森林中删除选取的两棵树，并将新树加入森林；</li>
<li>重复2~3步，直到森林中只剩一棵树为止，该树即为所求得的哈夫曼树。</li>
</ol>
<p><img src="/images/tree/huffman-tree-example.jpg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(9): 树形结构- 红黑树]]></title>
      <url>https://rogerfang.github.io/2016/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-9-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>&emsp;&emsp;红黑二叉查找树（红黑树）：基本思想是用标准的二叉查找树（完全由2-节点构成）和一些额外的信息（替换3-节点）来表示2-3树。<br>&emsp;&emsp;红链接：将两个2-节点连接起来构成一个3-节点。<br>&emsp;&emsp;黑链接：是2-3树中的普通链接。</p>
<p>红黑树另一种定义是含有红黑链接并满足下列条件的二叉查找树：<br>&emsp;&emsp;1. 红链接均为左链接；<br>&emsp;&emsp;2. 没有任何一个节点同时有两条红链接相连；<br>&emsp;&emsp;3. 该树是<strong>完美黑色平衡的</strong>，即任意空链接到根节点的路径上的黑链接数量相同。</p>
<p>颜色表示，为了方便做出以下规定：<br>&emsp;&emsp;1. 根节点为黑色；<br>&emsp;&emsp;2. 空节点为黑色。</p>
<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>&emsp;&emsp;在进行某些操作中可能会出现红色右链接或者两条连续的红链接，但在操作完成前都可以通过旋转来修复。红黑树的旋转只有两种：顺时针旋转（右旋转）和逆时针旋转（左旋转）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 左旋转：红色右链接 -&gt; 红色左链接</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> node</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">rotateToLeft</span><span class="params">(Node&lt;T&gt; node)</span> </span>&#123;</div><div class="line">       Node&lt;T&gt; x = node.right;</div><div class="line">       node.right = x.left;</div><div class="line">       x.left = node;</div><div class="line">       x.color = node.color;</div><div class="line">       node.color = RED;</div><div class="line">       <span class="keyword">return</span> x;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 右旋转： 红色左链接 -&gt; 红色右链接</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> node</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">rotateToRight</span><span class="params">(Node&lt;T&gt; node)</span> </span>&#123;</div><div class="line">       Node&lt;T&gt; x = node.left;</div><div class="line">       node.left = x.right;</div><div class="line">       x.right = node;</div><div class="line">       x.color = node.color;</div><div class="line">       node.color = RED;</div><div class="line">       <span class="keyword">return</span> x;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/tree/rb-tree-rotate.png" alt=""></p>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>&emsp;&emsp;在2-3树中，我们将新插入的节点与树的底部节点合并，然后再做调整。为了表示合并，我们将新插入的节点均设为红色，表示与底部节点相连接。然而插入后，新的红节点可能会违反我们的规定，因此需要在回溯的时候进行调整。</p>
<ol>
<li><p><strong>情况一：红色右链接</strong><br>&emsp;&emsp;当我们发现某个节点的左儿子是黑色但右儿子是红色时，我们要将右边的红色链接转到左边来。<br><img src="/images/tree/rb-tree-insert-right-red.png" alt=""></p>
</li>
<li><p><strong>情况二：分解4-节点</strong><br>&emsp;&emsp;当左儿子和右儿子都是红色时，就代表着一个4-节点，为此我们可以直接将其反色来分解它。<br><img src="/images/tree/rb-tree-insert-left-right-red.png" alt=""></p>
</li>
<li><p><strong>情况三：连续红色左链接</strong><br>&emsp;&emsp;当出现连续的红色左链接时，需要经过一次右旋转变成一个4-节点，再进行一次反色分解它。<br><img src="/images/tree/rb-tree-insert-continue-red.png" alt=""></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 插入实现</div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">insert</span><span class="params">(T ele, Node&lt;T&gt; tree)</span></span>&#123;</div><div class="line">       <span class="keyword">if</span> (tree == <span class="keyword">null</span>)&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(ele, RED);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">int</span> cmpResult = ele.compareTo(tree.element);</div><div class="line">       <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>)&#123;</div><div class="line">           tree.left = insert(ele, tree.left);</div><div class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>)&#123;</div><div class="line">           tree.right = insert(ele, tree.right);</div><div class="line">       &#125;<span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">// duplicate; do nothing</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">// check balance</span></div><div class="line">       <span class="keyword">if</span> (isRed(tree.right) &amp;&amp; !isRed(tree.left))&#123;</div><div class="line">           <span class="comment">// 情况一：红色右链接</span></div><div class="line">           tree = rotateToLeft(tree);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (isRed(tree.left) &amp;&amp; isRed(tree.left.left))&#123; <span class="comment">// 该步在下一步flipColors之前进行校验</span></div><div class="line">           <span class="comment">// 情况三：连续红色左节点, 进行一次右旋转变成情况二4-节点</span></div><div class="line">           tree = rotateToRight(tree);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (isRed(tree.left) &amp;&amp; isRed(tree.right))&#123;</div><div class="line">           <span class="comment">// 情况二：分解4-节点</span></div><div class="line">           tree = filpColors(tree);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> tree;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>感谢:<a href="https://riteme.github.io/blog/2016-3-12/2-3-tree-and-red-black-tree.html#_5" target="_blank" rel="external">https://riteme.github.io/blog/2016-3-12/2-3-tree-and-red-black-tree.html#_5</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(8): 树形结构- 2-3树]]></title>
      <url>https://rogerfang.github.io/2016/10/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-8-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-2-3%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote>
<p>红黑树是一种平衡二叉树，其目标是为了优化二叉搜索树，防止极端情况下时间复杂度的退化。</p>
</blockquote>
<p>&emsp;&emsp;2-节点：含有一个键(及其对应的值)和两条链接，左链接指向的2-3树中的键都小于该结点，右链接指向的2-3树中的键都大于该结点。<br>&emsp;&emsp;3-节点：含有两个键(及其对应的值)和三条链接，左链接指向的2-3树中的键都小于该结点，左链接指向的2-3树中的键都小于该结点，中链接指向的2-3树中的键都位于该结点的两个键之间，右链接指向的2-3树中的键都待遇该结点。<br>&emsp;&emsp;为了保持树的平衡性，我们将会利用4-节点来在插入和删除过程中保持树的完美平衡。<br>&emsp;&emsp;将指向一棵空树的链接成为<strong>空链接</strong>。</p>
<blockquote>
<p>一棵<strong>完美平衡</strong>的2-3查找树中的所有空链接到根节点的距离应该是相同的。</p>
</blockquote>
<p><img src="/images/tree/2-3-tree-definition.png" alt=""></p>
<p><strong>性质</strong>:<br>&emsp;&emsp;1. 一个节点包含一个或两个键值；<br>&emsp;&emsp;2. 每个内部节点有两个或三个子节点；<br>&emsp;&emsp;3. 所有子节点都在树结构的同一层，因此树的高度总是平衡的。</p>
<p><strong>优势</strong>：<br>&emsp;&emsp;和标准二叉树有上向下生长不同，2-3树是由下向上生长的。在一棵大小为N的2-3树中，查找和插入操作访问的节点必然不超过$\log{N}$。<br><img src="/images/tree/2-3-tree-construct-trace.png" alt=""></p>
<h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><p>&emsp;&emsp;2-3树之所以完美平衡，关键在于插入时的维护。涉及到2-节点、3-节点以及4-节点之间如何转换。</p>
<h2 id="节点合并"><a href="#节点合并" class="headerlink" title="节点合并"></a>节点合并</h2><p>&emsp;&emsp;与二叉查找树一样，我们将会在2-3树中找到一个合适位置来插入它，这个位置一定在<strong>树的底部</strong>。在插入前，我们可以保证这棵2-3树是完美平衡的（空树也是如此）。在底部插入一个节点后，就会导致底部“多出”一个节点，导致2-3树不完美平衡。<br>&emsp;&emsp;解决方案就是节点结合：包括将2节点转换为3节点，3节点转换为4节点<br><img src="/images/tree/2-3-tree-node-merge.png" alt=""></p>
<h2 id="节点分裂"><a href="#节点分裂" class="headerlink" title="节点分裂"></a>节点分裂</h2><p>&emsp;&emsp;在上面的节点合并的操作中，出现了4-节点。然而4-节点是不能出现在最后的2-3树中的。因此我们需要将4-节点“肢解”，以确保这是一棵2-3树。<br>&emsp;&emsp;通常情况下，一个4-节点可以分裂成3个2-节点：<br><img src="/images/tree/2-3-tree-node-split.png" alt=""><br>&emsp;&emsp;分裂的过程十分简单，只需要将4-叉节点从中间分开，并将中间的两个儿子分别重新接在a的右儿子和c的左儿子即可。</p>
<h3 id="分解根节点"><a href="#分解根节点" class="headerlink" title="分解根节点"></a>分解根节点</h3><p>&emsp;&emsp;如果从插入节点到根节点的路径上全都是3-节点，所以根节点最终变成一个临时的4-节点。此时按照上述的分解后，整棵树的高度增加1，保证了2-3树的完美平衡。</p>
<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>2-3树的插入操作是有点复杂的，然而删除操作更加麻烦。</p>
<blockquote>
<p>2-3树在实际中很少使用，由于其需要大量的节点变换（从2-节点到3-节点到4-节点甚至到5-节点），这些变换在实际代码中是很复杂的，所以现在几乎没有2-3树的具体实现。</p>
</blockquote>
<hr>
<p>感谢: <a href="https://riteme.github.io/blog/2016-3-12/2-3-tree-and-red-black-tree.html#_5" target="_blank" rel="external">https://riteme.github.io/blog/2016-3-12/2-3-tree-and-red-black-tree.html#_5</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(7): 树形结构-伸展树]]></title>
      <url>https://rogerfang.github.io/2016/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-7-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-%E4%BC%B8%E5%B1%95%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote>
<p>伸展树（Splay Tree）和AVL树一样是一种特殊的二叉查找树。</p>
</blockquote>
<p>&emsp;&emsp;<strong>特点</strong>: 当某个节点被访问时，伸展树会通过旋转使该节点成为树根。这样做的好处是，下次要访问该节点时，能够迅速的访问到该节点。<br>&emsp;&emsp;伸展树保证从空树开始连续M次对树的操作最多花费O($M*\log{N}$)时间，但不排除任意单次操作花费O(N)时间的可能。伸展树基于这样的事实：对于二叉查找树来说，每次操作最坏情形时间O(N)并不坏，只要相对不常发生就行。</p>
<h1 id="伸展splaying"><a href="#伸展splaying" class="headerlink" title="伸展splaying"></a>伸展splaying</h1><h2 id="自底向上伸展"><a href="#自底向上伸展" class="headerlink" title="自底向上伸展"></a>自底向上伸展</h2><p>&emsp;&emsp;伸展树主要有三种旋转操作：<em>单旋转</em>，<em>一字形旋转</em>和<em>之字形旋转</em>。</p>
<h3 id="zig形"><a href="#zig形" class="headerlink" title="zig形"></a>zig形</h3><blockquote>
<p>zig：当目标节点x是根节点的左子节点或右子节点时，进行一次单旋转，将目标节点调整到根节点的位置。</p>
</blockquote>
<p><img src="/images/tree/splay-tree-zig.png" alt=""></p>
<h3 id="zig-zag形"><a href="#zig-zag形" class="headerlink" title="zig-zag形"></a>zig-zag形</h3><blockquote>
<p>zig-zag：当目标节点X、父节点P和祖父节G点成”zig-zag”构型时，进行一次双旋转，将目标节点调整到祖父节点的位置。从祖父节点开始进行两次异向的单旋转操作。</p>
</blockquote>
<p><img src="/images/tree/splay-tree-zig-zag.png" alt=""></p>
<h3 id="zig-zig形"><a href="#zig-zig形" class="headerlink" title="zig-zig形"></a>zig-zig形</h3><blockquote>
<p>zig-zig：当目标节点X、父节点P和祖父节点G成”zig-zig”构型时，进行一次zig-zig操作，将目标节点调整到祖父节点的位置。从祖父节点开始进行两次同向的单旋转操作。</p>
</blockquote>
<p><img src="/images/tree/splay-tree-zig-zig.png" alt=""></p>
<p><em>注：Bottom-up splay trees are hard to implement. (Sad Story)</em></p>
<h2 id="自顶向下伸展"><a href="#自顶向下伸展" class="headerlink" title="自顶向下伸展"></a>自顶向下伸展</h2><p>&emsp;&emsp;在自底向上的伸展树中，我们需要求一个节点的父节点和祖父节点，因此这种伸展树难以实现。因此，我们可以构建自顶向下的伸展树。<br>&emsp;&emsp;当我们沿着树向下搜索某个节点X的时候，我们将搜索路径上的节点及其子树移走。我们构建两棵临时的树──<strong>左树</strong>和<strong>右树</strong>。没有被移走的节点构成的树称作<strong>中树</strong>。</p>
<ul>
<li>左树：包含所有已经知道比目标节点小的节点。</li>
<li>右树：包含所有已经知道比目标节点大的节点。</li>
<li>中树：没有被移走的节点。</li>
</ul>
<h3 id="zig形-1"><a href="#zig形-1" class="headerlink" title="zig形"></a>zig形</h3><blockquote>
<p>孩子即为要查找的点，只需要一次连接操作。</p>
</blockquote>
<p><img src="/images/tree/splay-tree-topdown-zig.png" alt=""></p>
<h3 id="zig-zag形-1"><a href="#zig-zag形-1" class="headerlink" title="zig-zag形"></a>zig-zag形</h3><blockquote>
<p>孙子为要查找的点，而且呈之字形，只需要两次连接操作。</p>
</blockquote>
<p><img src="/images/tree/splay-tree-topdown-zig-zag.png" alt=""></p>
<h3 id="zig-zig形-1"><a href="#zig-zig形-1" class="headerlink" title="zig-zig形"></a>zig-zig形</h3><blockquote>
<p>孙子为要查找的点，而且呈一字形，先要进行一次旋转操作，再进行一次连接操作。</p>
</blockquote>
<p><img src="/images/tree/splay-tree-topdown-zig-zig.png" alt=""></p>
<h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><blockquote>
<p>将中树的左右子树分别连接到左树的右子树和右树的左子树上。将左右树作为X的左右子树。</p>
</blockquote>
<p><img src="/images/tree/splay-tree-topdown-assemble.png" alt=""></p>
<hr>
<h1 id="TopDown实现"><a href="#TopDown实现" class="headerlink" title="TopDown实现"></a>TopDown实现</h1><h2 id="伸展splay"><a href="#伸展splay" class="headerlink" title="伸展splay"></a>伸展splay</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 自顶向下伸展</div><div class="line">    * 构建两棵临时的树──左树和右树。没有被移走的节点构成的树称作中树。</div><div class="line">    * 1、目标节点和root相连时：一次link操作完成伸展</div><div class="line">    * 2、目标节点有父节点和祖先节点, 并且呈之字形：通过两次link操作完成伸展</div><div class="line">    * 3、目标节点有父节点和祖先节点, 并且呈一字形：先通过一次旋转, 再通过一次link操作完成伸展 (这里不是很懂，如果也通过两次link操作也能达到把目标节点移动到root的目的啊????)</div><div class="line">    * 注意此处的节点N, 最后所有的左树集中在N的右子树上, 而所有的右树集中在N的左子树上。</div><div class="line">    * 因为每次left link需要将中树上的部分节点移到左树的最右端(也就是最大的位置上), 这里的节点l的作用可以看做是为了方便在左树的最右端继续添加从中树移过来的节点;</div><div class="line">    * 同理, right link时, 节点r和节点l的作用类似。</div><div class="line">    * <span class="doctag">@param</span> ele</div><div class="line">    * <span class="doctag">@param</span> tree</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> SplayNode&lt;T&gt; <span class="title">topDownSplay</span><span class="params">(T ele, SplayNode&lt;T&gt; tree)</span></span>&#123;</div><div class="line">       <span class="keyword">if</span> (tree == <span class="keyword">null</span>)&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       SplayNode&lt;T&gt; N = <span class="keyword">new</span> SplayNode&lt;T&gt;();</div><div class="line">       SplayNode&lt;T&gt; l = N;</div><div class="line">       SplayNode&lt;T&gt; r = N;</div><div class="line">       SplayNode&lt;T&gt; c;</div><div class="line"></div><div class="line">       <span class="keyword">for</span> (;;)&#123;</div><div class="line">           <span class="keyword">int</span> cmpResult = ele.compareTo(tree.element);</div><div class="line">           <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>)&#123;</div><div class="line">               <span class="keyword">if</span> (tree.left == <span class="keyword">null</span>)&#123;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="comment">/* rotate right*/</span></div><div class="line">               <span class="keyword">if</span> (ele.compareTo(tree.left.element) &lt; <span class="number">0</span>)&#123;</div><div class="line">                   c = tree.left;</div><div class="line">                   tree.left = c.right;</div><div class="line">                   c.right = tree;</div><div class="line">                   tree = c;</div><div class="line">                   <span class="keyword">if</span> (tree.left == <span class="keyword">null</span>)&#123;</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="comment">/* link right */</span></div><div class="line">               r.left = tree;</div><div class="line">               r = tree;</div><div class="line">               tree = tree.left;</div><div class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>)&#123;</div><div class="line">               <span class="keyword">if</span> (tree.right == <span class="keyword">null</span>)&#123;</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="comment">/* rotate left */</span></div><div class="line">               <span class="keyword">if</span> (ele.compareTo(tree.right.element) &gt; <span class="number">0</span>)&#123;</div><div class="line">                   c = tree.right;</div><div class="line">                   tree.right = c.left;</div><div class="line">                   c.left = tree;</div><div class="line">                   tree = c;</div><div class="line">                   <span class="keyword">if</span> (tree.right == <span class="keyword">null</span>)&#123;</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="comment">/* link left */</span></div><div class="line">               l.right = tree;</div><div class="line">               l = tree;</div><div class="line">               tree = tree.right;</div><div class="line">           &#125;<span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">/* assemble */</span></div><div class="line">       l.right = tree.left;</div><div class="line">       r.left = tree.right;</div><div class="line">       tree.left = N.right;</div><div class="line">       tree.right = N.left;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> tree;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 伸展</div><div class="line">    * <span class="doctag">@param</span> ele</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> SplayNode&lt;T&gt; <span class="title">splay</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">       <span class="keyword">return</span> topDownSplay(ele, root);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="插入insert"><a href="#插入insert" class="headerlink" title="插入insert"></a>插入insert</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * <span class="doctag">@param</span> ele</div><div class="line">    * <span class="doctag">@param</span> node</div><div class="line">    * <span class="doctag">@return</span> 返回子树node的新的根节点</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> SplayNode&lt;T&gt; <span class="title">insert</span><span class="params">(T ele, SplayNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">new</span> SplayNode&lt;T&gt;(ele);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">int</span> cmpResult = ele.compareTo(node.element);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>) &#123;</div><div class="line">           node.left = insert(ele, node.left);</div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>) &#123;</div><div class="line">           node.right = insert(ele, node.right);</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">// 插入的元素重复</span></div><div class="line">           System.out.println(<span class="string">"INFO: duplicated element"</span>);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> node;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 插入</div><div class="line">    * <span class="doctag">@param</span> ele</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">       root = insert(ele, root);</div><div class="line">       root = splay(ele);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="删除remove"><a href="#删除remove" class="headerlink" title="删除remove"></a>删除remove</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 1、首先对ele进行一次伸展</div><div class="line">    * 2、然后判断移动到根节点的元素是不是ele</div><div class="line">    *    2.1、如果相等, 则找到该元素ele的前驱节点作为新的根节点</div><div class="line">    *    2.2、如果不等, 则不做处理, 因为一开始的伸展操作就已经将ele的前驱节点移动到根节点了</div><div class="line">    * <span class="doctag">@param</span> ele</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> SplayNode&lt;T&gt; <span class="title">remove</span><span class="params">(T ele, SplayNode&lt;T&gt; tree)</span></span>&#123;</div><div class="line">       <span class="keyword">if</span> (tree == <span class="keyword">null</span>)&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       tree = topDownSplay(ele, tree);</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (tree.element.compareTo(ele) == <span class="number">0</span>)&#123;</div><div class="line">           <span class="comment">// 找到该元素, 对树进行调整并删除该元素</span></div><div class="line">           SplayNode&lt;T&gt; x;</div><div class="line">           <span class="keyword">if</span> (tree.left != <span class="keyword">null</span>)&#123;</div><div class="line">               <span class="comment">// 删除该元素后, 需要重新伸展树得到一个根节点</span></div><div class="line">               <span class="comment">// 从左子树中找到最大的节点(删除元素的前驱节点)作为新的根节点</span></div><div class="line">               tree.left = topDownSplay(ele, tree.left);</div><div class="line">               <span class="comment">// 此时左子树不存在右儿子, 将原树的右子树直接赋给伸展后的左子树的右儿子</span></div><div class="line">               tree.left.right = tree.right;</div><div class="line">               tree = tree.left;</div><div class="line">           &#125;<span class="keyword">else</span> &#123;</div><div class="line">               tree = tree.right;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> tree;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">       root = remove(ele, root);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * 伸展树</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SplayTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;? <span class="title">super</span> <span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SplayNode&lt;T&gt; root;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SplayNode</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">        <span class="keyword">private</span> T element;</div><div class="line">        SplayNode&lt;T&gt; left;</div><div class="line">        SplayNode&lt;T&gt; right;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SplayNode</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.left = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">this</span>.right = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SplayNode</span><span class="params">(T element)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>(element, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SplayNode</span><span class="params">(T element, SplayNode&lt;T&gt; left, SplayNode&lt;T&gt; right)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.element = element;</div><div class="line">            <span class="keyword">this</span>.left = left;</div><div class="line">            <span class="keyword">this</span>.right = right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 插入</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">        root = insert(ele, root);</div><div class="line">        root = splay(ele);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     * <span class="doctag">@param</span> node</div><div class="line">     * <span class="doctag">@return</span> 返回子树node的新的根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> SplayNode&lt;T&gt; <span class="title">insert</span><span class="params">(T ele, SplayNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SplayNode&lt;T&gt;(ele);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cmpResult = ele.compareTo(node.element);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>) &#123;</div><div class="line">            node.left = insert(ele, node.left);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>) &#123;</div><div class="line">            node.right = insert(ele, node.right);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 插入的元素重复</span></div><div class="line">            System.out.println(<span class="string">"INFO: duplicated element"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除元素</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">        root = remove(ele, root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 1、首先对ele进行一次伸展</div><div class="line">     * 2、然后判断移动到根节点的元素是不是ele</div><div class="line">     *    2.1、如果相等, 则找到该元素ele的前驱节点作为新的根节点</div><div class="line">     *    2.2、如果不等, 则不做处理, 因为一开始的伸展操作就已经将ele的前驱节点移动到根节点了</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> SplayNode&lt;T&gt; <span class="title">remove</span><span class="params">(T ele, SplayNode&lt;T&gt; tree)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (tree == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        tree = topDownSplay(ele, tree);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (tree.element.compareTo(ele) == <span class="number">0</span>)&#123;</div><div class="line">            <span class="comment">// 找到该元素, 对树进行调整并删除该元素</span></div><div class="line">            SplayNode&lt;T&gt; x;</div><div class="line">            <span class="keyword">if</span> (tree.left != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="comment">// 删除该元素后, 需要重新伸展树得到一个根节点</span></div><div class="line">                <span class="comment">// 从左子树中找到最大的节点(删除元素的前驱节点)作为新的根节点</span></div><div class="line">                tree.left = topDownSplay(ele, tree.left);</div><div class="line">                <span class="comment">// 此时左子树不存在右儿子, 将原树的右子树直接赋给伸展后的左子树的右儿子</span></div><div class="line">                tree.left.right = tree.right;</div><div class="line">                tree = tree.left;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                tree = tree.right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> tree;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 伸展</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> SplayNode&lt;T&gt; <span class="title">splay</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> topDownSplay(ele, root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自顶向下伸展</div><div class="line">     * 构建两棵临时的树──左树和右树。没有被移走的节点构成的树称作中树。</div><div class="line">     * 1、目标节点和root相连时：一次link操作完成伸展</div><div class="line">     * 2、目标节点有父节点和祖先节点, 并且呈之字形：通过两次link操作完成伸展</div><div class="line">     * 3、目标节点有父节点和祖先节点, 并且呈一字形：先通过一次旋转, 再通过一次link操作完成伸展 (这里不是很懂，如果也通过两次link操作也能达到把目标节点移动到root的目的啊????)</div><div class="line">     * 注意此处的节点N, 最后所有的左树集中在N的右子树上, 而所有的右树集中在N的左子树上。</div><div class="line">     * 因为每次left link需要将中树上的部分节点移到左树的最右端(也就是最大的位置上), 这里的节点l的作用可以看做是为了方便在左树的最右端继续添加从中树移过来的节点;</div><div class="line">     * 同理, right link时, 节点r和节点l的作用类似。</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     * <span class="doctag">@param</span> tree</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> SplayNode&lt;T&gt; <span class="title">topDownSplay</span><span class="params">(T ele, SplayNode&lt;T&gt; tree)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (tree == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        SplayNode&lt;T&gt; N = <span class="keyword">new</span> SplayNode&lt;T&gt;();</div><div class="line">        SplayNode&lt;T&gt; l = N;</div><div class="line">        SplayNode&lt;T&gt; r = N;</div><div class="line">        SplayNode&lt;T&gt; c;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (;;)&#123;</div><div class="line">            <span class="keyword">int</span> cmpResult = ele.compareTo(tree.element);</div><div class="line">            <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (tree.left == <span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">/* rotate right*/</span></div><div class="line">                <span class="keyword">if</span> (ele.compareTo(tree.left.element) &lt; <span class="number">0</span>)&#123;</div><div class="line">                    c = tree.left;</div><div class="line">                    tree.left = c.right;</div><div class="line">                    c.right = tree;</div><div class="line">                    tree = c;</div><div class="line">                    <span class="keyword">if</span> (tree.left == <span class="keyword">null</span>)&#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">/* link right */</span></div><div class="line">                r.left = tree;</div><div class="line">                r = tree;</div><div class="line">                tree = tree.left;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (tree.right == <span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">/* rotate left */</span></div><div class="line">                <span class="keyword">if</span> (ele.compareTo(tree.right.element) &gt; <span class="number">0</span>)&#123;</div><div class="line">                    c = tree.right;</div><div class="line">                    tree.right = c.left;</div><div class="line">                    c.left = tree;</div><div class="line">                    tree = c;</div><div class="line">                    <span class="keyword">if</span> (tree.right == <span class="keyword">null</span>)&#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">/* link left */</span></div><div class="line">                l.right = tree;</div><div class="line">                l = tree;</div><div class="line">                tree = tree.right;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/* assemble */</span></div><div class="line">        l.right = tree.left;</div><div class="line">        r.left = tree.right;</div><div class="line">        tree.left = N.right;</div><div class="line">        tree.right = N.left;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> tree;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>)&#123;</div><div class="line">            print(root, root.element, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> node 打印的节点</div><div class="line">     * <span class="doctag">@param</span> ele ele 父节点的值</div><div class="line">     * <span class="doctag">@param</span> direction 0:根节点;-1:父节点的左儿子节点;1:父节点的右儿子节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(SplayNode&lt;T&gt; node, T ele, <span class="keyword">int</span> direction)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (direction == <span class="number">0</span>)&#123;</div><div class="line">                System.out.printf(<span class="string">"%s是根节点\n"</span>, ele);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                System.out.printf(<span class="string">"%s是%s的%s儿子节点\n"</span>, node.element, ele, direction==-<span class="number">1</span>?<span class="string">"left"</span>:<span class="string">"right"</span>);</div><div class="line">            &#125;</div><div class="line">            print(node.left, node.element, -<span class="number">1</span>);</div><div class="line">            print(node.right, node.element, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>感谢:<a href="http://www.cnblogs.com/skywang12345/p/3604286.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3604286.html</a><br>&emsp;&emsp; <a href="http://www.cnblogs.com/UnGeek/archive/2013/04/10/3013333.html" target="_blank" rel="external">http://www.cnblogs.com/UnGeek/archive/2013/04/10/3013333.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(6): 树形结构-AVL树]]></title>
      <url>https://rogerfang.github.io/2016/10/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-6-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-AVL%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote>
<p>AVL树是根据它的发明者Adelson-Velsky和Landis命名的。</p>
</blockquote>
<p>&emsp;&emsp;AVL树是带有<strong>平衡条件</strong>的<strong>二叉查找树</strong>。这个平衡条件必须要容易保持，而且保证树的深度必须是$O(\log{N})$，所以AVL树的查找、插入和删除在平均和最坏情况下都是$O(\log{N})$。<br>它的特点是AVL树中任何节点的两个子树的高度最大差别为1。</p>
<h2 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AvlNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        T element;</div><div class="line">        AvlNode&lt;T&gt; left;</div><div class="line">        AvlNode&lt;T&gt; right;</div><div class="line">        <span class="keyword">int</span> height;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AvlNode</span><span class="params">(T element)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>(element, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AvlNode</span><span class="params">(T element, AvlNode&lt;T&gt; left, AvlNode&lt;T&gt; right)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.element = element;</div><div class="line">            <span class="keyword">this</span>.left = left;</div><div class="line">            <span class="keyword">this</span>.right = right;</div><div class="line">            <span class="keyword">this</span>.height = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="恢复平衡"><a href="#恢复平衡" class="headerlink" title="恢复平衡"></a>恢复平衡</h1><p>&emsp;&emsp;当发生插入或删除操作时，就有可能破坏AVL树的平衡条件，所以为了恢复平衡需要对树进行简单的修正，也就是<strong><em>旋转</em></strong>。<br>&emsp;旋转分为4种状态两种情况，如下图：<br>&emsp;1. 插入发生在“外边”的情况（即左-左或右-右的情况），该情况通过树的一次<strong>单旋转</strong>完成调整。<br>&emsp;2. 插入发生在“内部”的情况（即左-右或右-左的情况），该情况通过复杂些的<strong>双旋转</strong>完成调整。<br><img src="/images/tree/avl-tree-rotate-state.jpg" alt=""></p>
<h2 id="左左（LL）-旋转"><a href="#左左（LL）-旋转" class="headerlink" title="左左（LL） 旋转"></a>左左（LL） 旋转</h2><p>如下图，左边是旋转之前的树，右边是旋转之后的树。从中可以发现，经过一次旋转又变成了AVL树。<br><img src="/images/tree/avl-tree-ll-rotate.jpg" alt=""><br>对于LL旋转，你可以这样理解为：LL旋转是围绕”失去平衡的AVL根节点”进行的，也就是节点k2；而且由于是LL情况，即左左情况，就用手抓着”左孩子，即k1”使劲摇。将k1变成根节点，k2变成k1的右子树，”k1的右子树”变成”k2的左子树”。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 左左 单旋转</div><div class="line"> * <span class="doctag">@param</span> k2 平衡条件破坏的子树的根节点</div><div class="line"> * <span class="doctag">@return</span> 返回新的根节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">rotateWithLeftChild</span><span class="params">(AvlNode&lt;T&gt; k2)</span> </span>&#123;</div><div class="line">    AvlNode&lt;T&gt; k1 = k2.left;</div><div class="line">    k2.left = k1.right;</div><div class="line">    k1.right = k2;</div><div class="line">    k2.height = Math.max(height(k2.left), height(k2.right)) + <span class="number">1</span>;</div><div class="line">    k1.height = Math.max(height(k1.left), height(k1.right)) + <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> k1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="右右（LL）-旋转"><a href="#右右（LL）-旋转" class="headerlink" title="右右（LL） 旋转"></a>右右（LL） 旋转</h2><p>RR是与LL对称的情况，如下图，也是经过一次旋转又变成了AVL树。<br><img src="/images/tree/avl-tree-rr-rotate.jpg" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 右右 单旋转</div><div class="line">  * <span class="doctag">@param</span> k2 平衡条件破坏的子树的根节点</div><div class="line">  * <span class="doctag">@return</span> 返回新的根节点</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">rotateWithRightChild</span><span class="params">(AvlNode&lt;T&gt; k2)</span> </span>&#123;</div><div class="line">     AvlNode&lt;T&gt; k1 = k2.right;</div><div class="line">     k2.right = k1.left;</div><div class="line">     k1.left = k2;</div><div class="line">     k2.height = Math.max(height(k2.left), height(k2.right)) + <span class="number">1</span>;</div><div class="line">     k1.height = Math.max(height(k1.left), height(k1.right)) + <span class="number">1</span>;</div><div class="line">     <span class="keyword">return</span> k1;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="左右（LR）-旋转"><a href="#左右（LR）-旋转" class="headerlink" title="左右（LR） 旋转"></a>左右（LR） 旋转</h2><p>LR失去平衡的情况，需要经过两次旋转才能让AVL树恢复平衡。<br><img src="/images/tree/avl-tree-lr-rotate.jpg" alt=""><br>第一次旋转是围绕”k1”进行的”RR旋转”，第二次是围绕”k3”进行的”LL旋转”。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * 左右 双旋转</div><div class="line">  * 先进行一次右旋转, 在进行一次左旋转</div><div class="line">  * <span class="doctag">@param</span> k3 平衡条件破坏的子树的根节点</div><div class="line">  * <span class="doctag">@return</span> 返回新的根节点</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">doubleRotateWithLeftChild</span><span class="params">(AvlNode&lt;T&gt; k3)</span> </span>&#123;</div><div class="line">     k3.left = rotateWithRightChild(k3.left);</div><div class="line">     <span class="keyword">return</span> rotateWithLeftChild(k3);</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="右左（RL）-旋转"><a href="#右左（RL）-旋转" class="headerlink" title="右左（RL） 旋转"></a>右左（RL） 旋转</h2><p>RL是与LR的对称情况！RL恢复平衡的旋转方法如下图。<br><img src="/images/tree/avl-tree-rl-rotate.jpg" alt=""><br>第一次旋转是围绕”k3”进行的”LL旋转”，第二次是围绕”k1”进行的”RR旋转”。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 右左 双旋转</div><div class="line"> * 先进行一次左旋转, 在进行一次右旋转</div><div class="line"> * <span class="doctag">@param</span> k3 平衡条件破坏的子树的根节点</div><div class="line"> * <span class="doctag">@return</span> 返回新的根节点</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">doubleRotateWithRightChild</span><span class="params">(AvlNode&lt;T&gt; k3)</span> </span>&#123;</div><div class="line">    k3.right = rotateWithLeftChild(k3.right);</div><div class="line">    <span class="keyword">return</span> rotateWithRightChild(k3);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * AVL树</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AvlTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;? <span class="title">super</span> <span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; root;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AvlNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        T element;</div><div class="line">        AvlNode&lt;T&gt; left;</div><div class="line">        AvlNode&lt;T&gt; right;</div><div class="line">        <span class="keyword">int</span> height;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AvlNode</span><span class="params">(T element)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>(element, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AvlNode</span><span class="params">(T element, AvlNode&lt;T&gt; left, AvlNode&lt;T&gt; right)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.element = element;</div><div class="line">            <span class="keyword">this</span>.left = left;</div><div class="line">            <span class="keyword">this</span>.right = right;</div><div class="line">            <span class="keyword">this</span>.height = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 插入元素到Avl树</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">        root = insert(ele, root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 插入元素到子树中</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     * <span class="doctag">@param</span> subroot 子树根节点</div><div class="line">     * <span class="doctag">@return</span> 新的子树根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">insert</span><span class="params">(T ele, AvlNode&lt;T&gt; subroot)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (subroot == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AvlNode&lt;T&gt;(ele);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cmpResult = ele.compareTo(subroot.element);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>)&#123;</div><div class="line">            subroot.left = insert(ele, subroot.left);</div><div class="line">            <span class="comment">// 往左插入元素时, 破坏平衡条件</span></div><div class="line">            <span class="keyword">if</span> (height(subroot.left) - height(subroot.right) == <span class="number">2</span>)&#123;</div><div class="line">                <span class="comment">// 判断是左左还是左右情况</span></div><div class="line">                <span class="keyword">if</span> (subroot.left.element.compareTo(ele) &gt; <span class="number">0</span>)&#123;</div><div class="line">                    subroot = rotateWithLeftChild(subroot);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    subroot = doubleRotateWithLeftChild(subroot);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>)&#123;</div><div class="line">            subroot.right = insert(ele, subroot.right);</div><div class="line">            <span class="comment">// 往右插入元素时, 破坏平衡条件</span></div><div class="line">            <span class="keyword">if</span> (height(subroot.right) - height(subroot.left) == <span class="number">2</span>)&#123;</div><div class="line">                <span class="comment">// 判断是右右还是右左情况</span></div><div class="line">                <span class="keyword">if</span> (subroot.right.element.compareTo(ele) &lt; <span class="number">0</span>)&#123;</div><div class="line">                    subroot = rotateWithRightChild(subroot);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    subroot = doubleRotateWithRightChild(subroot);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Duplicate; do nothing</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 更新subroot的height</span></div><div class="line">        subroot.height = Math.max(height(subroot.left), height(subroot.right)) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> subroot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从Avl树种删除元素</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">        root = remove(ele, root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从Avl子树中删除元素</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     * <span class="doctag">@param</span> subroot 子树根节点</div><div class="line">     * <span class="doctag">@return</span> 新的子树根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">remove</span><span class="params">(T ele, AvlNode&lt;T&gt; subroot)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (subroot == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cmpResult = ele.compareTo(subroot.element);</div><div class="line">        <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>)&#123;</div><div class="line">            subroot.left = remove(ele, subroot.left);</div><div class="line">            <span class="keyword">if</span> (height(subroot.right) - height(subroot.left) == <span class="number">2</span>)&#123;</div><div class="line">                <span class="comment">// 删除左子树的节点失去平衡</span></div><div class="line">                <span class="keyword">if</span> (height(subroot.right.left) &gt; height(subroot.right.right))&#123;</div><div class="line">                    subroot = doubleRotateWithRightChild(subroot);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    subroot = rotateWithRightChild(subroot);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>)&#123;</div><div class="line">            subroot.right = remove(ele, subroot.right);</div><div class="line">            <span class="keyword">if</span> (height(subroot.left) - height(subroot.right) == <span class="number">2</span>)&#123;</div><div class="line">                <span class="comment">// 删除右子树的节点失去平衡</span></div><div class="line">                <span class="keyword">if</span> (height(subroot.left.right) &gt; height(subroot.left.left))&#123;</div><div class="line">                    subroot = doubleRotateWithLeftChild(subroot);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    subroot = rotateWithLeftChild(subroot);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 对应删除的节点</span></div><div class="line">            <span class="keyword">if</span> (subroot.left != <span class="keyword">null</span> &amp;&amp; subroot.right != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="comment">// 左右子树都非空</span></div><div class="line">                <span class="keyword">if</span> (height(subroot.left) &gt; height(subroot.right))&#123;</div><div class="line">                    <span class="comment">// 如果左子树比右子树高</span></div><div class="line">                    <span class="comment">// 1、找出tree的左子树的最大节点</span></div><div class="line">                    <span class="comment">// 2、将该最大节点赋给tree</span></div><div class="line">                    <span class="comment">// 3、从tree的左子树删除该最大节点</span></div><div class="line">                    <span class="comment">// 这种方式的好处：删除tree的左子树最大节点后, AVL树仍然是平衡的</span></div><div class="line">                    AvlNode&lt;T&gt; leftMax = maximum(subroot.left);</div><div class="line">                    subroot.element = leftMax.element;</div><div class="line">                    subroot.left = remove(leftMax.element, subroot.left);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 如果右子树比左子树高或相等</span></div><div class="line">                    <span class="comment">// 1、找出tree的右子树的最小节点</span></div><div class="line">                    <span class="comment">// 2、将该最小节点赋给tree</span></div><div class="line">                    <span class="comment">// 3、从tree的右子树删除该最小节点</span></div><div class="line">                    <span class="comment">// 这种方式的好处：删除tree的右子树最小节点后, AVL树仍然是平衡的</span></div><div class="line">                    AvlNode&lt;T&gt; rightMin = minimum(subroot.right);</div><div class="line">                    subroot.element = rightMin.element;</div><div class="line">                    subroot.right = remove(rightMin.element, subroot.right);</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                subroot = (subroot.left != <span class="keyword">null</span>) ? subroot.left : subroot.right;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> subroot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 左左 单旋转</div><div class="line">     * <span class="doctag">@param</span> k2 平衡条件破坏的子树的根节点</div><div class="line">     * <span class="doctag">@return</span> 返回新的根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">rotateWithLeftChild</span><span class="params">(AvlNode&lt;T&gt; k2)</span> </span>&#123;</div><div class="line">        AvlNode&lt;T&gt; k1 = k2.left;</div><div class="line">        k2.left = k1.right;</div><div class="line">        k1.right = k2;</div><div class="line">        k2.height = Math.max(height(k2.left), height(k2.right)) + <span class="number">1</span>;</div><div class="line">        k1.height = Math.max(height(k1.left), height(k1.right)) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> k1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 右右 单旋转</div><div class="line">     * <span class="doctag">@param</span> k2 平衡条件破坏的子树的根节点</div><div class="line">     * <span class="doctag">@return</span> 返回新的根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">rotateWithRightChild</span><span class="params">(AvlNode&lt;T&gt; k2)</span> </span>&#123;</div><div class="line">        AvlNode&lt;T&gt; k1 = k2.right;</div><div class="line">        k2.right = k1.left;</div><div class="line">        k1.left = k2;</div><div class="line">        k2.height = Math.max(height(k2.left), height(k2.right)) + <span class="number">1</span>;</div><div class="line">        k1.height = Math.max(height(k1.left), height(k1.right)) + <span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> k1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 左右 双旋转</div><div class="line">     * 先进行一次右旋转, 在进行一次左旋转</div><div class="line">     * <span class="doctag">@param</span> k3 平衡条件破坏的子树的根节点</div><div class="line">     * <span class="doctag">@return</span> 返回新的根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">doubleRotateWithLeftChild</span><span class="params">(AvlNode&lt;T&gt; k3)</span> </span>&#123;</div><div class="line">        k3.left = rotateWithRightChild(k3.left);</div><div class="line">        <span class="keyword">return</span> rotateWithLeftChild(k3);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 右左 双旋转</div><div class="line">     * 先进行一次左旋转, 在进行一次右旋转</div><div class="line">     * <span class="doctag">@param</span> k3 平衡条件破坏的子树的根节点</div><div class="line">     * <span class="doctag">@return</span> 返回新的根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">doubleRotateWithRightChild</span><span class="params">(AvlNode&lt;T&gt; k3)</span> </span>&#123;</div><div class="line">        k3.right = rotateWithLeftChild(k3.right);</div><div class="line">        <span class="keyword">return</span> rotateWithRightChild(k3);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(AvlNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> node == <span class="keyword">null</span> ? <span class="number">0</span> : node.height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查找该子树的最大节点</div><div class="line">     * <span class="doctag">@param</span> subroot</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title">maximum</span><span class="params">(AvlNode&lt;T&gt; subroot)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (subroot == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (subroot.right != <span class="keyword">null</span>)&#123;</div><div class="line">            subroot = subroot.right;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> subroot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查找该子树的最小节点</div><div class="line">     * <span class="doctag">@param</span> subroot</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> AvlNode&lt;T&gt; <span class="title">minimum</span><span class="params">(AvlNode&lt;T&gt; subroot)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (subroot == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (subroot.left != <span class="keyword">null</span>)&#123;</div><div class="line">            subroot = subroot.left;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> subroot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>)&#123;</div><div class="line">            print(root, root.element, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> node 打印的节点</div><div class="line">     * <span class="doctag">@param</span> ele ele 父节点的值</div><div class="line">     * <span class="doctag">@param</span> direction 0:根节点;-1:父节点的左儿子节点;1:父节点的右儿子节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(AvlNode&lt;T&gt; node, T ele, <span class="keyword">int</span> direction)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (direction == <span class="number">0</span>)&#123;</div><div class="line">                System.out.printf(<span class="string">"%s是根节点\n"</span>, ele);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                System.out.printf(<span class="string">"%s是%s的%s儿子节点\n"</span>, node.element, ele, direction==-<span class="number">1</span>?<span class="string">"left"</span>:<span class="string">"right"</span>);</div><div class="line">            &#125;</div><div class="line">            print(node.left, node.element, -<span class="number">1</span>);</div><div class="line">            print(node.right, node.element, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>注</strong>：本文内容引自<a href="http://www.cnblogs.com/skywang12345/p/3577479.html" target="_blank" rel="external">http://www.cnblogs.com/skywang12345/p/3577479.html</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(5): 树形结构-二叉查找树]]></title>
      <url>https://rogerfang.github.io/2016/10/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-5-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><ul>
<li>若左子树不为空，则左子树上所有节点的值均小于它的根节点的值；</li>
<li>若右子树不为空，则右子树上所有节点的值均大于它的根节点的值。</li>
<li>左、右子树也分别为二叉查找树</li>
</ul>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><blockquote>
<p>下面的实现代码中，insert和remove是通过递归实现的，之后用while语句替代对比一下。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 二叉查找树</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;? <span class="title">super</span> <span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> BinaryNode&lt;T&gt; root;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinarySearchTree</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.root = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 前序遍历</div><div class="line">     * 1. 访问根节点</div><div class="line">     * 2. 先序遍历左子树</div><div class="line">     * 3. 先序遍历右子树</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">()</span></span>&#123;</div><div class="line">        preOrder(root);</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(BinaryNode&lt;T&gt; node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            System.out.print(node.element + <span class="string">" "</span>);</div><div class="line">            preOrder(node.left);</div><div class="line">            preOrder(node.right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 中序遍历</div><div class="line">     * 1. 中序遍历左子树</div><div class="line">     * 2. 访问根节点</div><div class="line">     * 3. 中序遍历右子树</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">()</span></span>&#123;</div><div class="line">        inOrder(root);</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(BinaryNode&lt;T&gt; node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            inOrder(node.left);</div><div class="line">            System.out.print(node.element + <span class="string">" "</span>);</div><div class="line">            inOrder(node.right);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 后序遍历</div><div class="line">     * 1. 后序遍历左子树</div><div class="line">     * 2. 后序遍历右子树</div><div class="line">     * 3. 访问根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">()</span></span>&#123;</div><div class="line">        postOrder(root);</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postOrder</span><span class="params">(BinaryNode&lt;T&gt; node)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            postOrder(node.left);</div><div class="line">            postOrder(node.right);</div><div class="line">            System.out.print(node.element + <span class="string">" "</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 插入</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">        root = insert(ele, root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(T ele)</span></span>&#123;</div><div class="line">        root = remove(ele, root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否包含某元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T ele)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> contains(ele, root);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 清空树</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        root = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断空</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> root == <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>)&#123;</div><div class="line">            print(root, root.element, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> node 打印的节点</div><div class="line">     * <span class="doctag">@param</span> ele ele 父节点的值</div><div class="line">     * <span class="doctag">@param</span> direction 0:根节点;-1:父节点的左儿子节点;1:父节点的右儿子节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(BinaryNode&lt;T&gt; node, T ele, <span class="keyword">int</span> direction)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span> (direction == <span class="number">0</span>)&#123;</div><div class="line">                System.out.printf(<span class="string">"%s是根节点\n"</span>, ele);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                System.out.printf(<span class="string">"%s是%s的%s儿子节点\n"</span>, node.element, ele, direction==-<span class="number">1</span>?<span class="string">"left"</span>:<span class="string">"right"</span>);</div><div class="line">            &#125;</div><div class="line">            print(node.left, node.element, -<span class="number">1</span>);</div><div class="line">            print(node.right, node.element, <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     * <span class="doctag">@param</span> node</div><div class="line">     * <span class="doctag">@return</span> 返回子树node的新的根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> BinaryNode&lt;T&gt; <span class="title">insert</span><span class="params">(T ele, BinaryNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BinaryNode&lt;T&gt;(ele);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cmpResult = ele.compareTo(node.element);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>) &#123;</div><div class="line">            node.left = insert(ele, node.left);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>) &#123;</div><div class="line">            node.right = insert(ele, node.right);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 插入的元素重复</span></div><div class="line">            System.out.println(<span class="string">"INFO: duplicated element"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除节点时, 需要考虑该节点是有一个还是两个子树</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> ele</div><div class="line">     * <span class="doctag">@param</span> node</div><div class="line">     * <span class="doctag">@return</span> 返回子树node的新的根节点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> BinaryNode&lt;T&gt; <span class="title">remove</span><span class="params">(T ele, BinaryNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// Element not found, do nothing</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cmpResult = ele.compareTo(node.element);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>) &#123;</div><div class="line">            node.left = remove(ele, node.left);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>) &#123;</div><div class="line">            node.right = remove(ele, node.right);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left != <span class="keyword">null</span> &amp;&amp; node.right != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 该节点有两个子树, 取右子树的最小元填充此节点</span></div><div class="line">            node.element = findMin(node.right).element;</div><div class="line">            node.right = remove(node.element, node.right);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 该节点只有一个子树, 直接调整子树到填补该节点位置</span></div><div class="line">            node = (node.left != <span class="keyword">null</span>) ? node.left : node.right;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(T ele, BinaryNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> cmpResult = ele.compareTo(node.element);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (cmpResult &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> contains(ele, node.left);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmpResult &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> contains(ele, node.right);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> BinaryNode&lt;T&gt; <span class="title">findMin</span><span class="params">(BinaryNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> findMin(node.left);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> BinaryNode&lt;T&gt; <span class="title">findMax</span><span class="params">(BinaryNode&lt;T&gt; node)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> findMax(node.right);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryNode</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">        T element;</div><div class="line">        BinaryNode&lt;T&gt; left;</div><div class="line">        BinaryNode&lt;T&gt; right;</div><div class="line"></div><div class="line">        BinaryNode(T element) &#123;</div><div class="line">            <span class="keyword">this</span>(element, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        BinaryNode(T element, BinaryNode&lt;T&gt; left, BinaryNode&lt;T&gt; right) &#123;</div><div class="line">            <span class="keyword">this</span>.element = element;</div><div class="line">            <span class="keyword">this</span>.left = left;</div><div class="line">            <span class="keyword">this</span>.right = right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(4): 树形结构-树&二叉树]]></title>
      <url>https://rogerfang.github.io/2016/10/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-4-%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84-%E6%A0%91-%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>树</strong>：是n(n&gt;=0)个节点的有限集。</p>
<ul>
<li>当n=0时，称为<strong>空树</strong></li>
<li>有且仅有一个特定的节点称为<strong>根节点</strong></li>
<li>当n&gt;1时，其余节点可分为k(k&gt;0)个<strong>互不相交</strong>的有限集T1，T2，…，T3，其中每个集合本身又是一棵树，并且称为根的<strong>子树</strong>。</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>节点的<strong>度</strong>：节点拥有的子树个数；树的度是树内各节点的度的最大值。</li>
<li><strong>树叶</strong>（终端节点）：没有儿子的节点，度为0。</li>
<li><strong>分支节点</strong>（非终端节点）：度不为0的节点。</li>
<li><strong>内部节点</strong>：除根节点之外的分支节点。</li>
<li>节点的<strong>层次</strong>：从根开始定义，根为第一层。</li>
<li>节点的<strong>深度</strong>：节点i的深度为从根到节点i的唯一路径的长。根的深度为1，树的深度为最深的树叶的深度。</li>
<li>节点的<strong>高度</strong>：节点i的高度为从该节点到一片树叶的最长路径的长。树叶的高度为1，树的高为根的高，等于树的深度。<blockquote>
<p><strong>注</strong>：查看国内资料博客时，基本上将根的深度和树叶的高度都设为1，国外的教材教材上则设为0，本文将以1作为标准。</p>
</blockquote>
</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>双亲表示法：所有的节点都存有它双亲节点的位置</li>
<li>孩子表示法：每个节点有多个指针域，其中每个指针指向一棵子树的根节点。</li>
<li>孩子兄弟表示法：每个节点有两个指针域，一个指向该节点的第一个孩子节点，另一个指向该节点的右兄弟节点。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 树的实现：孩子兄弟表示法,</div><div class="line"> * 如果想获取某节点的双亲节点，可以再添加一个双亲指针域</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">        T element;</div><div class="line">        <span class="comment">// 孩子指针域：指向第一个儿子节点</span></div><div class="line">        TreeNode&lt;T&gt; firstChild;</div><div class="line">        <span class="comment">// 兄弟指针域：指向兄弟节点</span></div><div class="line">        TreeNode&lt;T&gt; nextSibling;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>每个节点最多有两棵子树，所以二叉树中不存在度大于2的节点。</li>
<li>左子树和右子树是有顺序的，次序不能任意颠倒。</li>
<li>即使树中某节点只有一棵子树，也要区分它是左子树还是右子树。</li>
</ul>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><ul>
<li>一棵非空二叉树的第i层上最多有$2^{i-1}$(i&gt;=1)个节点。</li>
<li>根的深度为1，则深度为k(k&gt;=0)的二叉树最多有$2^{i}-1$个节点</li>
<li>具有n个节点的完全二叉树的深度k为$log_{2}n+1$。</li>
<li>对于一棵非空二叉树，如果度为0的节点树为$n_0$，度为2的节点树为$n_2$，则有$n_0=n_2+1$。</li>
</ul>
<h2 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h2><ul>
<li><em>满二叉树</em>：在一棵二叉树中，如果所有分支节点都存在左子树和右子树，并且所有叶子节点都在同一层上，这样的二叉树称为满二叉树。</li>
<li><em>完全二叉树</em>：对一棵具有n个节点的二叉树按层序编号，如果编号为i（1≤i≤n）的节点与同样深度的满二叉树中编号为i的节点在二叉树中位置完全相同<ul>
<li>叶子节点只能出现在最下两层；</li>
<li>最下层的叶子一定集中在左部连续位置；</li>
<li>倒数二层，若有叶子节点，一定都在右部连续位置；</li>
<li>如果节点度为1，则该节点只有左孩子，即不存在只有右子树的情况；</li>
<li>同样节点数的二叉树，完全二叉树的深度最小。</li>
</ul>
</li>
</ul>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><ol>
<li>前序遍历<blockquote>
<p>对当前节点的处理工作是在它的各个儿子节点被处理之前进行的。</p>
</blockquote>
</li>
<li>中序遍历<blockquote>
<p>对当前节点的处理工作是在它的左儿子节点被处理之后，在右儿子节点被处理之前进行的。</p>
</blockquote>
</li>
<li>后序遍历<blockquote>
<p>对当前节点的处理工作是在它的各个儿子节点被处理之后进行的。</p>
</blockquote>
</li>
</ol>
<ul>
<li>给定二叉树结点的前序序列和中序序列，可以唯一确定该二叉树。<blockquote>
<p><strong>步骤</strong>：先看前序序列，从左往右方向，确定根节点；再看中序序列找到根节点的左右子树包含的节点；接着对前序序列进行左右子树划分，重复上述步骤即可。</p>
</blockquote>
</li>
<li>给定二叉树结点的后序序列和中序序列，可以唯一确定该二叉树。<blockquote>
<p><strong>步骤</strong>：先看后序序列，从右往左方向，确定根节点；再看中序序列找到根节点的左右子树包含的节点；接着对前序序列进行左右子树划分，重复上述步骤即可。</p>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(3): 线性结构-队列]]></title>
      <url>https://rogerfang.github.io/2016/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-3-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
      <content type="html"><![CDATA[<p><strong>队列</strong>：一种线性存储结构，和栈一样也是一种操作受限的表。</p>
<ul>
<li>队列中数据是按照”先进先出（FIFO）“方式进出队列的。</li>
<li>队列只允许在”队首“删除，而在”队尾“插入。</li>
</ul>
<h1 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h1><p>&emsp;&emsp;建立顺序队列结构必须为分配一片<strong>连续的存储空间</strong>，并设置两个指针进行管理。一个是队头指针front，它指向队头元素；另一个是队尾指针rear，它指向下一个入队元素的存储位置。</p>
<p>&emsp;&emsp;每次在队尾插入一个元素是，rear增1；每次在队头删除一个元素时，front增1。随着插入和删除操作的进行，队列元素的个数不断变化，队列所占的存储空间也在为队列结构所分配的连续空间中移动。当front=rear时，队列中没有任何元素，称为<strong>空队列</strong>。</p>
<blockquote>
<p><strong>问题</strong>: 当rear增加到指向分配的连续空间之外时，队列无法再插入新元素，但这时往往还有大量可用空间未被占用，这些空间是已经出队的队列元素曾经占用过得存储单元。</p>
</blockquote>
<h1 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h1><p>&emsp;&emsp;把队列空间想象成一个环形空间，环形空间中的存储单元循环使用，用这种方法管理的队列也就称为<strong>循环队列</strong>。<br>&emsp;&emsp;在实际使用队列时，为了使队列空间能重复使用，往往对队列的使用方法稍加改进：无论插入或删除，一旦rear指针增1或front指针增1 时超出了所分配的队列空间，就让它指向这片连续空间的起始位置。（从maxsize-1增加1变为0）</p>
<h1 id="队列的实现方式"><a href="#队列的实现方式" class="headerlink" title="队列的实现方式"></a>队列的实现方式</h1><h2 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 顺序队列：数组实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceArrayQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object[] items;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> theSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SequenceArrayQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.items = <span class="keyword">new</span> Object[maxSize];</div><div class="line">        <span class="keyword">this</span>.theSize = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.front = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.rear = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 入队</div><div class="line">     * <span class="doctag">@param</span> t</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T t)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isFull())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"顺序队列已满，不能入队"</span>);</div><div class="line">        &#125;</div><div class="line">        items[rear++] = t;</div><div class="line">        theSize++;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 出队</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isEmpty())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"顺序队列为空队列，不能出队"</span>);</div><div class="line">        &#125;</div><div class="line">        T ele = (T) items[front];</div><div class="line">        items[front] = <span class="keyword">null</span>;</div><div class="line">        front++;</div><div class="line">        theSize--;</div><div class="line">        <span class="keyword">return</span> ele;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> theSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length == rear;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> theSize == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 循环队列：数组实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularArrayQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object[] items;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> theSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircularArrayQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.items = <span class="keyword">new</span> Object[maxSize];</div><div class="line">        <span class="keyword">this</span>.theSize = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.front = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.rear = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 入队</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> t</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T t)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isFull()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"循环队列已满，不能入队"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 注意</span></div><div class="line">        rear = (front + theSize) % items.length;</div><div class="line">        items[rear] = t;</div><div class="line">        theSize++;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 出队</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"循环队列为空队列，不能出队"</span>);</div><div class="line">        &#125;</div><div class="line">        T ele = (T) items[front];</div><div class="line">        items[front] = <span class="keyword">null</span>;</div><div class="line">        front = (front + <span class="number">1</span>) % items.length;</div><div class="line">        theSize--;</div><div class="line">        <span class="keyword">return</span> ele;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> theSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断已满，与顺序队列不同</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> items.length == theSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> theSize == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 队列：单链表实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedListQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> SingleLinkedList&lt;T&gt; list;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedListQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        list = <span class="keyword">new</span> SingleLinkedList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 入队，链表增加一个元素</div><div class="line">     * <span class="doctag">@param</span> t</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(T t)</span></span>&#123;</div><div class="line">        list.add(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 出队，链表删除索引为0的元素</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">dequeue</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isEmpty())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"队列是空的"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list.remove(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> list.size() == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(2): 线性结构-栈]]></title>
      <url>https://rogerfang.github.io/2016/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-2-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
      <content type="html"><![CDATA[<p><strong>栈</strong>：一种线性存储结构，是限制插入和删除只能在一个位置上进行的表，该位置是表的末端，叫做<strong>栈顶</strong>。</p>
<ul>
<li>栈中数据是按照“先进后出（LIFO）”方式进行出栈的</li>
<li>栈通常包括三种的三种操作：push（向栈中添加元素）、peek（返回栈顶元素）、pop（返回并删除栈顶元素）</li>
</ul>
<h1 id="栈的实现方式"><a href="#栈的实现方式" class="headerlink" title="栈的实现方式"></a>栈的实现方式</h1><h2 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 栈: 数组实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object[] elementData;</div><div class="line"></div><div class="line">    <span class="comment">// 栈顶位置</span></div><div class="line">    <span class="keyword">int</span> top;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[maxSize];</div><div class="line">        <span class="keyword">this</span>.top = -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取栈中元素的个数</div><div class="line">     * Returns the number of elements in this stack.</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> top + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断栈空</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> top == -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断栈满</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> top == elementData.length - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 入栈: 依次加入数据</div><div class="line">     * <span class="doctag">@param</span> data</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">push</span><span class="params">(Object data)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isFull())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"栈满"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.elementData[++top] = data;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 出栈: 从栈顶取出元素</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isEmpty())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"栈空"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>.elementData[top--];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回栈顶元素</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (T) <span class="keyword">this</span>.elementData[top];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="单链表实现"><a href="#单链表实现" class="headerlink" title="单链表实现"></a>单链表实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Roger on 2016/10/26.</div><div class="line"> * 栈: 单链表实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedListStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SingleLinkedList&lt;T&gt; elementList;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedListStack</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.elementList = <span class="keyword">new</span> SingleLinkedList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 入栈</div><div class="line">     * <span class="doctag">@param</span> v</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T v)</span></span>&#123;</div><div class="line">        elementList.add(<span class="number">0</span>, v);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 出栈: 单链表的实现，栈顶始终位于索引为0的结点</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">if</span> (elementList.isEmpty())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"栈为空"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> elementList.remove(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 返回栈顶元素</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">peek</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> elementList.get(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断栈空</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> elementList.size() == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> elementList.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h1><h2 id="平衡符号"><a href="#平衡符号" class="headerlink" title="平衡符号"></a>平衡符号</h2><blockquote>
<p>编译器检查程序的语法错误，这个可以利用栈来实现。做一个空栈，读入字符直到文件末尾，如果字符是一个开放符号，则将其入栈；如果字符是一个封闭符号，则当栈空的时候报错，否则将栈元素弹出，如果弹出的不是对应的开放符号，则报错。文件结尾时，栈非空也报错。</p>
</blockquote>
<h2 id="表达式的记法"><a href="#表达式的记法" class="headerlink" title="表达式的记法"></a>表达式的记法</h2><p><em>中缀表达式</em></p>
<blockquote>
<p>就是常用的将操作符放在操作数中间的算术表达式，中缀表达式是人们常用的算术表示方法。<br><code>eg: (1 + 2) * 3 - 4</code></p>
</blockquote>
<p><em>前缀表达式（波兰式记法）</em></p>
<blockquote>
<p>将运算符写在前面操作数写在后面的不包含括号的表达式。<br><code>eg: - * + 1 2 3 4</code></p>
</blockquote>
<p><em>后缀表达式（逆波兰式记法）</em></p>
<blockquote>
<p>运算符写在操作数后面的不含括号的算术表达式，也叫做逆波兰表达式。<br><code>eg: 1 2 + 3 * 4 -</code></p>
</blockquote>
<h3 id="前缀表达式计算求值"><a href="#前缀表达式计算求值" class="headerlink" title="前缀表达式计算求值"></a>前缀表达式计算求值</h3><blockquote>
<ol>
<li><strong><em>从右至左</em></strong> 扫描表达式，遇到数字时，将数字压入堆栈;</li>
<li>遇到运算符时，弹出栈顶的两个数，用运算符做相应的计算，并将结果入栈；</li>
<li>重复上述过程直到表达式扫描完毕，最后运算得出的值即为表达式的结果。</li>
</ol>
</blockquote>
<h3 id="中缀表达式转换为前缀表达式"><a href="#中缀表达式转换为前缀表达式" class="headerlink" title="中缀表达式转换为前缀表达式"></a>中缀表达式转换为前缀表达式</h3><blockquote>
<ol>
<li>初始化两个栈：运算符栈S1和储存中间结果的栈S2；</li>
<li>从右至左扫描中缀表达式；</li>
<li>遇到操作数时，将其压入S2；</li>
<li>遇到运算符时，比较其与S1栈顶运算符的优先级<ul>
<li>如果S1为空，或栈顶运算符为右括号“)”，则直接将此运算符入栈；</li>
<li>否则，若优先级比栈顶运算符的<strong>较高或相等</strong>，也将运算符压入S1；</li>
<li>否则，将S1栈顶的运算符弹出并压入到S2中；</li>
</ul>
</li>
<li>遇到括号时<ul>
<li>如果是右括号“)”，则直接压入S1；</li>
<li>如果是左括号“(”，则依次弹出S1栈顶的运算符，并压入S2，直到遇到右括号为止，此时将这一对括号丢弃；</li>
</ul>
</li>
<li>重复步骤2~5，直到表达式的最左边；</li>
<li>将S1中剩余的运算符依次弹出并压入S2；</li>
<li>依次从栈顶弹出S2中的元素并输出，结果即为中缀表达式对应的前缀表达式。</li>
</ol>
</blockquote>
<h3 id="后缀表达式计算求值"><a href="#后缀表达式计算求值" class="headerlink" title="后缀表达式计算求值"></a>后缀表达式计算求值</h3><blockquote>
<ol>
<li><strong><em>从左至右</em></strong> 扫描表达式，遇到数字时，将数字压入堆栈；</li>
<li>遇到运算符时，弹出栈顶的两个数，用运算符做相应的计算，并将结果入栈；</li>
<li>重复上述过程直到表达式扫描完毕，最后运算得出的值即为表达式的结果。</li>
</ol>
</blockquote>
<h3 id="中缀表达式转换为后缀表达式"><a href="#中缀表达式转换为后缀表达式" class="headerlink" title="中缀表达式转换为后缀表达式"></a>中缀表达式转换为后缀表达式</h3><blockquote>
<ol>
<li>初始化两个栈：运算符栈S1和输出队列D2；</li>
<li>从左至右扫描中缀表达式；</li>
<li>遇到操作数时，将其存入D2；</li>
<li>遇到运算符时，比较其与S1栈顶运算符的优先级<ul>
<li>如果S1为空，或栈顶运算符为左括号“(”，则直接将此运算符入栈；</li>
<li>否则，若优先级比栈顶运算符的<strong>高</strong>，也将运算符压入S1（++注意转换为前缀表达式时是优先级较高或相同，而这里则不包括相同的情况++）；</li>
<li>否则，将S1栈顶的运算符弹出并存入到D2中；</li>
</ul>
</li>
<li>遇到括号时<ul>
<li>如果是左括号“(”，则直接压入S1；</li>
<li>如果是右括号“)”，则依次弹出S1栈顶的运算符，并存入D2，直到遇到左括号为止，此时将这一对括号丢弃；</li>
</ul>
</li>
<li>重复步骤2~5，直到表达式的最右边；</li>
<li>将S1中剩余的运算符依次弹出并存入D2；</li>
<li>队列D2依次出队，结果即为中缀表达式对应的后缀表达式。</li>
</ol>
</blockquote>
<p><strong>注</strong>：该部分引用自<a href="http://blog.csdn.net/antineutrino/article/details/6763722" target="_blank" rel="external">http://blog.csdn.net/antineutrino/article/details/6763722</a></p>
<h2 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h2><blockquote>
<p>当调用一个新方法时，主调方法的所有局部变量需要由系统存储起来，否则被调用的新方法将会重写由主调方法的变量所使用的内存，不仅如此，该主调方法的当前位置也必须存储，以便在新方法运行完后知道向哪转移。</p>
<p>方法调用和方法返回的问题类似于平衡符号问题中的开括号和闭括号。</p>
</blockquote>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[数据结构与算法(1): 线性结构-表]]></title>
      <url>https://rogerfang.github.io/2016/10/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-1-%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84-%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组能够顺序存储相同类型的多个数据，数据的元素在内存上的存储地址是连续的。在声明数组的时候，需要指定数组的名称，它含有的数据类型以及数组的长度。<br><strong>特点</strong>：数据是连续的，随机访问速度快。<br>（在Java中Collection集合中提供了ArrayList和Vector实现动态数组）</p>
<h1 id="表（线性表）"><a href="#表（线性表）" class="headerlink" title="表（线性表）"></a>表（线性表）</h1><p>线性表：零个或多个数据元素的有限序列。线性表中数据元素之间的关系是<strong><em>一对一的关系</em></strong>，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的。</p>
<blockquote>
<ul>
<li>线性表的顺序存储结构，指的是用一段<strong><em>地址连续</em></strong>的存储单元依次存储线性表的数据元素。</li>
<li>线性表的链式存储结构，是由一系列结点组成，这些节点不必再内存中相连。结点包括存储元素的数据域和存储直接后继或前驱的指针域。</li>
</ul>
</blockquote>
<p>具体实现可以参见java集合类中的<em>ArrayList</em>和<em>LinkedList</em>。</p>
<h2 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 顺序存储结构：表的简单数组实现</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceList</span> </span>&#123;</div><div class="line">	<span class="comment">// 线性表的最大存储容量</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_VALUE = <span class="number">20</span>;</div><div class="line">    <span class="comment">// 线性表实际存储位置</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] data = <span class="keyword">new</span> <span class="keyword">int</span>[MAX_VALUE];</div><div class="line">    <span class="comment">// 线性表的当前长度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 链式存储结构：单链表</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// 首元素</span></div><div class="line">    <span class="keyword">private</span> Node&lt;T&gt; head;</div><div class="line">    <span class="comment">// 尾元素</span></div><div class="line">    <span class="keyword">private</span> Node&lt;T&gt; last;</div><div class="line"></div><div class="line">    <span class="comment">// 元素个数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> theSize = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">        <span class="keyword">private</span> T value;</div><div class="line">        <span class="keyword">private</span> Node&lt;T&gt; next;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T value, Node&lt;T&gt; next)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增加一个数据到list</div><div class="line">     * <span class="doctag">@param</span> v</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T v)</span></span>&#123;</div><div class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(v, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (isEmpty())&#123;</div><div class="line">            head = newNode;</div><div class="line">            last = head;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            last.next = newNode;</div><div class="line">            last = newNode;</div><div class="line">        &#125;</div><div class="line">        theSize++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在index处添加元素v，其他元素后移</div><div class="line">     * <span class="doctag">@param</span> index</div><div class="line">     * <span class="doctag">@param</span> v</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, T v)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)&#123;</div><div class="line">            Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(v, head);</div><div class="line">            head = newNode;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            checkIndex(index);</div><div class="line">            Node&lt;T&gt; current = head;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i++)&#123;</div><div class="line">                current = current.next;</div><div class="line">            &#125;</div><div class="line">            Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(v, current.next);</div><div class="line">            current.next = newNode;</div><div class="line">        &#125;</div><div class="line">        theSize++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据索引获取值</div><div class="line">     * <span class="doctag">@param</span> index</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> node(index).value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否包含传入的对象</div><div class="line">     * <span class="doctag">@param</span> obj</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> indexOf(obj) != -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除list中首次出现的value</div><div class="line">     * <span class="doctag">@param</span> v</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">        Node&lt;T&gt; current = head;</div><div class="line">        Node&lt;T&gt; prev = current;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size(); i++)&#123;</div><div class="line">            <span class="keyword">if</span> (current.value.equals(obj))&#123;</div><div class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>)&#123;</div><div class="line">                    head = current.next;</div><div class="line">                    theSize--;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                prev.next = current.next;</div><div class="line">                theSize--;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            prev = current;</div><div class="line">            current = current.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据索引值删除元素</div><div class="line">     * <span class="doctag">@param</span> index</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        checkIndex(index);</div><div class="line">        theSize--;</div><div class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>)&#123;</div><div class="line">            Node&lt;T&gt; current = head;</div><div class="line">            T val = current.value;</div><div class="line">            head = current.next;</div><div class="line">            current.value = <span class="keyword">null</span>;</div><div class="line">            current.next = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> val;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            Node&lt;T&gt; prev = node(index-<span class="number">1</span>);</div><div class="line">            Node&lt;T&gt; current = prev.next;</div><div class="line">            T val = current.value;</div><div class="line">            prev.next = current.next;</div><div class="line">            current.value = <span class="keyword">null</span>;</div><div class="line">            current.next = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">return</span> val;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 清空链表</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">        head = <span class="keyword">null</span>;</div><div class="line">        theSize = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 打印全部链表</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || size() == <span class="number">0</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"链表为空"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            Node&lt;T&gt; current = head;</div><div class="line">            <span class="keyword">while</span> (current != <span class="keyword">null</span>)&#123;</div><div class="line">                System.out.print(current.value + <span class="string">" "</span>);</div><div class="line">                current = current.next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the index of the first occurrence of the specified element</div><div class="line">     * in this list</div><div class="line">     * <span class="doctag">@param</span> obj</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next)&#123;</div><div class="line">                <span class="keyword">if</span> (x.value != <span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> index;</div><div class="line">                &#125;</div><div class="line">                index++;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next)&#123;</div><div class="line">                <span class="keyword">if</span> (obj.equals(x.value))&#123;</div><div class="line">                    <span class="keyword">return</span> index;</div><div class="line">                &#125;</div><div class="line">                index++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.theSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size() == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the (non-null) Node at the specified element index.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        checkIndex(index);</div><div class="line"></div><div class="line">        Node&lt;T&gt; current = head;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)&#123;</div><div class="line">            current = current.next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size() - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"传入索引无效:"</span>+index);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 链式存储结构：双链表</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Node head;</div><div class="line">    <span class="keyword">private</span> Node tail;</div><div class="line">    <span class="comment">// 节点个数</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> theSize = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt;</span>&#123;</div><div class="line">        <span class="keyword">private</span> T value;</div><div class="line">        <span class="keyword">private</span> Node prev;</div><div class="line">        <span class="keyword">private</span> Node next;</div><div class="line"></div><div class="line">        Node(T value, Node prev, Node next) &#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.prev = prev;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加一个元素到双链表</div><div class="line">     * <span class="doctag">@param</span> v</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T v)</span></span>&#123;</div><div class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(v, tail, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (tail == <span class="keyword">null</span>)&#123;</div><div class="line">            head = newNode;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            tail.next = newNode;</div><div class="line">        &#125;</div><div class="line">        tail = newNode;</div><div class="line">        theSize++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据索引获取元素</div><div class="line">     * <span class="doctag">@param</span> i</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> node(i).value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除索引的元素</div><div class="line">     * Removes the element at the specified position in this list</div><div class="line">     * <span class="doctag">@param</span> i</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">remove</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> unlink(node(i));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除传入的对象</div><div class="line">     * Removes the first occurrence of the specified element from this list</div><div class="line">     * <span class="doctag">@param</span> obj</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next)&#123;</div><div class="line">                <span class="keyword">if</span> (x.value == <span class="keyword">null</span>)&#123;</div><div class="line">                    unlink(x);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next)&#123;</div><div class="line">                <span class="keyword">if</span> (obj.equals(x.value))&#123;</div><div class="line">                    unlink(x);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否包含传入的对象</div><div class="line">     * <span class="doctag">@param</span> obj</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> indexOf(obj) != -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.theSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size() == <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>;)&#123;</div><div class="line">            Node&lt;T&gt; next = x.next;</div><div class="line">            x.value = <span class="keyword">null</span>;</div><div class="line">            x.next = <span class="keyword">null</span>;</div><div class="line">            x.prev = <span class="keyword">null</span>;</div><div class="line">            x = next;</div><div class="line">        &#125;</div><div class="line">        head = tail = <span class="keyword">null</span>;</div><div class="line">        theSize = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the index of the first occurrence of the specified element</div><div class="line">     * in this list</div><div class="line">     * <span class="doctag">@param</span> obj</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next)&#123;</div><div class="line">                <span class="keyword">if</span> (x.value != <span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> index;</div><div class="line">                &#125;</div><div class="line">                index++;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = head; x != <span class="keyword">null</span>; x = x.next)&#123;</div><div class="line">                <span class="keyword">if</span> (obj.equals(x.value))&#123;</div><div class="line">                    <span class="keyword">return</span> index;</div><div class="line">                &#125;</div><div class="line">                index++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the index of the last occurrence of the specified element</div><div class="line">     * in this list</div><div class="line">     * <span class="doctag">@param</span> obj</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object obj)</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> index = size();</div><div class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = tail; x != <span class="keyword">null</span>; x = x.prev)&#123;</div><div class="line">                index--;</div><div class="line">                <span class="keyword">if</span> (x.value == <span class="keyword">null</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> index;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (Node&lt;T&gt; x = tail; x != <span class="keyword">null</span>; x = x.prev)&#123;</div><div class="line">                index--;</div><div class="line">                <span class="keyword">if</span> (obj.equals(x.value))&#123;</div><div class="line">                    <span class="keyword">return</span> index;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || size() == <span class="number">0</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"链表为空"</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            Node&lt;T&gt; current = head;</div><div class="line">            <span class="keyword">while</span> (current != <span class="keyword">null</span>)&#123;</div><div class="line">                System.out.print(current.value + <span class="string">" "</span>);</div><div class="line">                current = current.next;</div><div class="line">            &#125;</div><div class="line">            System.out.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the (non-null) Node at the specified element index.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Node&lt;T&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        checkIndex(index);</div><div class="line"></div><div class="line">        Node&lt;T&gt; current;</div><div class="line">        <span class="keyword">if</span> (index &lt; (size() &gt;&gt; <span class="number">1</span>))&#123;</div><div class="line">            current = head;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)&#123;</div><div class="line">                current = current.next;</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            current = tail;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size() - <span class="number">1</span>; i &gt; index; i--)&#123;</div><div class="line">                current = current.prev;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">unlink</span><span class="params">(Node&lt;T&gt; p)</span></span>&#123;</div><div class="line">        T val = p.value;</div><div class="line">        Node&lt;T&gt; prev = p.prev;</div><div class="line">        Node&lt;T&gt; next = p.next;</div><div class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>)&#123;</div><div class="line">            head = next;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            prev.next = next;</div><div class="line">            p.prev = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>)&#123;</div><div class="line">            tail = prev;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            next.prev = prev;</div><div class="line">            p.next = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        p.value = <span class="keyword">null</span>;</div><div class="line">        theSize--;</div><div class="line">        <span class="keyword">return</span> val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkIndex</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size() - <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"传入索引无效:"</span>+index);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>顺序存储结构和单链表结构的优缺点比较:</p>
<table>
<thead>
<tr>
<th>column</th>
<th>顺序存储结构</th>
<th>单链表存储结构</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储分配方式</td>
<td>连续的存储单元</td>
<td>任意的存储单元</td>
</tr>
<tr>
<td>时间性能</td>
<td>find:O(1), insert&amp;delete:O(n)</td>
<td>find:O(n), insert&amp;delete:O(1)</td>
</tr>
<tr>
<td>空间性能</td>
<td>需要预分配存储空间</td>
<td>不需要预分配存储空间</td>
</tr>
</tbody>
</table>
<hr>
]]></content>
    </entry>
    
  
  
</search>
